{"mappings":"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","sources":["node_modules/tw-elements/src/js/forms/datepicker/templates.js","node_modules/tw-elements/src/js/forms/datepicker/index.js","node_modules/tw-elements/src/js/util/keycodes.js","node_modules/tw-elements/src/js/forms/timepicker/templates.js","node_modules/tw-elements/src/js/components/chips/templates.js","node_modules/tw-elements/src/js/forms/timepicker/utils.js","node_modules/tw-elements/src/js/forms/timepicker/index.js","node_modules/tw-elements/src/js/data/datatables/html/pagination.js","node_modules/tw-elements/node_modules/perfect-scrollbar/dist/perfect-scrollbar.esm.js","node_modules/tw-elements/src/js/data/datatables/html/columns.js","node_modules/tw-elements/src/js/data/datatables/html/table.js","node_modules/tw-elements/src/js/data/datatables/html/rows.js","node_modules/tw-elements/src/js/data/datatables/index.js","node_modules/tw-elements/src/js/components/popconfirm.js","node_modules/tw-elements/src/js/components/lightbox.js","node_modules/tw-elements/src/js/forms/dateTimepicker/index.js","node_modules/tw-elements/src/js/forms/dateTimepicker/templates.js","node_modules/tw-elements/node_modules/chart.js/dist/chunks/helpers.segment.mjs","node_modules/tw-elements/node_modules/chart.js/dist/chart.mjs","node_modules/tw-elements/node_modules/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.esm.js"],"sourcesContent":["/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\n/* eslint-disable indent */\r\n\r\nimport Manipulator from \"../../dom/manipulator\";\r\nimport { element } from \"../../util\";\r\nimport {\r\n  getYear,\r\n  getMonth,\r\n  getDate,\r\n  getDayNumber,\r\n  getFirstDayOfWeek,\r\n  addMonths,\r\n  getDaysInMonth,\r\n  createDate,\r\n  isSameDate,\r\n  getToday,\r\n  getYearsOffset,\r\n  isDateDisabled,\r\n  isMonthDisabled,\r\n  isYearDisabled,\r\n} from \"./date-utils\";\r\n\r\nconst MODAL_CONTAINER_REF = \"data-te-datepicker-modal-container-ref\";\r\nconst DROPDOWN_CONTAINER_REF = \"data-te-datepicker-dropdown-container-ref\";\r\nconst BACKDROP_REF = \"data-te-dropdown-backdrop-ref\";\r\nconst DATE_TEXT_REF = \"data-te-datepicker-date-text-ref\";\r\nconst VIEW_REF = \"data-te-datepicker-view-ref\";\r\nconst PREVIOUS_BUTTON_REF = \"data-te-datepicker-previous-button-ref\";\r\nconst NEXT_BUTTON_REF = \"data-te-datepicker-next-button-ref\";\r\nconst OK_BUTTON_REF = \"data-te-datepicker-ok-button-ref\";\r\nconst CANCEL_BUTTON_REF = \"data-te-datepicker-cancel-button-ref\";\r\nconst CLEAR_BUTTON_REF = \"data-te-datepicker-clear-button-ref\";\r\nconst VIEW_CHANGE_BUTTON_REF = \"data-te-datepicker-view-change-button-ref\";\r\n\r\nexport function getDatepickerTemplate(\r\n  date,\r\n  selectedDate,\r\n  selectedYear,\r\n  selectedMonth,\r\n  options,\r\n  monthsInRow,\r\n  yearsInView,\r\n  yearsInRow,\r\n  id,\r\n  classes\r\n) {\r\n  const month = getMonth(date);\r\n  const year = getYear(date);\r\n  const day = getDate(date);\r\n  const dayNumber = getDayNumber(date);\r\n  const template = element(\"div\");\r\n  const inlineContent = `\r\n        ${createMainContent(\r\n          date,\r\n          month,\r\n          year,\r\n          selectedDate,\r\n          selectedYear,\r\n          selectedMonth,\r\n          options,\r\n          monthsInRow,\r\n          yearsInView,\r\n          yearsInRow,\r\n          classes\r\n        )}\r\n    `;\r\n  const modalContent = `\r\n      ${createHeader(day, dayNumber, month, options, classes)}\r\n      ${createMainContent(\r\n        date,\r\n        month,\r\n        year,\r\n        selectedDate,\r\n        selectedYear,\r\n        selectedMonth,\r\n        options,\r\n        monthsInRow,\r\n        yearsInView,\r\n        yearsInRow,\r\n        classes\r\n      )}\r\n    `;\r\n\r\n  if (options.inline) {\r\n    Manipulator.addClass(template, classes.datepickerDropdownContainer);\r\n    template.setAttribute(DROPDOWN_CONTAINER_REF, id);\r\n\r\n    template.innerHTML = inlineContent;\r\n  } else {\r\n    Manipulator.addClass(template, classes.modalContainer);\r\n    template.setAttribute(MODAL_CONTAINER_REF, id);\r\n\r\n    template.innerHTML = modalContent;\r\n  }\r\n\r\n  return template;\r\n}\r\n\r\nexport function getBackdropTemplate(backdropClasses) {\r\n  const backdrop = element(\"div\");\r\n  Manipulator.addClass(backdrop, backdropClasses);\r\n  backdrop.setAttribute(BACKDROP_REF, \"\");\r\n\r\n  return backdrop;\r\n}\r\n\r\nexport function createContainer(modalContainerClasses) {\r\n  const container = element(\"div\");\r\n  Manipulator.addClass(container, modalContainerClasses);\r\n  container.setAttribute(MODAL_CONTAINER_REF, \"\");\r\n\r\n  return container;\r\n}\r\n\r\nfunction createHeader(day, dayNumber, month, options, classes) {\r\n  return `\r\n      <div class=\"${classes.datepickerHeader}\" data-te-datepicker-header>\r\n        <div class=\"${classes.datepickerTitle}\">\r\n          <span class=\"${classes.datepickerTitleText}\">${options.title}</span>\r\n        </div>\r\n        <div class=\"${classes.datepickerDate}\">\r\n          <span class=\"${classes.datepickerDateText}\" ${DATE_TEXT_REF} >${options.weekdaysShort[dayNumber]}, ${options.monthsShort[month]} ${day}</span>\r\n        </div>\r\n      </div>\r\n    `;\r\n}\r\n\r\nfunction createMainContent(\r\n  date,\r\n  month,\r\n  year,\r\n  selectedDate,\r\n  selectedYear,\r\n  selectedMonth,\r\n  options,\r\n  monthsInRow,\r\n  yearsInView,\r\n  yearsInRow,\r\n  classes\r\n) {\r\n  let mainContentTemplate;\r\n  if (options.inline) {\r\n    mainContentTemplate = `\r\n    <div class=\"${classes.datepickerMain}\">\r\n      ${createControls(month, year, options, classes)}\r\n      <div class=\"${classes.datepickerView}\" ${VIEW_REF} tabindex=\"0\">\r\n        ${createViewTemplate(\r\n          date,\r\n          year,\r\n          selectedDate,\r\n          selectedYear,\r\n          selectedMonth,\r\n          options,\r\n          monthsInRow,\r\n          yearsInView,\r\n          yearsInRow,\r\n          classes\r\n        )}\r\n      </div>\r\n    </div>\r\n  `;\r\n  } else {\r\n    mainContentTemplate = `\r\n    <div class=\"${classes.datepickerMain}\">\r\n      ${createControls(month, year, options, classes)}\r\n      <div class=\"${classes.datepickerView}\" ${VIEW_REF} tabindex=\"0\">\r\n        ${createViewTemplate(\r\n          date,\r\n          year,\r\n          selectedDate,\r\n          selectedYear,\r\n          selectedMonth,\r\n          options,\r\n          monthsInRow,\r\n          yearsInView,\r\n          yearsInRow,\r\n          classes\r\n        )}\r\n      </div>\r\n      ${createFooter(options, classes)}\r\n    </div>\r\n  `;\r\n  }\r\n\r\n  return mainContentTemplate;\r\n}\r\n\r\nfunction createViewTemplate(\r\n  date,\r\n  year,\r\n  selectedDate,\r\n  selectedYear,\r\n  selectedMonth,\r\n  options,\r\n  monthsInRow,\r\n  yearsInView,\r\n  yearsInRow,\r\n  classes\r\n) {\r\n  let viewTemplate;\r\n  if (options.view === \"days\") {\r\n    viewTemplate = createDayViewTemplate(date, selectedDate, options, classes);\r\n  } else if (options.view === \"months\") {\r\n    viewTemplate = createMonthViewTemplate(\r\n      year,\r\n      selectedYear,\r\n      selectedMonth,\r\n      options,\r\n      monthsInRow,\r\n      classes\r\n    );\r\n  } else {\r\n    viewTemplate = createYearViewTemplate(\r\n      date,\r\n      selectedYear,\r\n      options,\r\n      yearsInView,\r\n      yearsInRow,\r\n      classes\r\n    );\r\n  }\r\n\r\n  return viewTemplate;\r\n}\r\n\r\nfunction createControls(month, year, options, classes) {\r\n  return `\r\n    <div class=\"${classes.datepickerDateControls}\">\r\n      <button class=\"${classes.datepickerViewChangeButton}\" aria-label=\"${\r\n    options.switchToMultiYearViewLabel\r\n  }\" ${VIEW_CHANGE_BUTTON_REF}>\r\n        ${options.monthsFull[month]} ${year} ${createViewChangeButtonIcon(\r\n    options,\r\n    classes\r\n  )}\r\n      </button>\r\n      <div class=\"${classes.datepickerArrowControls}\">\r\n        <button class=\"${classes.datepickerPreviousButton}\" aria-label=\"${\r\n    options.prevMonthLabel\r\n  }\" ${PREVIOUS_BUTTON_REF}>${options.changeMonthIconTemplate}</button>\r\n        <button class=\"${classes.datepickerNextButton}\" aria-label=\"${\r\n    options.nextMonthLabel\r\n  }\" ${NEXT_BUTTON_REF}>${options.changeMonthIconTemplate}</button>\r\n      </div>\r\n    </div>\r\n    `;\r\n}\r\n\r\nexport function createViewChangeButtonIcon(options, classes) {\r\n  return `\r\n  <span class=\"${classes.datepickerViewChangeIcon}\">\r\n  ${options.viewChangeIconTemplate}\r\n  </span>\r\n  `;\r\n}\r\n\r\nfunction createFooter(options, classes) {\r\n  const okBtn = `<button class=\"${classes.datepickerFooterBtn}\" aria-label=\"${options.okBtnLabel}\" ${OK_BUTTON_REF}>${options.okBtnText}</button>`;\r\n  const cancelButton = `<button class=\"${classes.datepickerFooterBtn}\" aria-label=\"${options.cancelBtnLabel}\" ${CANCEL_BUTTON_REF}>${options.cancelBtnText}</button>`;\r\n  const clearButton = `<button class=\"${classes.datepickerFooterBtn} ${classes.datepickerClearBtn}\" aria-label=\"${options.clearBtnLabel}\" ${CLEAR_BUTTON_REF}>${options.clearBtnText}</button>`;\r\n\r\n  return `\r\n        <div class=\"${classes.datepickerFooter}\">\r\n          \r\n        ${options.removeClearBtn ? \"\" : clearButton}\r\n        ${options.removeCancelBtn ? \"\" : cancelButton}\r\n        ${options.removeOkBtn ? \"\" : okBtn}\r\n        </div>\r\n      `;\r\n}\r\n\r\nexport function createDayViewTemplate(date, headerDate, options, classes) {\r\n  const dates = getDatesArray(date, headerDate, options);\r\n  const dayNames = options.weekdaysNarrow;\r\n\r\n  const tableHeadContent = `\r\n      <tr>\r\n        ${dayNames\r\n          .map((name, i) => {\r\n            return `<th class=\"${classes.datepickerDayHeading}\" scope=\"col\" aria-label=\"${options.weekdaysFull[i]}\">${name}</th>`;\r\n          })\r\n          .join(\"\")}\r\n      </tr>\r\n    `;\r\n\r\n  const tableBodyContent = dates\r\n    .map((week) => {\r\n      return `\r\n        <tr>\r\n          ${week\r\n            .map((day) => {\r\n              return `\r\n              <td\r\n              class=\"${classes.datepickerCell} ${classes.datepickerCellSmall}\"\r\n              data-te-date=\"${getYear(day.date)}-${getMonth(\r\n                day.date\r\n              )}-${getDate(day.date)}\"\r\n              aria-label=\"${day.date}\"\r\n              aria-selected=\"${day.isSelected}\"\r\n              ${day.isSelected ? \"data-te-datepicker-cell-selected\" : \"\"}\r\n              ${\r\n                !day.currentMonth || day.disabled\r\n                  ? \"data-te-datepicker-cell-disabled\"\r\n                  : \"\"\r\n              }\r\n              ${day.isToday ? \"data-te-datepicker-cell-current\" : \"\"}\r\n              >\r\n                <div\r\n                  class=\"${classes.datepickerCellContent} ${\r\n                classes.datepickerCellContentSmall\r\n              }\"\r\n                  style=\"${\r\n                    day.currentMonth ? \"display: block\" : \"display: none\"\r\n                  }\"\r\n                  >\r\n                  ${day.dayNumber}\r\n                  </div>\r\n              </td>\r\n            `;\r\n            })\r\n            .join(\"\")}\r\n        </tr>\r\n      `;\r\n    })\r\n    .join(\"\");\r\n\r\n  return `\r\n      <table class=\"${classes.datepickerTable}\">\r\n        <thead>\r\n          ${tableHeadContent}\r\n        </thead>\r\n        <tbody>\r\n         ${tableBodyContent}\r\n        </tbody>\r\n      </table>\r\n    `;\r\n}\r\n\r\nfunction getDatesArray(activeDate, headerDate, options) {\r\n  const dates = [];\r\n\r\n  const month = getMonth(activeDate);\r\n  const previousMonth = getMonth(addMonths(activeDate, -1));\r\n  const nextMonth = getMonth(addMonths(activeDate, 1));\r\n  const year = getYear(activeDate);\r\n\r\n  const firstDay = getFirstDayOfWeek(year, month, options);\r\n  const daysInMonth = getDaysInMonth(activeDate);\r\n  const daysInPreviousMonth = getDaysInMonth(addMonths(activeDate, -1));\r\n  const daysInWeek = 7;\r\n\r\n  let dayNumber = 1;\r\n  let isCurrentMonth = false;\r\n  for (let i = 1; i < daysInWeek; i++) {\r\n    const week = [];\r\n    if (i === 1) {\r\n      // First week\r\n      const previousMonthDay = daysInPreviousMonth - firstDay + 1;\r\n      // Previous month\r\n      for (let j = previousMonthDay; j <= daysInPreviousMonth; j++) {\r\n        const date = createDate(year, previousMonth, j);\r\n\r\n        week.push({\r\n          date,\r\n          currentMonth: isCurrentMonth,\r\n          isSelected: headerDate && isSameDate(date, headerDate),\r\n          isToday: isSameDate(date, getToday()),\r\n          dayNumber: getDate(date),\r\n        });\r\n      }\r\n\r\n      isCurrentMonth = true;\r\n      // Current month\r\n      const daysLeft = daysInWeek - week.length;\r\n      for (let j = 0; j < daysLeft; j++) {\r\n        const date = createDate(year, month, dayNumber);\r\n\r\n        week.push({\r\n          date,\r\n          currentMonth: isCurrentMonth,\r\n          isSelected: headerDate && isSameDate(date, headerDate),\r\n          isToday: isSameDate(date, getToday()),\r\n          dayNumber: getDate(date),\r\n          disabled: isDateDisabled(\r\n            date,\r\n            options.min,\r\n            options.max,\r\n            options.filter,\r\n            options.disablePast,\r\n            options.disableFuture\r\n          ),\r\n        });\r\n        dayNumber++;\r\n      }\r\n    } else {\r\n      // Rest of the weeks\r\n      for (let j = 1; j < 8; j++) {\r\n        if (dayNumber > daysInMonth) {\r\n          // Next month\r\n          dayNumber = 1;\r\n          isCurrentMonth = false;\r\n        }\r\n        const date = createDate(\r\n          year,\r\n          isCurrentMonth ? month : nextMonth,\r\n          dayNumber\r\n        );\r\n\r\n        week.push({\r\n          date,\r\n          currentMonth: isCurrentMonth,\r\n          isSelected: headerDate && isSameDate(date, headerDate),\r\n          isToday: isSameDate(date, getToday()),\r\n          dayNumber: getDate(date),\r\n          disabled: isDateDisabled(\r\n            date,\r\n            options.min,\r\n            options.max,\r\n            options.filter,\r\n            options.disablePast,\r\n            options.disableFuture\r\n          ),\r\n        });\r\n        dayNumber++;\r\n      }\r\n    }\r\n    dates.push(week);\r\n  }\r\n\r\n  return dates;\r\n}\r\n\r\nexport function createMonthViewTemplate(\r\n  year,\r\n  selectedYear,\r\n  selectedMonth,\r\n  options,\r\n  monthsInRow,\r\n  classes\r\n) {\r\n  const months = getMonthsArray(options, monthsInRow);\r\n  const currentMonth = getMonth(getToday());\r\n  const currentYear = getYear(getToday());\r\n\r\n  const tableBodyContent = `\r\n      ${months\r\n        .map((row) => {\r\n          return `\r\n          <tr>\r\n            ${row\r\n              .map((month) => {\r\n                const monthIndex = options.monthsShort.indexOf(month);\r\n                return `\r\n                <td class=\"${classes.datepickerCell} ${\r\n                  classes.datepickerCellLarge\r\n                }\"\r\n                ${\r\n                  isMonthDisabled(\r\n                    monthIndex,\r\n                    year,\r\n                    options.min,\r\n                    options.max,\r\n                    options.disablePast,\r\n                    options.disableFuture\r\n                  )\r\n                    ? \"data-te-datepicker-cell-disabled\"\r\n                    : \"\"\r\n                }\r\n                \r\n                data-te-month=\"${monthIndex}\" data-te-year=\"${year}\" aria-label=\"${month}, ${year}\"\r\n                ${\r\n                  monthIndex === selectedMonth && year === selectedYear\r\n                    ? \"data-te-datepicker-cell-selected\"\r\n                    : \"\"\r\n                }\r\n                ${\r\n                  monthIndex === currentMonth && year === currentYear\r\n                    ? \"data-te-datepicker-cell-current\"\r\n                    : \"\"\r\n                }\" data-te-month=\"${monthIndex}\" data-te-year=\"${year}\" aria-label=\"${month}, ${year}\">\r\n                  <div class=\"${classes.datepickerCellContent} ${\r\n                  classes.datepickerCellContentLarge\r\n                }\">${month}</div>\r\n                </td>\r\n              `;\r\n              })\r\n              .join(\"\")}\r\n          </tr>\r\n        `;\r\n        })\r\n        .join(\"\")}\r\n    `;\r\n\r\n  return `\r\n      <table class=\"${classes.datepickerTable}\">\r\n        <tbody>\r\n         ${tableBodyContent}\r\n        </tbody>\r\n      </table>\r\n    `;\r\n}\r\n\r\nfunction getMonthsArray(options, monthsInRow) {\r\n  const months = [];\r\n\r\n  let row = [];\r\n\r\n  for (let i = 0; i < options.monthsShort.length; i++) {\r\n    row.push(options.monthsShort[i]);\r\n\r\n    if (row.length === monthsInRow) {\r\n      const monthsRow = row;\r\n      months.push(monthsRow);\r\n      row = [];\r\n    }\r\n  }\r\n\r\n  return months;\r\n}\r\n\r\nexport function createYearViewTemplate(\r\n  date,\r\n  selectedYear,\r\n  options,\r\n  yearsInView,\r\n  yearsInRow,\r\n  classes\r\n) {\r\n  const years = getYearsArray(date, yearsInView, yearsInRow);\r\n  const currentYear = getYear(getToday());\r\n\r\n  const tableBodyContent = `\r\n    ${years\r\n      .map((row) => {\r\n        return `\r\n        <tr>\r\n          ${row\r\n            .map((year) => {\r\n              return `\r\n              <td class=\"${classes.datepickerCell} ${\r\n                classes.datepickerCellLarge\r\n              }\"  aria-label=\"${year}\" data-te-year=\"${year}\"\r\n              ${\r\n                isYearDisabled(\r\n                  year,\r\n                  options.min,\r\n                  options.max,\r\n                  options.disablePast,\r\n                  options.disableFuture\r\n                )\r\n                  ? \"data-te-datepicker-cell-disabled\"\r\n                  : \"\"\r\n              }\r\n              ${year === selectedYear ? \"data-te-datepicker-cell-selected\" : \"\"}\r\n              ${year === currentYear ? \"data-te-datepicker-cell-current\" : \"\"}\r\n              >\r\n                <div class=\"${classes.datepickerCellContent} ${\r\n                classes.datepickerCellContentLarge\r\n              }\">${year}</div>\r\n              </td>\r\n            `;\r\n            })\r\n            .join(\"\")}\r\n        </tr>\r\n      `;\r\n      })\r\n      .join(\"\")}\r\n  `;\r\n\r\n  return `\r\n      <table class=\"${classes.datepickerTable}\">\r\n        <tbody>\r\n        ${tableBodyContent}\r\n        </tbody>\r\n      </table>\r\n    `;\r\n}\r\n\r\nfunction getYearsArray(date, yearsInView, yearsInRow) {\r\n  const years = [];\r\n  const activeYear = getYear(date);\r\n  const yearsOffset = getYearsOffset(date, yearsInView);\r\n\r\n  const firstYearInView = activeYear - yearsOffset;\r\n\r\n  let row = [];\r\n\r\n  for (let i = 0; i < yearsInView; i++) {\r\n    row.push(firstYearInView + i);\r\n\r\n    if (row.length === yearsInRow) {\r\n      const yearsRow = row;\r\n      years.push(yearsRow);\r\n      row = [];\r\n    }\r\n  }\r\n\r\n  return years;\r\n}\r\n\r\nexport function getToggleButtonTemplate(id, toggleBtnClasses) {\r\n  return `\r\n    <button id=\"${id}\" type=\"button\" class=\"${toggleBtnClasses}\" data-te-datepicker-toggle-button-ref data-te-datepicker-toggle-ref>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n      <path fill-rule=\"evenodd\" d=\"M6.75 2.25A.75.75 0 017.5 3v1.5h9V3A.75.75 0 0118 3v1.5h.75a3 3 0 013 3v11.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V7.5a3 3 0 013-3H6V3a.75.75 0 01.75-.75zm13.5 9a1.5 1.5 0 00-1.5-1.5H5.25a1.5 1.5 0 00-1.5 1.5v7.5a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5v-7.5z\" clip-rule=\"evenodd\" />\r\n      </svg>  \r\n    </button>\r\n  `;\r\n}\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\nimport { createPopper } from \"@popperjs/core\";\r\nimport Data from \"../../dom/data\";\r\nimport EventHandler from \"../../dom/event-handler\";\r\nimport Manipulator from \"../../dom/manipulator\";\r\nimport SelectorEngine from \"../../dom/selector-engine\";\r\nimport ScrollBarHelper from \"../../util/scrollbar\";\r\nimport { typeCheckConfig, getUID, isRTL } from \"../../util/index\";\r\nimport FocusTrap from \"../../util/focusTrap\";\r\nimport {\r\n  getDate,\r\n  getDayNumber,\r\n  getMonth,\r\n  getYear,\r\n  getDaysInMonth,\r\n  addYears,\r\n  addMonths,\r\n  addDays,\r\n  createDate,\r\n  convertStringToDate,\r\n  isSameDate,\r\n  areDatesInSameView,\r\n  isDateDisabled,\r\n  isMonthDisabled,\r\n  isYearDisabled,\r\n  isNextDateDisabled,\r\n  isPreviousDateDisabled,\r\n  getYearsOffset,\r\n  isValidDate,\r\n} from \"./date-utils\";\r\nimport {\r\n  getBackdropTemplate,\r\n  getDatepickerTemplate,\r\n  createDayViewTemplate,\r\n  createMonthViewTemplate,\r\n  createYearViewTemplate,\r\n  getToggleButtonTemplate,\r\n  createViewChangeButtonIcon,\r\n} from \"./templates\";\r\nimport {\r\n  ENTER,\r\n  SPACE,\r\n  ESCAPE,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n  DOWN_ARROW,\r\n  UP_ARROW,\r\n  HOME,\r\n  END,\r\n  PAGE_UP,\r\n  PAGE_DOWN,\r\n} from \"../../util/keycodes\";\r\n\r\n/*\r\n------------------------------------------------------------------------\r\nConstants\r\n------------------------------------------------------------------------\r\n*/\r\n\r\nconst YEARS_IN_VIEW = 24;\r\nconst YEARS_IN_ROW = 4;\r\nconst MONTHS_IN_ROW = 4;\r\n\r\nconst NAME = \"datepicker\";\r\nconst DATA_KEY = \"te.datepicker\";\r\nconst EVENT_KEY = `.${DATA_KEY}`;\r\nconst DATA_API_KEY = \".data-api\";\r\n\r\nconst EVENT_CLOSE = `close${EVENT_KEY}`;\r\nconst EVENT_OPEN = `open${EVENT_KEY}`;\r\nconst EVENT_DATE_CHANGE = `dateChange${EVENT_KEY}`;\r\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;\r\n\r\nconst MODAL_CONTAINER_NAME = \"data-te-datepicker-modal-container-ref\";\r\nconst DROPDOWN_CONTAINER_NAME = \"data-te-datepicker-dropdown-container-ref\";\r\n\r\nconst DATEPICKER_TOGGLE_SELECTOR = \"[data-te-datepicker-toggle-ref]\";\r\nconst MODAL_CONTAINER_SELECTOR = `[${MODAL_CONTAINER_NAME}]`;\r\nconst DROPDOWN_CONTAINER_SELECTOR = `[${DROPDOWN_CONTAINER_NAME}]`;\r\nconst VIEW_CHANGE_BUTTON_SELECTOR =\r\n  \"[data-te-datepicker-view-change-button-ref]\";\r\nconst PREVIOUS_BUTTON_SELECTOR = \"[data-te-datepicker-previous-button-ref]\";\r\nconst NEXT_BUTTON_SELECTOR = \"[data-te-datepicker-next-button-ref]\";\r\nconst OK_BUTTON_SELECTOR = \"[data-te-datepicker-ok-button-ref]\";\r\nconst CANCEL_BUTTON_SELECTOR = \"[data-te-datepicker-cancel-button-ref]\";\r\nconst CLEAR_BUTTON_SELECTOR = \"[data-te-datepicker-clear-button-ref]\";\r\nconst VIEW_SELECTOR = \"[data-te-datepicker-view-ref]\";\r\nconst TOGGLE_BUTTON_SELECTOR = \"[data-te-datepicker-toggle-button-ref]\";\r\nconst DATE_TEXT_SELECTOR = \"[data-te-datepicker-date-text-ref]\";\r\nconst BACKDROP_SELECTOR = \"[data-te-dropdown-backdrop-ref]\";\r\n\r\nconst FADE_IN_CLASSES =\r\n  \"animate-[fade-in_0.3s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none\";\r\nconst FADE_OUT_CLASSES =\r\n  \"animate-[fade-out_0.3s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none\";\r\nconst FADE_IN_SHORT_CLASSES =\r\n  \"animate-[fade-in_0.15s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none\";\r\nconst FADE_OUT_SHORT_CLASSES =\r\n  \"animate-[fade-out_0.15s_both] px-[auto] motion-reduce:transition-none motion-reduce:animate-none\";\r\n\r\n// templates classes\r\nconst MODAL_CONTAINER_CLASSES =\r\n  \"flex flex-col fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[328px] h-[512px] bg-white rounded-[0.6rem] shadow-lg z-[1066] xs:max-md:landscape:w-[475px] xs:max-md:landscape:h-[360px] xs:max-md:landscape:flex-row dark:bg-zinc-700\";\r\nconst DATEPICKER_BACKDROP_CLASSES =\r\n  \"w-full h-full fixed top-0 right-0 left-0 bottom-0 bg-black/40 z-[1065]\";\r\nconst DATEPICKER_MAIN_CLASSES = \"relative h-full\";\r\nconst DATEPICKER_HEADER_CLASSES =\r\n  \"xs:max-md:landscape:h-full h-[120px] px-6 bg-primary flex flex-col rounded-t-lg dark:bg-zinc-800\";\r\nconst DATEPICKER_TITLE_CLASSES = \"h-8 flex flex-col justify-end\";\r\nconst DATEPICKER_TITLE_TEXT_CLASSES =\r\n  \"text-[10px] font-normal uppercase tracking-[1.7px] text-white\";\r\nconst DATEPICKER_DATE_CLASSES =\r\n  \"xs:max-md:landscape:mt-24 h-[72px] flex flex-col justify-end\";\r\nconst DATEPICKER_DATE_TEXT_CLASSES = \"text-[34px] font-normal text-white\";\r\nconst DATEPICKER_VIEW_CLASSES = \"outline-none px-3\";\r\nconst DATEPICKER_DATE_CONTROLS_CLASSES =\r\n  \"px-3 pt-2.5 pb-0 flex justify-between text-black/[64]\";\r\nconst DATEPICKER_VIEW_CHANGE_BUTTON_CLASSES = `flex items-center outline-none p-2.5 text-neutral-500 font-medium text-[0.9rem] rounded-xl shadow-none bg-transparent m-0 border-none hover:bg-neutral-200 focus:bg-neutral-200  dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10`;\r\nconst DATEPICKER_ARROW_CONTROLS_CLASSES = \"mt-2.5\";\r\nconst DATEPICKER_PREVIOUS_BUTTON_CLASSES =\r\n  \"p-0 w-10 h-10 leading-10 border-none outline-none m-0 text-gray-600 bg-transparent mr-6 hover:bg-neutral-200 hover:rounded-[50%] focus:bg-neutral-200 focus:rounded-[50%] dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:mx-auto\";\r\nconst DATEPICKER_NEXT_BUTTON_CLASSES =\r\n  \"p-0 w-10 h-10 leading-10 border-none outline-none m-0 text-gray-600 bg-transparent hover:bg-neutral-200 hover:rounded-[50%] focus:bg-neutral-200 focus:rounded-[50%] dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:rotate-180 [&>svg]:mx-auto\";\r\nconst DATEPICKER_FOOTER_CLASSES =\r\n  \"h-14 flex absolute w-full bottom-0 justify-end items-center px-3\";\r\nconst DATEPICKER_FOOTER_BTN_CLASSES =\r\n  \"outline-none bg-white text-primary border-none cursor-pointer py-0 px-2.5 uppercase text-[0.8rem] leading-10 font-medium h-10 tracking-[.1rem] rounded-[10px] mb-2.5 hover:bg-neutral-200 focus:bg-neutral-200 dark:bg-transparent dark:text-white dark:hover:bg-white/10 dark:focus:bg-white/10\";\r\nconst DATEPICKER_CLEAR_BTN_CLASSES = \"mr-auto\";\r\nconst DATEPICKER_DAY_HEADING_CLASSES =\r\n  \"w-10 h-10 text-center text-[12px] font-normal dark:text-white\";\r\nconst DATEPICKER_CELL_CLASSES =\r\n  \"text-center data-[te-datepicker-cell-disabled]:text-neutral-300 data-[te-datepicker-cell-disabled]:cursor-default data-[te-datepicker-cell-disabled]:pointer-events-none data-[te-datepicker-cell-disabled]:hover:cursor-default hover:cursor-pointer group\";\r\nconst DATEPICKER_CELL_SMALL_CLASSES =\r\n  \"w-10 h-10 xs:max-md:landscape:w-8 xs:max-md:landscape:h-8\";\r\nconst DATEPICKER_CELL_LARGE_CLASSES = \"w-[76px] h-[42px]\";\r\nconst DATEPICKER_CELL_CONTENT_CLASSES =\r\n  \"mx-auto group-[:not([data-te-datepicker-cell-disabled]):not([data-te-datepicker-cell-selected]):hover]:bg-neutral-300 group-[[data-te-datepicker-cell-selected]]:bg-primary group-[[data-te-datepicker-cell-selected]]:text-white group-[:not([data-te-datepicker-cell-selected])[data-te-datepicker-cell-focused]]:bg-neutral-100 group-[[data-te-datepicker-cell-focused]]:data-[te-datepicker-cell-selected]:bg-primary group-[[data-te-datepicker-cell-current]]:border-solid group-[[data-te-datepicker-cell-current]]:border-black group-[[data-te-datepicker-cell-current]]:border dark:group-[:not([data-te-datepicker-cell-disabled]):not([data-te-datepicker-cell-selected]):hover]:bg-white/10 dark:group-[[data-te-datepicker-cell-current]]:border-white dark:text-white dark:group-[:not([data-te-datepicker-cell-selected])[data-te-datepicker-cell-focused]]:bg-white/10 dark:group-[[data-te-datepicker-cell-disabled]]:text-neutral-500\";\r\nconst DATEPICKER_CELL_CONTENT_SMALL_CLASSES =\r\n  \"w-9 h-9 leading-9 rounded-[50%] text-[13px]\";\r\nconst DATEPICKER_CELL_CONTENT_LARGE_CLASSES =\r\n  \"w-[72px] h-10 leading-10 py-[1px] px-0.5 rounded-[999px]\";\r\nconst DATEPICKER_TABLE_CLASSES = \"mx-auto w-[304px]\";\r\nconst DATEPICKER_TOGGLE_BUTTON_CLASSES =\r\n  \"flex items-center justify-content-center [&>svg]:w-5 [&>svg]:h-5 absolute outline-none border-none bg-transparent right-0.5 top-1/2 -translate-x-1/2 -translate-y-1/2 hover:text-primary focus:text-primary dark:hover:text-primary-400 dark:focus:text-primary-400 dark:text-neutral-200\";\r\nconst DATEPICKER_VIEW_CHANGE_ICON_CLASSES =\r\n  \"inline-block pointer-events-none ml-[3px] [&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-neutral-500 dark:[&>svg]:fill-white\";\r\nconst DATEPICKER_DROPDOWN_CONTAINER_CLASSES =\r\n  \"w-[328px] h-[380px] bg-white rounded-lg shadow-[0px_2px_15px_-3px_rgba(0,0,0,.07),_0px_10px_20px_-2px_rgba(0,0,0,.04)] z-[1066] dark:bg-zinc-700\";\r\n\r\nconst Default = {\r\n  title: \"Select date\",\r\n  container: \"body\",\r\n  disablePast: false,\r\n  disableFuture: false,\r\n  monthsFull: [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ],\r\n  monthsShort: [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ],\r\n  weekdaysFull: [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ],\r\n  weekdaysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n  weekdaysNarrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\r\n  okBtnText: \"Ok\",\r\n  clearBtnText: \"Clear\",\r\n  cancelBtnText: \"Cancel\",\r\n\r\n  okBtnLabel: \"Confirm selection\",\r\n  clearBtnLabel: \"Clear selection\",\r\n  cancelBtnLabel: \"Cancel selection\",\r\n  nextMonthLabel: \"Next month\",\r\n  prevMonthLabel: \"Previous month\",\r\n  nextYearLabel: \"Next year\",\r\n  prevYearLabel: \"Previous year\",\r\n  changeMonthIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-6 h-6\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\r\n  </svg>\r\n  `,\r\n  nextMultiYearLabel: \"Next 24 years\",\r\n  prevMultiYearLabel: \"Previous 24 years\",\r\n  switchToMultiYearViewLabel: \"Choose year and month\",\r\n  switchToMonthViewLabel: \"Choose date\",\r\n  switchToDayViewLabel: \"Choose date\",\r\n\r\n  startDate: null,\r\n  startDay: 0,\r\n  format: \"dd/mm/yyyy\",\r\n  view: \"days\",\r\n  viewChangeIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"0\" stroke=\"currentColor\" class=\"w-6 h-6\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" />\r\n  </svg>\r\n  `,\r\n\r\n  min: null,\r\n  max: null,\r\n  filter: null,\r\n\r\n  inline: false,\r\n  toggleButton: true,\r\n  disableToggleButton: false,\r\n  disableInput: false,\r\n  animations: true,\r\n  confirmDateOnSelect: false,\r\n  removeOkBtn: false,\r\n  removeCancelBtn: false,\r\n  removeClearBtn: false,\r\n};\r\n\r\nconst DefaultType = {\r\n  title: \"string\",\r\n  container: \"string\",\r\n  disablePast: \"boolean\",\r\n  disableFuture: \"boolean\",\r\n  monthsFull: \"array\",\r\n  monthsShort: \"array\",\r\n  weekdaysFull: \"array\",\r\n  weekdaysShort: \"array\",\r\n  weekdaysNarrow: \"array\",\r\n\r\n  okBtnText: \"string\",\r\n  clearBtnText: \"string\",\r\n  cancelBtnText: \"string\",\r\n  okBtnLabel: \"string\",\r\n  clearBtnLabel: \"string\",\r\n  cancelBtnLabel: \"string\",\r\n  nextMonthLabel: \"string\",\r\n  prevMonthLabel: \"string\",\r\n  nextYearLabel: \"string\",\r\n  prevYearLabel: \"string\",\r\n  nextMultiYearLabel: \"string\",\r\n  prevMultiYearLabel: \"string\",\r\n  changeMonthIconTemplate: \"string\",\r\n  switchToMultiYearViewLabel: \"string\",\r\n  switchToMonthViewLabel: \"string\",\r\n  switchToDayViewLabel: \"string\",\r\n\r\n  startDate: \"(null|string|date)\",\r\n  startDay: \"number\",\r\n  format: \"string\",\r\n  view: \"string\",\r\n  viewChangeIconTemplate: \"string\",\r\n\r\n  min: \"(null|string|date)\",\r\n  max: \"(null|string|date)\",\r\n  filter: \"(null|function)\",\r\n\r\n  inline: \"boolean\",\r\n  toggleButton: \"boolean\",\r\n  disableToggleButton: \"boolean\",\r\n  disableInput: \"boolean\",\r\n  animations: \"boolean\",\r\n  confirmDateOnSelect: \"boolean\",\r\n  removeOkBtn: \"boolean\",\r\n  removeCancelBtn: \"boolean\",\r\n  removeClearBtn: \"boolean\",\r\n};\r\n\r\nconst DefaultClasses = {\r\n  fadeIn: FADE_IN_CLASSES,\r\n  fadeOut: FADE_OUT_CLASSES,\r\n  fadeInShort: FADE_IN_SHORT_CLASSES,\r\n  fadeOutShort: FADE_OUT_SHORT_CLASSES,\r\n  modalContainer: MODAL_CONTAINER_CLASSES,\r\n  datepickerBackdrop: DATEPICKER_BACKDROP_CLASSES,\r\n  datepickerMain: DATEPICKER_MAIN_CLASSES,\r\n  datepickerHeader: DATEPICKER_HEADER_CLASSES,\r\n  datepickerTitle: DATEPICKER_TITLE_CLASSES,\r\n  datepickerTitleText: DATEPICKER_TITLE_TEXT_CLASSES,\r\n  datepickerDate: DATEPICKER_DATE_CLASSES,\r\n  datepickerDateText: DATEPICKER_DATE_TEXT_CLASSES,\r\n  datepickerView: DATEPICKER_VIEW_CLASSES,\r\n  datepickerDateControls: DATEPICKER_DATE_CONTROLS_CLASSES,\r\n  datepickerViewChangeButton: DATEPICKER_VIEW_CHANGE_BUTTON_CLASSES,\r\n  datepickerViewChangeIcon: DATEPICKER_VIEW_CHANGE_ICON_CLASSES,\r\n  datepickerArrowControls: DATEPICKER_ARROW_CONTROLS_CLASSES,\r\n  datepickerPreviousButton: DATEPICKER_PREVIOUS_BUTTON_CLASSES,\r\n  datepickerNextButton: DATEPICKER_NEXT_BUTTON_CLASSES,\r\n  datepickerFooter: DATEPICKER_FOOTER_CLASSES,\r\n  datepickerFooterBtn: DATEPICKER_FOOTER_BTN_CLASSES,\r\n  datepickerClearBtn: DATEPICKER_CLEAR_BTN_CLASSES,\r\n  datepickerDayHeading: DATEPICKER_DAY_HEADING_CLASSES,\r\n  datepickerCell: DATEPICKER_CELL_CLASSES,\r\n  datepickerCellSmall: DATEPICKER_CELL_SMALL_CLASSES,\r\n  datepickerCellLarge: DATEPICKER_CELL_LARGE_CLASSES,\r\n  datepickerCellContent: DATEPICKER_CELL_CONTENT_CLASSES,\r\n  datepickerCellContentSmall: DATEPICKER_CELL_CONTENT_SMALL_CLASSES,\r\n  datepickerCellContentLarge: DATEPICKER_CELL_CONTENT_LARGE_CLASSES,\r\n  datepickerTable: DATEPICKER_TABLE_CLASSES,\r\n  datepickerToggleButton: DATEPICKER_TOGGLE_BUTTON_CLASSES,\r\n  datepickerDropdownContainer: DATEPICKER_DROPDOWN_CONTAINER_CLASSES,\r\n};\r\n\r\nconst DefaultClassesType = {\r\n  fadeIn: \"string\",\r\n  fadeOut: \"string\",\r\n  fadeInShort: \"string\",\r\n  fadeOutShort: \"string\",\r\n  modalContainer: \"string\",\r\n  datepickerBackdrop: \"string\",\r\n  datepickerMain: \"string\",\r\n  datepickerHeader: \"string\",\r\n  datepickerTitle: \"string\",\r\n  datepickerTitleText: \"string\",\r\n  datepickerDate: \"string\",\r\n  datepickerDateText: \"string\",\r\n  datepickerView: \"string\",\r\n  datepickerDateControls: \"string\",\r\n  datepickerViewChangeButton: \"string\",\r\n  datepickerArrowControls: \"string\",\r\n  datepickerPreviousButton: \"string\",\r\n  datepickerNextButton: \"string\",\r\n  datepickerFooter: \"string\",\r\n  datepickerFooterBtn: \"string\",\r\n  datepickerClearBtn: \"string\",\r\n  datepickerDayHeading: \"string\",\r\n  datepickerCell: \"string\",\r\n  datepickerCellSmall: \"string\",\r\n  datepickerCellLarge: \"string\",\r\n  datepickerCellContent: \"string\",\r\n  datepickerCellContentSmall: \"string\",\r\n  datepickerCellContentLarge: \"string\",\r\n  datepickerTable: \"string\",\r\n  datepickerToggleButton: \"string\",\r\n  datepickerDropdownContainer: \"string\",\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------------\r\nClass Definition\r\n------------------------------------------------------------------------\r\n*/\r\n\r\nclass Datepicker {\r\n  constructor(element, options, classes) {\r\n    this._element = element;\r\n    this._input = SelectorEngine.findOne(\"input\", this._element);\r\n    this._options = this._getConfig(options);\r\n    this._classes = this._getClasses(classes);\r\n    this._activeDate = new Date();\r\n    this._selectedDate = null;\r\n    this._selectedYear = null;\r\n    this._selectedMonth = null;\r\n    this._headerDate = null;\r\n    this._headerYear = null;\r\n    this._headerMonth = null;\r\n    this._view = this._options.view;\r\n    this._popper = null;\r\n    this._focusTrap = null;\r\n    this._isOpen = false;\r\n    this._toggleButtonId = getUID(\"datepicker-toggle-\");\r\n    this._animations =\r\n      !window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches &&\r\n      this._options.animations;\r\n\r\n    this._scrollBar = new ScrollBarHelper();\r\n\r\n    if (this._element) {\r\n      Data.setData(element, DATA_KEY, this);\r\n    }\r\n\r\n    this._init();\r\n\r\n    if (this.toggleButton && this._options.disableToggle) {\r\n      this.toggleButton.disabled = \"true\";\r\n    }\r\n\r\n    if (this._options.disableInput) {\r\n      this._input.disabled = \"true\";\r\n    }\r\n  }\r\n\r\n  // Getters\r\n\r\n  static get NAME() {\r\n    return NAME;\r\n  }\r\n\r\n  get container() {\r\n    return (\r\n      SelectorEngine.findOne(\r\n        `[${MODAL_CONTAINER_NAME}='${this._toggleButtonId}']`\r\n      ) ||\r\n      SelectorEngine.findOne(\r\n        `[${DROPDOWN_CONTAINER_NAME}='${this._toggleButtonId}']`\r\n      )\r\n    );\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  get activeCell() {\r\n    let activeCell;\r\n\r\n    if (this._view === \"days\") {\r\n      activeCell = this._getActiveDayCell();\r\n    }\r\n\r\n    if (this._view === \"months\") {\r\n      activeCell = this._getActiveMonthCell();\r\n    }\r\n\r\n    if (this._view === \"years\") {\r\n      activeCell = this._getActiveYearCell();\r\n    }\r\n\r\n    return activeCell;\r\n  }\r\n\r\n  get activeDay() {\r\n    return getDate(this._activeDate);\r\n  }\r\n\r\n  get activeMonth() {\r\n    return getMonth(this._activeDate);\r\n  }\r\n\r\n  get activeYear() {\r\n    return getYear(this._activeDate);\r\n  }\r\n\r\n  get firstYearInView() {\r\n    return this.activeYear - getYearsOffset(this._activeDate, YEARS_IN_VIEW);\r\n  }\r\n\r\n  get lastYearInView() {\r\n    return this.firstYearInView + YEARS_IN_VIEW - 1;\r\n  }\r\n\r\n  get viewChangeButton() {\r\n    return SelectorEngine.findOne(VIEW_CHANGE_BUTTON_SELECTOR, this.container);\r\n  }\r\n\r\n  get previousButton() {\r\n    return SelectorEngine.findOne(PREVIOUS_BUTTON_SELECTOR, this.container);\r\n  }\r\n\r\n  get nextButton() {\r\n    return SelectorEngine.findOne(NEXT_BUTTON_SELECTOR, this.container);\r\n  }\r\n\r\n  get okButton() {\r\n    return SelectorEngine.findOne(OK_BUTTON_SELECTOR, this.container);\r\n  }\r\n\r\n  get cancelButton() {\r\n    return SelectorEngine.findOne(CANCEL_BUTTON_SELECTOR, this.container);\r\n  }\r\n\r\n  get clearButton() {\r\n    return SelectorEngine.findOne(CLEAR_BUTTON_SELECTOR, this.container);\r\n  }\r\n\r\n  get datesContainer() {\r\n    return SelectorEngine.findOne(VIEW_SELECTOR, this.container);\r\n  }\r\n\r\n  get toggleButton() {\r\n    return SelectorEngine.findOne(TOGGLE_BUTTON_SELECTOR, this._element);\r\n  }\r\n\r\n  update(options = {}) {\r\n    this._options = this._getConfig({ ...this._options, ...options });\r\n  }\r\n\r\n  _getConfig(config) {\r\n    const dataAttributes = Manipulator.getDataAttributes(this._element);\r\n\r\n    config = {\r\n      ...Default,\r\n      ...dataAttributes,\r\n      ...config,\r\n    };\r\n\r\n    typeCheckConfig(NAME, config, DefaultType);\r\n\r\n    if (config.max && typeof config.max === \"string\") {\r\n      config.max = new Date(config.max);\r\n    }\r\n\r\n    if (config.min && typeof config.min === \"string\") {\r\n      config.min = new Date(config.min);\r\n    }\r\n\r\n    if (config.startDay && config.startDay !== 0) {\r\n      const sortedWeekdaysNarrow = this._getNewDaysOrderArray(config);\r\n      config.weekdaysNarrow = sortedWeekdaysNarrow;\r\n    }\r\n\r\n    return config;\r\n  }\r\n\r\n  _getClasses(classes) {\r\n    const dataAttributes = Manipulator.getDataClassAttributes(this._element);\r\n\r\n    classes = {\r\n      ...DefaultClasses,\r\n      ...dataAttributes,\r\n      ...classes,\r\n    };\r\n\r\n    typeCheckConfig(NAME, classes, DefaultClassesType);\r\n\r\n    return classes;\r\n  }\r\n\r\n  _getContainer() {\r\n    return SelectorEngine.findOne(this._options.container);\r\n  }\r\n\r\n  _getNewDaysOrderArray(config) {\r\n    const index = config.startDay;\r\n\r\n    const weekdaysNarrow = config.weekdaysNarrow;\r\n    const sortedWeekdays = weekdaysNarrow\r\n      .slice(index)\r\n      .concat(weekdaysNarrow.slice(0, index));\r\n\r\n    return sortedWeekdays;\r\n  }\r\n\r\n  _init() {\r\n    if (!this.toggleButton && this._options.toggleButton) {\r\n      this._appendToggleButton();\r\n      if (this._input.readOnly || this._input.disabled) {\r\n        this.toggleButton.style.pointerEvents = \"none\";\r\n      }\r\n    }\r\n\r\n    this._listenToUserInput();\r\n    this._listenToToggleClick();\r\n    this._listenToToggleKeydown();\r\n  }\r\n\r\n  _appendToggleButton() {\r\n    const toggleButton = getToggleButtonTemplate(\r\n      this._toggleButtonId,\r\n      this._classes.datepickerToggleButton\r\n    );\r\n    this._element.insertAdjacentHTML(\"beforeend\", toggleButton);\r\n  }\r\n\r\n  open() {\r\n    if (this._input.readOnly || this._input.disabled) {\r\n      return;\r\n    }\r\n    const openEvent = EventHandler.trigger(this._element, EVENT_OPEN);\r\n\r\n    if (this._isOpen || openEvent.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this._setInitialDate();\r\n\r\n    const backdrop = getBackdropTemplate(this._classes.datepickerBackdrop);\r\n    const template = getDatepickerTemplate(\r\n      this._activeDate,\r\n      this._selectedDate,\r\n      this._selectedYear,\r\n      this._selectedMonth,\r\n      this._options,\r\n      MONTHS_IN_ROW,\r\n      YEARS_IN_VIEW,\r\n      YEARS_IN_ROW,\r\n      this._toggleButtonId,\r\n      this._classes\r\n    );\r\n\r\n    if (this._options.inline) {\r\n      this._openDropdown(template);\r\n    } else {\r\n      this._openModal(backdrop, template);\r\n      this._scrollBar.hide();\r\n    }\r\n\r\n    if (this._animations) {\r\n      Manipulator.addClass(this.container, this._classes.fadeIn);\r\n      Manipulator.addClass(backdrop, this._classes.fadeInShort);\r\n    }\r\n\r\n    this._setFocusTrap(this.container);\r\n\r\n    this._listenToDateSelection();\r\n    this._addControlsListeners();\r\n    this._updateControlsDisabledState();\r\n    this._listenToEscapeClick();\r\n    this._listenToKeyboardNavigation();\r\n    this._listenToDatesContainerFocus();\r\n    this._listenToDatesContainerBlur();\r\n\r\n    // We need to wait for popper initialization to avoid bug with\r\n    // focusing dates container, otherwise dates container will be\r\n    // focused before popper position update which can change the\r\n    // scroll position on the page\r\n    this._asyncFocusDatesContainer();\r\n    this._updateViewControlsAndAttributes(this._view);\r\n    this._isOpen = true;\r\n\r\n    // Wait for the component to open to prevent immediate calling of the\r\n    // close method upon detecting a click on toggle element (input/button)\r\n    setTimeout(() => {\r\n      this._listenToOutsideClick();\r\n    }, 0);\r\n  }\r\n\r\n  _openDropdown(template) {\r\n    this._popper = createPopper(this._input, template, {\r\n      placement: \"bottom-start\",\r\n    });\r\n    const container = this._getContainer();\r\n    container.appendChild(template);\r\n  }\r\n\r\n  _openModal(backdrop, template) {\r\n    const container = this._getContainer();\r\n    container.appendChild(backdrop);\r\n    container.appendChild(template);\r\n  }\r\n\r\n  _setFocusTrap(element) {\r\n    this._focusTrap = new FocusTrap(element, {\r\n      event: \"keydown\",\r\n      condition: (event) => event.key === \"Tab\",\r\n    });\r\n    this._focusTrap.trap();\r\n  }\r\n\r\n  _listenToUserInput() {\r\n    EventHandler.on(this._input, \"input\", (event) => {\r\n      this._handleUserInput(event.target.value);\r\n    });\r\n  }\r\n\r\n  _listenToToggleClick() {\r\n    EventHandler.on(\r\n      this._element,\r\n      EVENT_CLICK_DATA_API,\r\n      DATEPICKER_TOGGLE_SELECTOR,\r\n      (event) => {\r\n        event.preventDefault();\r\n        this.open();\r\n      }\r\n    );\r\n  }\r\n\r\n  _listenToToggleKeydown() {\r\n    EventHandler.on(\r\n      this._element,\r\n      \"keydown\",\r\n      DATEPICKER_TOGGLE_SELECTOR,\r\n      (event) => {\r\n        if (event.keyCode === ENTER && !this._isOpen) {\r\n          this.open();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  _listenToDateSelection() {\r\n    EventHandler.on(this.datesContainer, \"click\", (e) => {\r\n      this._handleDateSelection(e);\r\n    });\r\n  }\r\n\r\n  _handleDateSelection(e) {\r\n    const dataset =\r\n      e.target.nodeName === \"DIV\"\r\n        ? e.target.parentNode.dataset\r\n        : e.target.dataset;\r\n    const cell = e.target.nodeName === \"DIV\" ? e.target.parentNode : e.target;\r\n\r\n    if (dataset.teDate) {\r\n      this._pickDay(dataset.teDate, cell);\r\n    }\r\n\r\n    if (dataset.teMonth && dataset.teYear) {\r\n      const month = parseInt(dataset.teMonth, 10);\r\n      const year = parseInt(dataset.teYear, 10);\r\n      this._pickMonth(month, year);\r\n    }\r\n\r\n    if (dataset.teYear && !dataset.teMonth) {\r\n      const year = parseInt(dataset.teYear, 10);\r\n      this._pickYear(year);\r\n    }\r\n\r\n    if (!this._options.inline) {\r\n      this._updateHeaderDate(\r\n        this._activeDate,\r\n        this._options.monthsShort,\r\n        this._options.weekdaysShort\r\n      );\r\n    }\r\n  }\r\n\r\n  _updateHeaderDate(date, monthNames, dayNames) {\r\n    const headerDateEl = SelectorEngine.findOne(\r\n      DATE_TEXT_SELECTOR,\r\n      this.container\r\n    );\r\n    const month = getMonth(date);\r\n    const day = getDate(date);\r\n    const dayNumber = getDayNumber(date);\r\n    headerDateEl.innerHTML = `${dayNames[dayNumber]}, ${monthNames[month]} ${day}`;\r\n  }\r\n\r\n  _addControlsListeners() {\r\n    EventHandler.on(this.nextButton, \"click\", () => {\r\n      if (this._view === \"days\") {\r\n        this.nextMonth();\r\n      } else if (this._view === \"years\") {\r\n        this.nextYears();\r\n      } else {\r\n        this.nextYear();\r\n      }\r\n      this._updateControlsDisabledState();\r\n    });\r\n\r\n    EventHandler.on(this.previousButton, \"click\", () => {\r\n      if (this._view === \"days\") {\r\n        this.previousMonth();\r\n      } else if (this._view === \"years\") {\r\n        this.previousYears();\r\n      } else {\r\n        this.previousYear();\r\n      }\r\n      this._updateControlsDisabledState();\r\n    });\r\n\r\n    EventHandler.on(this.viewChangeButton, \"click\", () => {\r\n      if (this._view === \"days\") {\r\n        this._changeView(\"years\");\r\n      } else if (this._view === \"years\" || this._view === \"months\") {\r\n        this._changeView(\"days\");\r\n      }\r\n    });\r\n\r\n    if (!this._options.inline) {\r\n      this._listenToFooterButtonsClick();\r\n    }\r\n  }\r\n\r\n  _listenToFooterButtonsClick() {\r\n    EventHandler.on(this.okButton, \"click\", () => this.handleOk());\r\n    EventHandler.on(this.cancelButton, \"click\", () => this.handleCancel());\r\n    EventHandler.on(this.clearButton, \"click\", () => this.handleClear());\r\n  }\r\n\r\n  _listenToOutsideClick() {\r\n    EventHandler.on(document, EVENT_CLICK_DATA_API, (e) => {\r\n      const isContainer = e.target === this.container;\r\n      const isContainerContent =\r\n        this.container && this.container.contains(e.target);\r\n\r\n      if (!isContainer && !isContainerContent) {\r\n        this.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  _listenToEscapeClick() {\r\n    EventHandler.on(document, \"keydown\", (event) => {\r\n      if (event.keyCode === ESCAPE && this._isOpen) {\r\n        this.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  _listenToKeyboardNavigation() {\r\n    EventHandler.on(this.datesContainer, \"keydown\", (event) => {\r\n      this._handleKeydown(event);\r\n    });\r\n  }\r\n\r\n  _listenToDatesContainerFocus() {\r\n    EventHandler.on(this.datesContainer, \"focus\", () => {\r\n      this._focusActiveCell(this.activeCell);\r\n    });\r\n  }\r\n\r\n  _listenToDatesContainerBlur() {\r\n    EventHandler.on(this.datesContainer, \"blur\", () => {\r\n      this._removeCurrentFocusStyles();\r\n    });\r\n  }\r\n\r\n  _handleKeydown(event) {\r\n    if (this._view === \"days\") {\r\n      this._handleDaysViewKeydown(event);\r\n    }\r\n\r\n    if (this._view === \"months\") {\r\n      this._handleMonthsViewKeydown(event);\r\n    }\r\n\r\n    if (this._view === \"years\") {\r\n      this._handleYearsViewKeydown(event);\r\n    }\r\n  }\r\n\r\n  _handleDaysViewKeydown(event) {\r\n    const oldActiveDate = this._activeDate;\r\n    const previousActiveCell = this.activeCell;\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = addDays(this._activeDate, isRTL() ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = addDays(this._activeDate, isRTL() ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = addDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = addDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = addDays(\r\n          this._activeDate,\r\n          1 - getDate(this._activeDate)\r\n        );\r\n        break;\r\n      case END:\r\n        this._activeDate = addDays(\r\n          this._activeDate,\r\n          getDaysInMonth(this._activeDate) - getDate(this._activeDate)\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = addMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = addMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._selectDate(this._activeDate);\r\n        this._handleDateSelection(event);\r\n        event.preventDefault();\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    if (\r\n      !areDatesInSameView(\r\n        oldActiveDate,\r\n        this._activeDate,\r\n        this._view,\r\n        YEARS_IN_VIEW,\r\n        this._options.min,\r\n        this._options.max\r\n      )\r\n    ) {\r\n      this._changeView(\"days\");\r\n    }\r\n\r\n    this._removeHighlightFromCell(previousActiveCell);\r\n    this._focusActiveCell(this.activeCell);\r\n    event.preventDefault();\r\n  }\r\n\r\n  _asyncFocusDatesContainer() {\r\n    setTimeout(() => {\r\n      this.datesContainer.focus();\r\n    }, 0);\r\n  }\r\n\r\n  _focusActiveCell(cell) {\r\n    if (cell) {\r\n      cell.setAttribute(\"data-te-datepicker-cell-focused\", \"\");\r\n    }\r\n  }\r\n\r\n  _removeHighlightFromCell(cell) {\r\n    if (cell) {\r\n      cell.removeAttribute(\"data-te-datepicker-cell-focused\");\r\n    }\r\n  }\r\n\r\n  _getActiveDayCell() {\r\n    const cells = SelectorEngine.find(\"td\", this.datesContainer);\r\n\r\n    const activeCell = Array.from(cells).find((cell) => {\r\n      const cellDate = convertStringToDate(cell.dataset.teDate);\r\n      return isSameDate(cellDate, this._activeDate);\r\n    });\r\n\r\n    return activeCell;\r\n  }\r\n\r\n  _handleMonthsViewKeydown(event) {\r\n    const oldActiveDate = this._activeDate;\r\n    const previousActiveCell = this.activeCell;\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = addMonths(this._activeDate, isRTL() ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = addMonths(this._activeDate, isRTL() ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = addMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = addMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = addMonths(this._activeDate, -this.activeMonth);\r\n        break;\r\n      case END:\r\n        this._activeDate = addMonths(this._activeDate, 11 - this.activeMonth);\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = addYears(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = addYears(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._selectMonth(this.activeMonth);\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    if (\r\n      !areDatesInSameView(\r\n        oldActiveDate,\r\n        this._activeDate,\r\n        this._view,\r\n        YEARS_IN_VIEW,\r\n        this._options.min,\r\n        this._options.max\r\n      )\r\n    ) {\r\n      this._changeView(\"months\");\r\n    }\r\n\r\n    this._removeHighlightFromCell(previousActiveCell);\r\n    this._focusActiveCell(this.activeCell);\r\n    event.preventDefault();\r\n  }\r\n\r\n  _getActiveMonthCell() {\r\n    const cells = SelectorEngine.find(\"td\", this.datesContainer);\r\n\r\n    const activeCell = Array.from(cells).find((cell) => {\r\n      const cellYear = parseInt(cell.dataset.teYear, 10);\r\n      const cellMonth = parseInt(cell.dataset.teMonth, 10);\r\n      return cellYear === this.activeYear && cellMonth === this.activeMonth;\r\n    });\r\n\r\n    return activeCell;\r\n  }\r\n\r\n  _handleYearsViewKeydown(event) {\r\n    const oldActiveDate = this._activeDate;\r\n    const previousActiveCell = this.activeCell;\r\n    const yearsPerRow = 4;\r\n    const yearsPerPage = 24;\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this._activeDate = addYears(this._activeDate, isRTL() ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this._activeDate = addYears(this._activeDate, isRTL() ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this._activeDate = addYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this._activeDate = addYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this._activeDate = addYears(\r\n          this._activeDate,\r\n          -getYearsOffset(this._activeDate, yearsPerPage)\r\n        );\r\n        break;\r\n      case END:\r\n        this._activeDate = addYears(\r\n          this._activeDate,\r\n          yearsPerPage - getYearsOffset(this._activeDate, yearsPerPage) - 1\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this._activeDate = addYears(this._activeDate, -yearsPerPage);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this._activeDate = addYears(this._activeDate, yearsPerPage);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._selectYear(this.activeYear);\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    if (\r\n      !areDatesInSameView(\r\n        oldActiveDate,\r\n        this._activeDate,\r\n        this._view,\r\n        YEARS_IN_VIEW,\r\n        this._options.min,\r\n        this._options.max\r\n      )\r\n    ) {\r\n      this._changeView(\"years\");\r\n    }\r\n\r\n    this._removeHighlightFromCell(previousActiveCell);\r\n    this._focusActiveCell(this.activeCell);\r\n    event.preventDefault();\r\n  }\r\n\r\n  _getActiveYearCell() {\r\n    const cells = SelectorEngine.find(\"td\", this.datesContainer);\r\n\r\n    const activeCell = Array.from(cells).find((cell) => {\r\n      const cellYear = parseInt(cell.dataset.teYear, 10);\r\n      return cellYear === this.activeYear;\r\n    });\r\n\r\n    return activeCell;\r\n  }\r\n\r\n  _setInitialDate() {\r\n    if (this._input.value) {\r\n      this._handleUserInput(this._input.value);\r\n    } else if (this._options.startDate) {\r\n      this._activeDate = new Date(this._options.startDate);\r\n    } else {\r\n      this._activeDate = new Date();\r\n    }\r\n  }\r\n\r\n  close() {\r\n    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\r\n\r\n    if (!this._isOpen || closeEvent.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this._removeDatepickerListeners();\r\n\r\n    if (this._animations) {\r\n      Manipulator.addClass(this.container, this._classes.fadeOut);\r\n    }\r\n\r\n    if (this._options.inline) {\r\n      this._closeDropdown();\r\n    } else {\r\n      this._closeModal();\r\n    }\r\n\r\n    this._isOpen = false;\r\n    this._view = this._options.view;\r\n\r\n    if (this.toggleButton) {\r\n      this.toggleButton.focus();\r\n    } else {\r\n      this._input.focus();\r\n    }\r\n  }\r\n\r\n  _closeDropdown() {\r\n    const datepicker = SelectorEngine.findOne(DROPDOWN_CONTAINER_SELECTOR);\r\n    const container = this._getContainer();\r\n    if (window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches) {\r\n      if (datepicker) {\r\n        container.removeChild(datepicker);\r\n      }\r\n\r\n      if (this._popper) {\r\n        this._popper.destroy();\r\n      }\r\n    }\r\n    datepicker.addEventListener(\"animationend\", () => {\r\n      if (datepicker) {\r\n        container.removeChild(datepicker);\r\n      }\r\n\r\n      if (this._popper) {\r\n        this._popper.destroy();\r\n      }\r\n    });\r\n    this._removeFocusTrap();\r\n  }\r\n\r\n  _closeModal() {\r\n    const backdrop = SelectorEngine.findOne(BACKDROP_SELECTOR);\r\n    const datepicker = SelectorEngine.findOne(MODAL_CONTAINER_SELECTOR);\r\n\r\n    if (!datepicker || !backdrop) {\r\n      return;\r\n    }\r\n\r\n    if (this._animations) {\r\n      Manipulator.addClass(backdrop, this._classes.fadeOutShort);\r\n\r\n      backdrop.addEventListener(\"animationend\", () => {\r\n        this._removePicker(backdrop, datepicker);\r\n        this._scrollBar.reset();\r\n      });\r\n    } else {\r\n      this._removePicker(backdrop, datepicker);\r\n      this._scrollBar.reset();\r\n    }\r\n  }\r\n\r\n  _removePicker(backdrop, datepicker) {\r\n    const container = this._getContainer();\r\n\r\n    container.removeChild(backdrop);\r\n    container.removeChild(datepicker);\r\n  }\r\n\r\n  _removeFocusTrap() {\r\n    if (this._focusTrap) {\r\n      this._focusTrap.disable();\r\n      this._focusTrap = null;\r\n    }\r\n  }\r\n\r\n  _removeDatepickerListeners() {\r\n    EventHandler.off(this.nextButton, \"click\");\r\n    EventHandler.off(this.previousButton, \"click\");\r\n    EventHandler.off(this.viewChangeButton, \"click\");\r\n    EventHandler.off(this.okButton, \"click\");\r\n    EventHandler.off(this.cancelButton, \"click\");\r\n    EventHandler.off(this.clearButton, \"click\");\r\n\r\n    EventHandler.off(this.datesContainer, \"click\");\r\n    EventHandler.off(this.datesContainer, \"keydown\");\r\n    EventHandler.off(this.datesContainer, \"focus\");\r\n    EventHandler.off(this.datesContainer, \"blur\");\r\n\r\n    EventHandler.off(document, EVENT_CLICK_DATA_API);\r\n  }\r\n\r\n  dispose() {\r\n    if (this._isOpen) {\r\n      this.close();\r\n    }\r\n\r\n    this._removeInputAndToggleListeners();\r\n\r\n    const generatedToggleButton = SelectorEngine.findOne(\r\n      `#${this._toggleButtonId}`\r\n    );\r\n\r\n    if (generatedToggleButton) {\r\n      this._element.removeChild(generatedToggleButton);\r\n    }\r\n\r\n    Data.removeData(this._element, DATA_KEY);\r\n\r\n    this._element = null;\r\n    this._input = null;\r\n    this._options = null;\r\n    this._activeDate = null;\r\n    this._selectedDate = null;\r\n    this._selectedYear = null;\r\n    this._selectedMonth = null;\r\n    this._headerDate = null;\r\n    this._headerYear = null;\r\n    this._headerMonth = null;\r\n    this._view = null;\r\n    this._popper = null;\r\n    this._focusTrap = null;\r\n  }\r\n\r\n  _removeInputAndToggleListeners() {\r\n    EventHandler.off(this._input, \"input\");\r\n    EventHandler.off(\r\n      this._element,\r\n      EVENT_CLICK_DATA_API,\r\n      DATEPICKER_TOGGLE_SELECTOR\r\n    );\r\n    EventHandler.off(this._element, \"keydown\", DATEPICKER_TOGGLE_SELECTOR);\r\n  }\r\n\r\n  handleOk() {\r\n    this._confirmSelection(this._headerDate);\r\n    this.close();\r\n  }\r\n\r\n  _selectDate(date, cell = this.activeCell) {\r\n    const { min, max, filter, disablePast, disableFuture } = this._options;\r\n\r\n    if (isDateDisabled(date, min, max, filter, disablePast, disableFuture)) {\r\n      return;\r\n    }\r\n\r\n    this._removeCurrentSelectionStyles();\r\n    this._removeCurrentFocusStyles();\r\n    this._addSelectedStyles(cell);\r\n    this._selectedDate = date;\r\n    this._selectedYear = getYear(date);\r\n    this._selectedMonth = getMonth(date);\r\n    this._headerDate = date;\r\n\r\n    if (this._options.inline || this.options.confirmDateOnSelect) {\r\n      this._confirmSelection(date);\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  _selectYear(year, cell = this.activeCell) {\r\n    this._removeCurrentSelectionStyles();\r\n    this._removeCurrentFocusStyles();\r\n    this._addSelectedStyles(cell);\r\n    this._headerYear = year;\r\n\r\n    this._asyncChangeView(\"months\");\r\n  }\r\n\r\n  _selectMonth(month, cell = this.activeCell) {\r\n    this._removeCurrentSelectionStyles();\r\n    this._removeCurrentFocusStyles();\r\n    this._addSelectedStyles(cell);\r\n    this._headerMonth = month;\r\n\r\n    this._asyncChangeView(\"days\");\r\n  }\r\n\r\n  _removeSelectedStyles(cell) {\r\n    if (cell) {\r\n      cell.removeAttribute(\"data-te-datepicker-cell-selected\");\r\n    }\r\n  }\r\n\r\n  _addSelectedStyles(cell) {\r\n    if (cell) {\r\n      cell.setAttribute(\"data-te-datepicker-cell-selected\", \"\");\r\n    }\r\n  }\r\n\r\n  _confirmSelection(date) {\r\n    if (date) {\r\n      const dateString = this.formatDate(date);\r\n      this._input.value = dateString;\r\n      EventHandler.trigger(this._element, EVENT_DATE_CHANGE, { date });\r\n      EventHandler.trigger(this._input, \"input\");\r\n    }\r\n  }\r\n\r\n  handleCancel() {\r\n    this._selectedDate = null;\r\n    this._selectedYear = null;\r\n    this._selectedMonth = null;\r\n    this.close();\r\n  }\r\n\r\n  handleClear() {\r\n    this._selectedDate = null;\r\n    this._selectedMonth = null;\r\n    this._selectedYear = null;\r\n    this._headerDate = null;\r\n    this._headerMonth = null;\r\n    this._headerYear = null;\r\n    this._removeCurrentSelectionStyles();\r\n    this._input.value = \"\";\r\n    this._setInitialDate();\r\n    this._changeView(\"days\");\r\n    this._updateHeaderDate(\r\n      this._activeDate,\r\n      this._options.monthsShort,\r\n      this._options.weekdaysShort\r\n    );\r\n  }\r\n\r\n  _removeCurrentSelectionStyles() {\r\n    const currentSelected = SelectorEngine.findOne(\r\n      \"[data-te-datepicker-cell-selected]\",\r\n      this.container\r\n    );\r\n\r\n    if (currentSelected) {\r\n      currentSelected.removeAttribute(\"data-te-datepicker-cell-selected\");\r\n    }\r\n  }\r\n\r\n  _removeCurrentFocusStyles() {\r\n    const currentFocused = SelectorEngine.findOne(\r\n      \"[data-te-datepicker-cell-focused]\",\r\n      this.container\r\n    );\r\n\r\n    if (currentFocused) {\r\n      currentFocused.removeAttribute(\"data-te-datepicker-cell-focused\");\r\n    }\r\n  }\r\n\r\n  formatDate(date) {\r\n    const d = getDate(date);\r\n    const dd = this._addLeadingZero(getDate(date));\r\n    const ddd = this._options.weekdaysShort[getDayNumber(date)];\r\n    const dddd = this._options.weekdaysFull[getDayNumber(date)];\r\n    const m = getMonth(date) + 1;\r\n    const mm = this._addLeadingZero(getMonth(date) + 1);\r\n    const mmm = this._options.monthsShort[getMonth(date)];\r\n    const mmmm = this._options.monthsFull[getMonth(date)];\r\n    const yy =\r\n      getYear(date).toString().length === 2\r\n        ? getYear(date)\r\n        : getYear(date).toString().slice(2, 4);\r\n    const yyyy = getYear(date);\r\n\r\n    const preformatted = this._options.format.split(\r\n      /(d{1,4}|m{1,4}|y{4}|yy|!.)/g\r\n    );\r\n    let formatted = \"\";\r\n    preformatted.forEach((datePart) => {\r\n      switch (datePart) {\r\n        case \"dddd\":\r\n          datePart = datePart.replace(datePart, dddd);\r\n          break;\r\n        case \"ddd\":\r\n          datePart = datePart.replace(datePart, ddd);\r\n          break;\r\n        case \"dd\":\r\n          datePart = datePart.replace(datePart, dd);\r\n          break;\r\n        case \"d\":\r\n          datePart = datePart.replace(datePart, d);\r\n          break;\r\n        case \"mmmm\":\r\n          datePart = datePart.replace(datePart, mmmm);\r\n          break;\r\n        case \"mmm\":\r\n          datePart = datePart.replace(datePart, mmm);\r\n          break;\r\n        case \"mm\":\r\n          datePart = datePart.replace(datePart, mm);\r\n          break;\r\n        case \"m\":\r\n          datePart = datePart.replace(datePart, m);\r\n          break;\r\n        case \"yyyy\":\r\n          datePart = datePart.replace(datePart, yyyy);\r\n          break;\r\n        case \"yy\":\r\n          datePart = datePart.replace(datePart, yy);\r\n          break;\r\n        default:\r\n      }\r\n      formatted += datePart;\r\n    });\r\n\r\n    return formatted;\r\n  }\r\n\r\n  _addLeadingZero(value) {\r\n    return parseInt(value, 10) < 10 ? `0${value}` : value;\r\n  }\r\n\r\n  _pickDay(day, el) {\r\n    const date = convertStringToDate(day);\r\n    const { min, max, filter, disablePast, disableFuture } = this._options;\r\n\r\n    if (isDateDisabled(date, min, max, filter, disablePast, disableFuture)) {\r\n      return;\r\n    }\r\n\r\n    this._activeDate = date;\r\n    this._selectDate(date, el);\r\n  }\r\n\r\n  _pickYear(year) {\r\n    const { min, max, disablePast, disableFuture } = this._options;\r\n\r\n    if (isYearDisabled(year, min, max, disablePast, disableFuture)) {\r\n      return;\r\n    }\r\n\r\n    const newDate = createDate(year, this.activeMonth, this.activeDay);\r\n\r\n    this._activeDate = newDate;\r\n    this._selectedDate = newDate;\r\n    this._selectYear(year);\r\n  }\r\n\r\n  _pickMonth(month, year) {\r\n    const { min, max, disablePast, disableFuture } = this._options;\r\n\r\n    if (\r\n      isMonthDisabled(month, year, min, max, disablePast, disableFuture) ||\r\n      isYearDisabled(year, min, max, disablePast, disableFuture)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const newDate = createDate(year, month, this.activeDay);\r\n\r\n    this._activeDate = newDate;\r\n    this._selectMonth(month);\r\n  }\r\n\r\n  nextMonth() {\r\n    const nextMonth = addMonths(this._activeDate, 1);\r\n    const template = createDayViewTemplate(\r\n      nextMonth,\r\n      this._headerDate,\r\n      this._options,\r\n      this._classes\r\n    );\r\n    this._activeDate = nextMonth;\r\n    this.viewChangeButton.textContent = `${\r\n      this._options.monthsFull[this.activeMonth]\r\n    } ${this.activeYear}`;\r\n    this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n      this._options,\r\n      this._classes\r\n    );\r\n    this.datesContainer.innerHTML = template;\r\n  }\r\n\r\n  previousMonth() {\r\n    const previousMonth = addMonths(this._activeDate, -1);\r\n    this._activeDate = previousMonth;\r\n    const template = createDayViewTemplate(\r\n      previousMonth,\r\n      this._headerDate,\r\n      this._options,\r\n      this._classes\r\n    );\r\n    this.viewChangeButton.textContent = `${\r\n      this._options.monthsFull[this.activeMonth]\r\n    } ${this.activeYear}`;\r\n    this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n      this._options,\r\n      this._classes\r\n    );\r\n    this.datesContainer.innerHTML = template;\r\n  }\r\n\r\n  nextYear() {\r\n    const nextYear = addYears(this._activeDate, 1);\r\n    this._activeDate = nextYear;\r\n    this.viewChangeButton.textContent = `${this.activeYear}`;\r\n    this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n      this._options,\r\n      this._classes\r\n    );\r\n    const template = createMonthViewTemplate(\r\n      this.activeYear,\r\n      this._selectedYear,\r\n      this._selectedMonth,\r\n      this._options,\r\n      MONTHS_IN_ROW,\r\n      this._classes\r\n    );\r\n    this.datesContainer.innerHTML = template;\r\n  }\r\n\r\n  previousYear() {\r\n    const previousYear = addYears(this._activeDate, -1);\r\n    this._activeDate = previousYear;\r\n    this.viewChangeButton.textContent = `${this.activeYear}`;\r\n    this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n      this._options,\r\n      this._classes\r\n    );\r\n    const template = createMonthViewTemplate(\r\n      this.activeYear,\r\n      this._selectedYear,\r\n      this._selectedMonth,\r\n      this._options,\r\n      MONTHS_IN_ROW,\r\n      this._classes\r\n    );\r\n    this.datesContainer.innerHTML = template;\r\n  }\r\n\r\n  nextYears() {\r\n    const nextYear = addYears(this._activeDate, 24);\r\n    this._activeDate = nextYear;\r\n    const template = createYearViewTemplate(\r\n      nextYear,\r\n      this._selectedYear,\r\n      this._options,\r\n      YEARS_IN_VIEW,\r\n      YEARS_IN_ROW,\r\n      this._classes\r\n    );\r\n    this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`;\r\n    this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n      this._options,\r\n      this._classes\r\n    );\r\n    this.datesContainer.innerHTML = template;\r\n  }\r\n\r\n  previousYears() {\r\n    const previousYear = addYears(this._activeDate, -24);\r\n    this._activeDate = previousYear;\r\n    const template = createYearViewTemplate(\r\n      previousYear,\r\n      this._selectedYear,\r\n      this._options,\r\n      YEARS_IN_VIEW,\r\n      YEARS_IN_ROW,\r\n      this._classes\r\n    );\r\n    this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`;\r\n    this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n      this._options,\r\n      this._classes\r\n    );\r\n    this.datesContainer.innerHTML = template;\r\n  }\r\n\r\n  _asyncChangeView(view) {\r\n    setTimeout(() => {\r\n      this._changeView(view);\r\n    }, 0);\r\n  }\r\n\r\n  _changeView(view) {\r\n    this._view = view;\r\n    // We need to add blur event here to reapply focus to\r\n    // dates container when switching from years to months\r\n    // view after selecting year\r\n    this.datesContainer.blur();\r\n\r\n    if (view === \"days\") {\r\n      this.datesContainer.innerHTML = createDayViewTemplate(\r\n        this._activeDate,\r\n        this._headerDate,\r\n        this._options,\r\n        this._classes\r\n      );\r\n    }\r\n\r\n    if (view === \"months\") {\r\n      this.datesContainer.innerHTML = createMonthViewTemplate(\r\n        this.activeYear,\r\n        this._selectedYear,\r\n        this._selectedMonth,\r\n        this._options,\r\n        MONTHS_IN_ROW,\r\n        this._classes\r\n      );\r\n    }\r\n\r\n    if (view === \"years\") {\r\n      this.datesContainer.innerHTML = createYearViewTemplate(\r\n        this._activeDate,\r\n        this._selectedYear,\r\n        this._options,\r\n        YEARS_IN_VIEW,\r\n        YEARS_IN_ROW,\r\n        this._classes\r\n      );\r\n    }\r\n\r\n    this.datesContainer.focus();\r\n    this._updateViewControlsAndAttributes(view);\r\n    this._updateControlsDisabledState();\r\n  }\r\n\r\n  _updateViewControlsAndAttributes(view) {\r\n    if (view === \"days\") {\r\n      this.viewChangeButton.textContent = `${\r\n        this._options.monthsFull[this.activeMonth]\r\n      } ${this.activeYear}`;\r\n      this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n        this._options,\r\n        this._classes\r\n      );\r\n      this.viewChangeButton.setAttribute(\r\n        \"aria-label\",\r\n        this._options.switchToMultiYearViewLabel\r\n      );\r\n      this.previousButton.setAttribute(\r\n        \"aria-label\",\r\n        this._options.prevMonthLabel\r\n      );\r\n      this.nextButton.setAttribute(\"aria-label\", this._options.nextMonthLabel);\r\n    }\r\n\r\n    if (view === \"months\") {\r\n      this.viewChangeButton.textContent = `${this.activeYear}`;\r\n      this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n        this._options,\r\n        this._classes\r\n      );\r\n      this.viewChangeButton.setAttribute(\r\n        \"aria-label\",\r\n        this._options.switchToDayViewLabel\r\n      );\r\n      this.previousButton.setAttribute(\r\n        \"aria-label\",\r\n        this._options.prevYearLabel\r\n      );\r\n      this.nextButton.setAttribute(\"aria-label\", this._options.nextYearLabel);\r\n    }\r\n\r\n    if (view === \"years\") {\r\n      this.viewChangeButton.textContent = `${this.firstYearInView} - ${this.lastYearInView}`;\r\n      this.viewChangeButton.innerHTML += createViewChangeButtonIcon(\r\n        this._options,\r\n        this._classes\r\n      );\r\n      this.viewChangeButton.setAttribute(\r\n        \"aria-label\",\r\n        this._options.switchToMonthViewLabel\r\n      );\r\n      this.previousButton.setAttribute(\r\n        \"aria-label\",\r\n        this._options.prevMultiYearLabel\r\n      );\r\n      this.nextButton.setAttribute(\r\n        \"aria-label\",\r\n        this._options.nextMultiYearLabel\r\n      );\r\n    }\r\n  }\r\n\r\n  _updateControlsDisabledState() {\r\n    if (\r\n      isNextDateDisabled(\r\n        this._options.disableFuture,\r\n        this._activeDate,\r\n        this._view,\r\n        YEARS_IN_VIEW,\r\n        this._options.min,\r\n        this._options.max,\r\n        this.lastYearInView,\r\n        this.firstYearInView\r\n      )\r\n    ) {\r\n      this.nextButton.disabled = true;\r\n    } else {\r\n      this.nextButton.disabled = false;\r\n    }\r\n\r\n    if (\r\n      isPreviousDateDisabled(\r\n        this._options.disablePast,\r\n        this._activeDate,\r\n        this._view,\r\n        YEARS_IN_VIEW,\r\n        this._options.min,\r\n        this._options.max,\r\n        this.lastYearInView,\r\n        this.firstYearInView\r\n      )\r\n    ) {\r\n      this.previousButton.disabled = true;\r\n    } else {\r\n      this.previousButton.disabled = false;\r\n    }\r\n  }\r\n\r\n  _handleUserInput(input) {\r\n    const delimeters = this._getDelimeters(this._options.format);\r\n    const date = this._parseDate(input, this._options.format, delimeters);\r\n\r\n    if (isValidDate(date)) {\r\n      this._activeDate = date;\r\n      this._selectedDate = date;\r\n      this._selectedYear = getYear(date);\r\n      this._selectedMonth = getMonth(date);\r\n      this._headerDate = date;\r\n    } else {\r\n      this._activeDate = new Date();\r\n      this._selectedDate = null;\r\n      this._selectedMonth = null;\r\n      this._selectedYear = null;\r\n      this._headerDate = null;\r\n      this._headerMonth = null;\r\n      this._headerYear = null;\r\n    }\r\n  }\r\n\r\n  _getDelimeters(format) {\r\n    return format.match(/[^(dmy)]{1,}/g);\r\n  }\r\n\r\n  _parseDate(dateString, format, delimeters) {\r\n    let delimeterPattern;\r\n\r\n    if (delimeters[0] !== delimeters[1]) {\r\n      delimeterPattern = delimeters[0] + delimeters[1];\r\n    } else {\r\n      delimeterPattern = delimeters[0];\r\n    }\r\n\r\n    const regExp = new RegExp(`[${delimeterPattern}]`);\r\n    const dateParts = dateString.split(regExp);\r\n    const formatParts = format.split(regExp);\r\n    const isMonthString = format.indexOf(\"mmm\") !== -1;\r\n\r\n    const datesArray = [];\r\n\r\n    for (let i = 0; i < formatParts.length; i++) {\r\n      if (formatParts[i].indexOf(\"yy\") !== -1) {\r\n        datesArray[0] = { value: dateParts[i], format: formatParts[i] };\r\n      }\r\n      if (formatParts[i].indexOf(\"m\") !== -1) {\r\n        datesArray[1] = { value: dateParts[i], format: formatParts[i] };\r\n      }\r\n      if (formatParts[i].indexOf(\"d\") !== -1 && formatParts[i].length <= 2) {\r\n        datesArray[2] = { value: dateParts[i], format: formatParts[i] };\r\n      }\r\n    }\r\n\r\n    let monthsNames;\r\n\r\n    if (format.indexOf(\"mmmm\") !== -1) {\r\n      monthsNames = this._options.monthsFull;\r\n    } else {\r\n      monthsNames = this._options.monthsShort;\r\n    }\r\n\r\n    const year = Number(datesArray[0].value);\r\n    const month = isMonthString\r\n      ? this.getMonthNumberByMonthName(datesArray[1].value, monthsNames)\r\n      : Number(datesArray[1].value) - 1;\r\n    const day = Number(datesArray[2].value);\r\n\r\n    const parsedDate = createDate(year, month, day);\r\n    return parsedDate;\r\n  }\r\n\r\n  getMonthNumberByMonthName(monthValue, monthLabels) {\r\n    return monthLabels.findIndex((monthLabel) => monthLabel === monthValue);\r\n  }\r\n\r\n  static getInstance(element) {\r\n    return Data.getData(element, DATA_KEY);\r\n  }\r\n\r\n  static getOrCreateInstance(element, config = {}) {\r\n    return (\r\n      this.getInstance(element) ||\r\n      new this(element, typeof config === \"object\" ? config : null)\r\n    );\r\n  }\r\n}\r\n\r\nexport default Datepicker;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\nexport const LEFT_ARROW = 37;\r\nexport const UP_ARROW = 38;\r\nexport const RIGHT_ARROW = 39;\r\nexport const DOWN_ARROW = 40;\r\nexport const HOME = 36;\r\nexport const END = 35;\r\nexport const PAGE_UP = 33;\r\nexport const PAGE_DOWN = 34;\r\nexport const ENTER = 13;\r\nexport const SPACE = 32;\r\nexport const ESCAPE = 27;\r\nexport const TAB = 9;\r\nexport const BACKSPACE = 8;\r\nexport const DELETE = 46;\r\nexport const A = 65;\r\nexport const B = 66;\r\nexport const C = 67;\r\nexport const D = 68;\r\nexport const E = 69;\r\nexport const F = 70;\r\nexport const G = 71;\r\nexport const H = 72;\r\nexport const I = 73;\r\nexport const J = 74;\r\nexport const K = 75;\r\nexport const L = 76;\r\nexport const M = 77;\r\nexport const N = 78;\r\nexport const O = 79;\r\nexport const P = 80;\r\nexport const Q = 81;\r\nexport const R = 82;\r\nexport const S = 83;\r\nexport const T = 84;\r\nexport const U = 85;\r\nexport const V = 86;\r\nexport const W = 87;\r\nexport const X = 88;\r\nexport const Y = 89;\r\nexport const Z = 90;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\nexport const getTimepickerTemplate = (\r\n  {\r\n    format24,\r\n    okLabel,\r\n    cancelLabel,\r\n    headID,\r\n    footerID,\r\n    bodyID,\r\n    pickerID,\r\n    clearLabel,\r\n    inline,\r\n    showClearBtn,\r\n    amLabel,\r\n    pmLabel,\r\n  },\r\n  classes\r\n) => {\r\n  const normalTemplate = `<div id='${pickerID}' class='${\r\n    classes.timepickerWrapper\r\n  }' data-te-timepicker-wrapper>\r\n      <div class=\"${classes.timepickerContainer}\">\r\n        <div class=\"${\r\n          classes.timepickerElements\r\n        }\" data-te-timepicker-elements-wrapper>\r\n        <div id='${headID}' class='${\r\n    classes.timepickerHead\r\n  }' style='padding-right:${format24 ? 50 : 10}px'>\r\n        <div class='${classes.timepickerHeadContent}'>\r\n            <div class=\"${classes.timepickerCurrentWrapper}\">\r\n              <span class=\"${classes.timepickerCurrentButtonWrapper}\">\r\n                <button type='button' class='${\r\n                  classes.timepickerCurrentButton\r\n                }' tabindex=\"0\" data-te-timepicker-active data-te-timepicker-current data-te-timepicker-hour data-te-ripple-init>21</button>\r\n              </span>\r\n              <button type='button' class='${\r\n                classes.timepickerDot\r\n              }' disabled>:</button>\r\n            <span class=\"${classes.timepickerCurrentButtonWrapper}\">\r\n              <button type='button' class='${\r\n                classes.timepickerCurrentButton\r\n              }' tabindex=\"0\" data-te-timepicker-current data-te-timepicker-minute data-te-ripple-init>21</button>\r\n            </span>\r\n            </div>\r\n            ${\r\n              !format24\r\n                ? `<div class=\"${classes.timepickerModeWrapper}\">\r\n                  <button type='button' class=\"${classes.timepickerModeAm}\" tabindex=\"0\" data-te-timepicker-am data-te-timepicker-hour-mode data-te-ripple-init>${amLabel}</button>\r\n                  <button class=\"${classes.timepickerModePm}\" tabindex=\"0\" data-te-timepicker-pm data-te-timepicker-hour-mode data-te-ripple-init>${pmLabel}</button>\r\n                </div>`\r\n                : \"\"\r\n            }\r\n        </div>\r\n      </div>\r\n      ${\r\n        !inline\r\n          ? `<div id='${bodyID}' class='${\r\n              classes.timepickerClockWrapper\r\n            }' data-te-timepicker-clock-wrapper>\r\n            <div class='${classes.timepickerClock}' data-te-timepicker-clock>\r\n              <span class='${\r\n                classes.timepickerMiddleDot\r\n              }' data-te-timepicker-middle-dot></span>\r\n              <div class='${\r\n                classes.timepickerHandPointer\r\n              }' data-te-timepicker-hand-pointer>\r\n                <div class='${\r\n                  classes.timepickerPointerCircle\r\n                }' data-te-timepicker-circle></div>\r\n              </div>\r\n              ${\r\n                format24\r\n                  ? '<div class=\"' +\r\n                    classes.timepickerClockInner +\r\n                    '\" data-te-timepicker-clock-inner></div>'\r\n                  : \"\"\r\n              }\r\n            </div>\r\n          </div>`\r\n          : \"\"\r\n      }\r\n    </div>\r\n    <div id='${footerID}' class='${classes.timepickerFooterWrapper}'>\r\n      <div class=\"${classes.timepickerFooter}\">\r\n        ${\r\n          showClearBtn\r\n            ? `<button type='button' class='${classes.timepickerFooterButton}' data-te-timepicker-clear tabindex=\"0\" data-te-ripple-init>${clearLabel}</button>`\r\n            : \"\"\r\n        }\r\n        <button type='button' class='${\r\n          classes.timepickerFooterButton\r\n        }' data-te-timepicker-cancel tabindex=\"0\" data-te-ripple-init>${cancelLabel}</button>\r\n        <button type='button' class='${\r\n          classes.timepickerFooterButton\r\n        }' data-te-timepicker-submit tabindex=\"0\" data-te-ripple-init>${okLabel}</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>`;\r\n\r\n  const inlineTemplate = `<div id='${pickerID}' class='${\r\n    classes.timepickerInlineWrapper\r\n  }' data-te-timepicker-wrapper>\r\n        <div class=\"${classes.timepickerInlineContainer}\">\r\n          <div class=\"${\r\n            classes.timepickerInlineElements\r\n          }\" data-te-timepicker-elements-wrapper>\r\n          <div id='${headID}' class='${classes.timepickerInlineHead}'\r\n          style='padding-right:10px'>\r\n          <div class='${classes.timepickerInlineHeadContent}'>\r\n              <div class=\"${classes.timepickerCurrentWrapper}\">\r\n                <span class=\"${\r\n                  classes.timepickerInlineHourWrapper\r\n                }\" data-te-timepicker-inline-hour-icons>\r\n                  <span class=\"${\r\n                    classes.timepickerInlineIconUp\r\n                  }\" data-te-timepicker-icon-up data-te-timepicker-icon-inline-hour>\r\n                    <span class=\"${classes.timepickerInlineIconSvg}\">\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 15.75l7.5-7.5 7.5 7.5\" />\r\n                      </svg>   \r\n                    </span>\r\n                  </span>\r\n                  <button type='button' class='${\r\n                    classes.timepickerInlineCurrentButton\r\n                  }' data-te-timepicker-hour data-te-timepicker-current data-te-timepicker-current-inline tabindex=\"0\" data-te-ripple-init>21</button>\r\n                  <span class=\"${\r\n                    classes.timepickerInlineIconDown\r\n                  }\" data-te-timepicker-icon-inline-hour data-te-timepicker-icon-down>\r\n                    <span class=\"${classes.timepickerInlineIconSvg}\">\r\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" />\r\n                      </svg>  \r\n                    </span>\r\n                  </span>\r\n                </span>\r\n                <button type='button' class='${\r\n                  classes.timepickerInlineDot\r\n                }' data-te-timepicker-current-inline disabled>:</button>\r\n              <span class=\"${classes.timepickerCurrentMinuteWrapper}\">\r\n                <span class=\"${\r\n                  classes.timepickerInlineIconUp\r\n                }\" data-te-timepicker-icon-up data-te-timepicker-icon-inline-minute>\r\n                  <span class=\"${classes.timepickerInlineIconSvg}\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 15.75l7.5-7.5 7.5 7.5\" />\r\n                    </svg>\r\n                  </span>\r\n                </span>\r\n                <button type='button' class='${\r\n                  classes.timepickerInlineCurrentButton\r\n                }' data-te-timepicker-minute data-te-timepicker-current data-te-timepicker-current-inline tabindex=\"0\" data-te-ripple-init>21</button>\r\n                <span class=\"${\r\n                  classes.timepickerInlineIconDown\r\n                }\" data-te-timepicker-icon-inline-minute data-te-timepicker-icon-down>\r\n                  <span class=\"${classes.timepickerInlineIconSvg}\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-5 h-5\">\r\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 8.25l-7.5 7.5-7.5-7.5\" />\r\n                    </svg> \r\n                  </span>\r\n                </span>\r\n              </span>\r\n              </div>\r\n              ${\r\n                !format24\r\n                  ? `<div class=\"${classes.timepickerInlineModeWrapper}\">\r\n                      <button type='button' class=\"${classes.timepickerInlineModeAm}\" data-te-timepicker-am data-te-timepicker-hour-mode tabindex=\"0\" data-te-ripple-init>${amLabel}</button>\r\n                      <button class=\"${classes.timepickerInlineModePm}\" data-te-timepicker-hour-mode data-te-timepicker-pm tabindex=\"0\" data-te-ripple-init>${pmLabel}</button>\r\n                      <button type='button' class='${classes.timepickerInlineSubmitButton}' data-te-timepicker-submit tabindex=\"0\" data-te-ripple-init>${okLabel}</button>\r\n                    </div>`\r\n                  : \"\"\r\n              }\r\n              ${\r\n                format24\r\n                  ? `<button class='${classes.timepickerInlineSubmitButton}' data-te-timepicker-submit tabindex=\"0\" data-te-ripple-init>${okLabel}</button>`\r\n                  : \"\"\r\n              }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</div>`;\r\n  return inline ? inlineTemplate : normalTemplate;\r\n};\r\n\r\nexport const getToggleButtonTemplate = (options, id, classes) => {\r\n  const { iconSVG } = options;\r\n\r\n  return `\r\n  <button id=\"${id}\" tabindex=\"0\" type=\"button\" class=\"${classes.timepickerToggleButton}\" data-te-toggle=\"timepicker\" data-te-timepicker-toggle-button data-te-timepicker-icon>\r\n    ${iconSVG}\r\n  </button>\r\n`;\r\n};\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\nexport const getInputField = ({ inputID, labelText }, classes) => {\r\n  return `<div data-te-chips-input-wrapper data-te-input-wrapper-init class=\"${classes.chipsInputWrapper}\">\r\n      <input\r\n          type=\"text\"\r\n          class=\"${classes.chipsInput}\"\r\n          id=\"${inputID}\"\r\n          placeholder=\"Example label\" />\r\n        <label\r\n          for=\"${inputID}\"\r\n          class=\"${classes.chipsLabel}\"\r\n          >${labelText}\r\n        </label>\r\n      </div>\r\n    </div>`;\r\n};\r\n\r\nexport const getChip = ({ text, iconSVG }, classes) => {\r\n  return `<div data-te-chip-init data-te-ripple-init class=\"${classes.chipElement}\">\r\n    <span data-te-chip-text>${text}</span> \r\n      <span data-te-chip-close class=\"${classes.chipCloseIcon}\">\r\n        ${iconSVG}\r\n      </span>\r\n  </div>`;\r\n};\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\n/* eslint-disable consistent-return */\r\nimport EventHandler from \"../../dom/event-handler\";\r\nimport Manipulator from \"../../dom/manipulator\";\r\n\r\nconst ATTR_TIMEPICKER_DISABLED = \"data-te-timepicker-disabled\";\r\nconst ATTR_TIMEPICKER_ACTIVE = \"data-te-timepicker-active\";\r\n\r\nconst formatToAmPm = (date) => {\r\n  if (date === \"\") return;\r\n  let hours;\r\n  let minutes;\r\n  let amOrPm;\r\n  let originalHours;\r\n\r\n  if (isValidDate(date)) {\r\n    hours = date.getHours();\r\n    originalHours = hours;\r\n    minutes = date.getMinutes();\r\n    hours %= 12;\r\n    if (originalHours === 0 && hours === 0) {\r\n      amOrPm = \"AM\";\r\n    }\r\n\r\n    hours = hours || 12;\r\n\r\n    if (amOrPm === undefined) {\r\n      amOrPm = Number(originalHours) >= 12 ? \"PM\" : \"AM\";\r\n    }\r\n\r\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\r\n  } else {\r\n    [hours, minutes, amOrPm] = takeValue(date, false);\r\n    originalHours = hours;\r\n\r\n    hours %= 12;\r\n    if (originalHours === 0 && hours === 0) {\r\n      amOrPm = \"AM\";\r\n    }\r\n    hours = hours || 12;\r\n\r\n    if (amOrPm === undefined) {\r\n      amOrPm = Number(originalHours) >= 12 ? \"PM\" : \"AM\";\r\n    }\r\n  }\r\n\r\n  return {\r\n    hours,\r\n    minutes,\r\n    amOrPm,\r\n  };\r\n};\r\n\r\nconst isValidDate = (date) => {\r\n  return (\r\n    date &&\r\n    Object.prototype.toString.call(date) === \"[object Date]\" &&\r\n    !Number.isNaN(date)\r\n  );\r\n};\r\n\r\nconst formatNormalHours = (date) => {\r\n  if (date === \"\") return;\r\n\r\n  let hours;\r\n  let minutes;\r\n\r\n  if (!isValidDate(date)) {\r\n    [hours, minutes] = takeValue(date, false);\r\n  } else {\r\n    hours = date.getHours();\r\n    minutes = date.getMinutes();\r\n  }\r\n\r\n  minutes = Number(minutes) < 10 ? `0${Number(minutes)}` : minutes;\r\n\r\n  return {\r\n    hours,\r\n    minutes,\r\n  };\r\n};\r\n\r\nconst toggleClassHandler = (event, selector, classes) => {\r\n  return EventHandler.on(document, event, selector, ({ target }) => {\r\n    if (target.hasAttribute(ATTR_TIMEPICKER_ACTIVE)) return;\r\n\r\n    const allElements = document.querySelectorAll(selector);\r\n\r\n    allElements.forEach((element) => {\r\n      if (!element.hasAttribute(ATTR_TIMEPICKER_ACTIVE)) return;\r\n\r\n      Manipulator.removeClass(element, classes.opacity);\r\n      element.removeAttribute(ATTR_TIMEPICKER_ACTIVE);\r\n    });\r\n\r\n    Manipulator.addClass(target, classes.opacity);\r\n    target.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n  });\r\n};\r\n\r\nconst findMousePosition = (\r\n  { clientX, clientY, touches },\r\n  object,\r\n  isMobile = false\r\n) => {\r\n  const { left, top } = object.getBoundingClientRect();\r\n  let obj = {};\r\n  if (!isMobile || !touches) {\r\n    obj = {\r\n      x: clientX - left,\r\n      y: clientY - top,\r\n    };\r\n  } else if (isMobile && Object.keys(touches).length > 0) {\r\n    obj = {\r\n      x: touches[0].clientX - left,\r\n      y: touches[0].clientY - top,\r\n    };\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\nconst checkBrowser = () => {\r\n  const isBrowserMatched =\r\n    (navigator.maxTouchPoints &&\r\n      navigator.maxTouchPoints > 2 &&\r\n      /MacIntel/.test(navigator.platform)) ||\r\n    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n      navigator.userAgent\r\n    );\r\n\r\n  return isBrowserMatched;\r\n};\r\n\r\nconst takeValue = (element, isInput = true) => {\r\n  if (isInput) return element.value.replace(/:/gi, \" \").split(\" \");\r\n\r\n  return element.replace(/:/gi, \" \").split(\" \");\r\n};\r\n\r\nconst compareTimes = (time1, time2) => {\r\n  const [time1Hour, time1Minutes, time1maxTimeFormat] = takeValue(time1, false);\r\n  const [time2Hour, time2Minutes, time2maxTimeFormat] = takeValue(time2, false);\r\n\r\n  const bothFormatsEqual = time1maxTimeFormat === time2maxTimeFormat;\r\n  const condition =\r\n    (time1maxTimeFormat === \"PM\" && time2maxTimeFormat === \"AM\") ||\r\n    (bothFormatsEqual && time1Hour > time2Hour) ||\r\n    time1Minutes > time2Minutes;\r\n\r\n  return condition;\r\n};\r\n\r\nconst getCurrentTime = () => {\r\n  const date = new Date();\r\n  const currentHours = date.getHours();\r\n  const currentMinutes = date.getMinutes();\r\n\r\n  const currentTime = `${currentHours}:${\r\n    currentMinutes < 10 ? `0${currentMinutes}` : currentMinutes\r\n  }`;\r\n\r\n  return currentTime;\r\n};\r\n\r\nconst setMinTime = (minTime, disabledPast, format12) => {\r\n  if (!disabledPast) {\r\n    return minTime;\r\n  }\r\n  let currentTime = getCurrentTime();\r\n\r\n  if (format12) {\r\n    currentTime = `${formatToAmPm(currentTime).hours}:${\r\n      formatToAmPm(currentTime).minutes\r\n    } ${formatToAmPm(currentTime).amOrPm}`;\r\n  }\r\n  if (\r\n    (minTime !== \"\" && compareTimes(currentTime, minTime)) ||\r\n    minTime === \"\"\r\n  ) {\r\n    minTime = currentTime;\r\n  }\r\n  return minTime;\r\n};\r\n\r\nconst setMaxTime = (maxTime, disabledFuture, format12) => {\r\n  if (!disabledFuture) return maxTime;\r\n\r\n  let currentTime = getCurrentTime();\r\n\r\n  if (format12) {\r\n    currentTime = `${formatToAmPm(currentTime).hours}:${\r\n      formatToAmPm(currentTime).minutes\r\n    } ${formatToAmPm(currentTime).amOrPm}`;\r\n  }\r\n\r\n  if (\r\n    (maxTime !== \"\" && !compareTimes(currentTime, maxTime)) ||\r\n    maxTime === \"\"\r\n  ) {\r\n    maxTime = currentTime;\r\n  }\r\n\r\n  return maxTime;\r\n};\r\n\r\nconst checkValueBeforeAccept = (\r\n  { format12, maxTime, minTime, disablePast, disableFuture },\r\n  input,\r\n  hourHeader\r\n) => {\r\n  const minute = takeValue(input)[1];\r\n\r\n  minTime = setMinTime(minTime, disablePast, format12);\r\n  maxTime = setMaxTime(maxTime, disableFuture, format12);\r\n\r\n  const [maxTimeHour, maxTimeMin, maxTimeFormat] = takeValue(maxTime, false);\r\n  const [minTimeHour, minTimeMin, minTimeFormat] = takeValue(minTime, false);\r\n\r\n  if (maxTimeFormat !== undefined || minTimeFormat !== undefined)\r\n    return [hourHeader, minute];\r\n\r\n  if (\r\n    maxTimeHour !== \"\" &&\r\n    minTimeHour === \"\" &&\r\n    Number(hourHeader) > Number(maxTimeHour)\r\n  )\r\n    return;\r\n\r\n  if (\r\n    maxTimeHour === \"\" &&\r\n    minTimeHour !== \"\" &&\r\n    maxTimeMin === undefined &&\r\n    minTimeMin !== \"\" &&\r\n    Number(hourHeader) < Number(minTimeHour)\r\n  )\r\n    return;\r\n\r\n  return [hourHeader, minute];\r\n};\r\n\r\nconst _verifyMaxTimeHourAndAddDisabledClass = (\r\n  tips,\r\n  maxTimeHour,\r\n  classes,\r\n  format12\r\n) => {\r\n  tips.forEach((tip) => {\r\n    maxTimeHour = maxTimeHour === \"12\" && format12 ? \"0\" : maxTimeHour;\r\n    if (\r\n      tip.textContent === \"00\" ||\r\n      Number(tip.textContent === \"12\" && format12 ? \"0\" : tip.textContent) >\r\n        maxTimeHour\r\n    ) {\r\n      Manipulator.addClass(tip, classes.tipsDisabled);\r\n      tip.setAttribute(ATTR_TIMEPICKER_DISABLED, \"\");\r\n    }\r\n  });\r\n};\r\n\r\nconst _verifyMinTimeHourAndAddDisabledClass = (\r\n  tips,\r\n  minTimeHour,\r\n  classes,\r\n  format12\r\n) => {\r\n  tips.forEach((tip) => {\r\n    minTimeHour = minTimeHour === \"12\" && format12 ? \"0\" : minTimeHour;\r\n    if (\r\n      tip.textContent !== \"00\" &&\r\n      Number(tip.textContent === \"12\" && format12 ? \"0\" : tip.textContent) <\r\n        Number(minTimeHour)\r\n    ) {\r\n      Manipulator.addClass(tip, classes.tipsDisabled);\r\n      tip.setAttribute(ATTR_TIMEPICKER_DISABLED, \"\");\r\n    }\r\n  });\r\n};\r\n\r\nconst _isHourDisabled = (selectedHour, timeHour, format12, operator) => {\r\n  if (timeHour === \"12\" || timeHour === \"24\") {\r\n    return;\r\n  }\r\n\r\n  const hourChange = format12 ? 12 : 24;\r\n\r\n  if (operator === \"max\") {\r\n    return (\r\n      (Number(selectedHour) === hourChange ? 0 : Number(selectedHour)) >\r\n      Number(timeHour)\r\n    );\r\n  }\r\n  return (\r\n    (Number(selectedHour) === hourChange ? 0 : Number(selectedHour)) <\r\n    Number(timeHour)\r\n  );\r\n};\r\n\r\nconst _verifyMaxTimeMinutesTipsAndAddDisabledClass = (\r\n  tips,\r\n  maxMinutes,\r\n  maxHour,\r\n  currHour,\r\n  classes,\r\n  format12\r\n) => {\r\n  tips.forEach((tip) => {\r\n    if (\r\n      _isHourDisabled(currHour, maxHour, format12, \"max\") ||\r\n      (Number(tip.textContent) > maxMinutes &&\r\n        Number(currHour) === Number(maxHour))\r\n    ) {\r\n      Manipulator.addClass(tip, classes.tipsDisabled);\r\n      tip.setAttribute(ATTR_TIMEPICKER_DISABLED, \"\");\r\n    }\r\n  });\r\n};\r\n\r\nconst _verifyMinTimeMinutesTipsAndAddDisabledClass = (\r\n  tips,\r\n  minMinutes,\r\n  minHour,\r\n  currHour,\r\n  classes,\r\n  format12\r\n) => {\r\n  tips.forEach((tip) => {\r\n    if (\r\n      _isHourDisabled(currHour, minHour, format12, \"min\") ||\r\n      (Number(tip.textContent) < minMinutes &&\r\n        Number(currHour) === Number(minHour))\r\n    ) {\r\n      Manipulator.addClass(tip, classes.tipsDisabled);\r\n      tip.setAttribute(ATTR_TIMEPICKER_DISABLED, \"\");\r\n    }\r\n  });\r\n};\r\n\r\nconst _convertHourToNumber = (string) => {\r\n  if (string.startsWith(\"0\")) return Number(string.slice(1));\r\n\r\n  return Number(string);\r\n};\r\n\r\nexport {\r\n  checkBrowser,\r\n  findMousePosition,\r\n  formatNormalHours,\r\n  formatToAmPm,\r\n  toggleClassHandler,\r\n  checkValueBeforeAccept,\r\n  takeValue,\r\n  compareTimes,\r\n  setMinTime,\r\n  setMaxTime,\r\n  _verifyMinTimeHourAndAddDisabledClass,\r\n  _verifyMaxTimeMinutesTipsAndAddDisabledClass,\r\n  _verifyMinTimeMinutesTipsAndAddDisabledClass,\r\n  _verifyMaxTimeHourAndAddDisabledClass,\r\n  _convertHourToNumber,\r\n};\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable no-else-return */\r\nimport { createPopper } from \"@popperjs/core\";\r\nimport { typeCheckConfig, element, getUID } from \"../../util/index\";\r\nimport { getTimepickerTemplate, getToggleButtonTemplate } from \"./templates\";\r\nimport Data from \"../../dom/data\";\r\nimport Manipulator from \"../../dom/manipulator\";\r\nimport EventHandler, { EventHandlerMulti } from \"../../dom/event-handler\";\r\nimport {\r\n  formatToAmPm,\r\n  toggleClassHandler,\r\n  checkBrowser,\r\n  findMousePosition,\r\n  takeValue,\r\n  formatNormalHours,\r\n  setMinTime,\r\n  setMaxTime,\r\n  _convertHourToNumber,\r\n  checkValueBeforeAccept,\r\n  _verifyMaxTimeHourAndAddDisabledClass,\r\n  _verifyMaxTimeMinutesTipsAndAddDisabledClass,\r\n  _verifyMinTimeHourAndAddDisabledClass,\r\n  _verifyMinTimeMinutesTipsAndAddDisabledClass,\r\n} from \"./utils\";\r\nimport ScrollBarHelper from \"../../util/scrollbar\";\r\nimport FocusTrap from \"../../util/focusTrap\";\r\nimport SelectorEngine from \"../../dom/selector-engine\";\r\nimport {\r\n  UP_ARROW,\r\n  DOWN_ARROW,\r\n  LEFT_ARROW,\r\n  RIGHT_ARROW,\r\n  ESCAPE,\r\n  ENTER,\r\n} from \"../../util/keycodes\";\r\n\r\n/*\r\n------------------------------------------------------------------------\r\nConstants\r\n------------------------------------------------------------------------\r\n*/\r\n\r\nconst NAME = \"timepicker\";\r\nconst ATTR_NAME = `data-te-${NAME}`;\r\nconst SELECTOR_DATA_TE_TOGGLE = \"[data-te-toggle]\";\r\n\r\nconst DATA_KEY = `te.${NAME}`;\r\nconst EVENT_KEY = `.${DATA_KEY}`;\r\nconst DATA_API_KEY = \".data-api\";\r\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_MOUSEDOWN_DATA_API = `mousedown${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_MOUSEUP_DATA_API = `mouseup${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_MOUSEMOVE_DATA_API = `mousemove${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_MOUSELEAVE_DATA_API = `mouseleave${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_MOUSEOVER_DATA_API = `mouseover${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_TOUCHMOVE_DATA_API = `touchmove${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_TOUCHEND_DATA_API = `touchend${EVENT_KEY}${DATA_API_KEY}`;\r\nconst EVENT_TOUCHSTART_DATA_API = `touchstart${EVENT_KEY}${DATA_API_KEY}`;\r\n\r\nconst SELECTOR_ATTR_TIMEPICKER_AM = `[${ATTR_NAME}-am]`;\r\nconst SELECTOR_ATTR_TIMEPICKER_PM = `[${ATTR_NAME}-pm]`;\r\nconst SELECTOR_ATTR_TIMEPICKER_FORMAT24 = `[${ATTR_NAME}-format24]`;\r\nconst SELECTOR_ATTR_TIMEPICKER_CURRENT = `[${ATTR_NAME}-current]`;\r\nconst SELECTOR_ATTR_TIMEPICKER_HOUR_MODE = `[${ATTR_NAME}-hour-mode]`;\r\nconst SELECTOR_ATTR_TIMEPICKER_TOGGLE_BUTTON = `[${ATTR_NAME}-toggle-button]`;\r\n\r\nconst ATTR_TIMEPICKER_BUTTON_CANCEL = `${ATTR_NAME}-cancel`;\r\nconst ATTR_TIMEPICKER_BUTTON_CLEAR = `${ATTR_NAME}-clear`;\r\nconst ATTR_TIMEPICKER_BUTTON_SUBMIT = `${ATTR_NAME}-submit`;\r\nconst ATTR_TIMEPICKER_ICON = `${ATTR_NAME}-icon`;\r\nconst ATTR_TIMEPICKER_ICON_UP = `${ATTR_NAME}-icon-up`;\r\nconst ATTR_TIMEPICKER_ICON_DOWN = `${ATTR_NAME}-icon-down`;\r\nconst ATTR_TIMEPICKER_ICON_INLINE_HOUR = `${ATTR_NAME}-icon-inline-hour`;\r\nconst ATTR_TIMEPICKER_ICON_INLINE_MINUTE = `${ATTR_NAME}-icon-inline-minute`;\r\nconst ATTR_TIMEPICKER_ICONS_HOUR_INLINE = `${ATTR_NAME}-inline-hour-icons`;\r\nconst ATTR_TIMEPICKER_CURRENT_INLINE = `${ATTR_NAME}-current-inline`;\r\n\r\nconst ATTR_READONLY = \"readonly\";\r\nconst ATTR_TIMEPICKER_INVALID_FEEDBACK = `${ATTR_NAME}-invalid-feedback`;\r\nconst ATTR_TIMEPICKER_IS_INVALID = `${ATTR_NAME}-is-invalid`;\r\nconst ATTR_TIMEPICKER_DISABLED = `${ATTR_NAME}-disabled`;\r\nconst ATTR_TIMEPICKER_ACTIVE = `${ATTR_NAME}-active`;\r\n\r\nconst ATTR_TIMEPICKER_INPUT = `${ATTR_NAME}-input`;\r\nconst ATTR_TIMEPICKER_CLOCK = `${ATTR_NAME}-clock`;\r\nconst ATTR_TIMEPICKER_CLOCK_INNER = `${ATTR_NAME}-clock-inner`;\r\nconst ATTR_TIMEPICKER_WRAPPER = `${ATTR_NAME}-wrapper`;\r\nconst ATTR_TIMEPICKER_CLOCK_WRAPPER = `${ATTR_NAME}-clock-wrapper`;\r\nconst ATTR_TIMEPICKER_HOUR = `${ATTR_NAME}-hour`;\r\nconst ATTR_TIMEPICKER_MINUTE = `${ATTR_NAME}-minute`;\r\nconst ATTR_TIMEPICKER_TIPS_ELEMENT = `${ATTR_NAME}-tips-element`;\r\nconst ATTR_TIMEPICKER_TIPS_HOURS = `${ATTR_NAME}-tips-hours`;\r\nconst ATTR_TIMEPICKER_TIPS_MINUTES = `${ATTR_NAME}-tips-minutes`;\r\nconst ATTR_TIMEPICKER_INNER_HOURS = `${ATTR_NAME}-tips-inner`;\r\nconst ATTR_TIMEPICKER_TIPS_INNER_ELEMENT = `${ATTR_NAME}-tips-inner-element`;\r\nconst ATTR_TIMEPICKER_MIDDLE_DOT = `${ATTR_NAME}-middle-dot`;\r\nconst ATTR_TIMEPICKER_HAND_POINTER = `${ATTR_NAME}-hand-pointer`;\r\nconst ATTR_TIMEPICKER_CIRCLE = `${ATTR_NAME}-circle`;\r\nconst ATTR_TIMEPICKER_MODAL = `${ATTR_NAME}-modal`;\r\n\r\nconst defaultIcon = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n</svg>`;\r\n\r\nconst Default = {\r\n  appendValidationInfo: true,\r\n  bodyID: \"\",\r\n  cancelLabel: \"Cancel\",\r\n  clearLabel: \"Clear\",\r\n  closeModalOnBackdropClick: true,\r\n  closeModalOnMinutesClick: false,\r\n  container: \"body\",\r\n  defaultTime: \"\",\r\n  disabled: false,\r\n  disablePast: false,\r\n  disableFuture: false,\r\n  enableValidation: true,\r\n  focusInputAfterApprove: false,\r\n  footerID: \"\",\r\n  format12: true,\r\n  format24: false,\r\n  headID: \"\",\r\n  increment: false,\r\n  inline: false,\r\n  invalidLabel: \"Invalid Time Format\",\r\n  maxTime: \"\",\r\n  minTime: \"\",\r\n  modalID: \"\",\r\n  okLabel: \"Ok\",\r\n  overflowHidden: true,\r\n  pickerID: \"\",\r\n  readOnly: false,\r\n  showClearBtn: true,\r\n  switchHoursToMinutesOnClick: true,\r\n  iconSVG: defaultIcon,\r\n  withIcon: true,\r\n  pmLabel: \"PM\",\r\n  amLabel: \"AM\",\r\n  animations: true,\r\n};\r\n\r\nconst DefaultType = {\r\n  appendValidationInfo: \"boolean\",\r\n  bodyID: \"string\",\r\n  cancelLabel: \"string\",\r\n  clearLabel: \"string\",\r\n  closeModalOnBackdropClick: \"boolean\",\r\n  closeModalOnMinutesClick: \"boolean\",\r\n  container: \"string\",\r\n  disabled: \"boolean\",\r\n  disablePast: \"boolean\",\r\n  disableFuture: \"boolean\",\r\n  enableValidation: \"boolean\",\r\n  footerID: \"string\",\r\n  format12: \"boolean\",\r\n  format24: \"boolean\",\r\n  headID: \"string\",\r\n  increment: \"boolean\",\r\n  inline: \"boolean\",\r\n  invalidLabel: \"string\",\r\n  modalID: \"string\",\r\n  okLabel: \"string\",\r\n  overflowHidden: \"boolean\",\r\n  pickerID: \"string\",\r\n  readOnly: \"boolean\",\r\n  showClearBtn: \"boolean\",\r\n  switchHoursToMinutesOnClick: \"boolean\",\r\n  defaultTime: \"(string|date|number)\",\r\n  iconSVG: \"string\",\r\n  withIcon: \"boolean\",\r\n  pmLabel: \"string\",\r\n  amLabel: \"string\",\r\n  animations: \"boolean\",\r\n};\r\n\r\nconst DefaultClasses = {\r\n  tips: \"absolute rounded-[100%] w-[32px] h-[32px] text-center cursor-pointer text-[1.1rem] rounded-[100%] bg-transparent flex justify-center items-center font-light focus:outline-none selection:bg-transparent\",\r\n  tipsActive: \"text-white bg-[#3b71ca] font-normal\",\r\n  tipsDisabled: \"text-[#b3afaf] pointer-events-none bg-transparent\",\r\n  transform: \"transition-[transform,height] ease-in-out duration-[400ms]\",\r\n  modal: \"z-[1065]\",\r\n  clockAnimation: \"animate-[show-up-clock_350ms_linear]\",\r\n  opacity: \"!opacity-100\",\r\n  timepickerWrapper:\r\n    \"touch-none opacity-100 z-[1065] inset-0 bg-[#00000066] h-full flex items-center justify-center flex-col fixed\",\r\n  timepickerContainer:\r\n    \"flex items-center justify-center flex-col max-h-[calc(100%-64px)] overflow-y-auto shadow-[0_10px_15px_-3px_rgba(0,0,0,0.07),0_4px_6px_-2px_rgba(0,0,0,0.05)] min-[320px]:max-[825px]:landscape:rounded-lg\",\r\n  timepickerElements:\r\n    \"flex flex-col min-w-[310px] min-h-[325px] bg-white rounded-t-[0.6rem] min-[320px]:max-[825px]:landscape:!flex-row min-[320px]:max-[825px]:landscape:min-w-[auto] min-[320px]:max-[825px]:landscape:min-h-[auto] min-[320px]:max-[825px]:landscape:overflow-y-auto justify-around\",\r\n  timepickerHead:\r\n    \"bg-[#3b71ca] dark:bg-zinc-700 h-[100px] rounded-t-lg pr-[24px] pl-[50px] py-[10px] min-[320px]:max-[825px]:landscape:rounded-tr-none min-[320px]:max-[825px]:landscape:rounded-bl-none min-[320px]:max-[825px]:landscape:p-[10px] min-[320px]:max-[825px]:landscape:pr-[10px] min-[320px]:max-[825px]:landscape:h-auto min-[320px]:max-[825px]:landscape:min-h-[305px] flex flex-row items-center justify-center\",\r\n  timepickerHeadContent:\r\n    \"min-[320px]:max-[825px]:landscape:flex-col flex w-full justify-evenly\",\r\n  timepickerCurrentWrapper: \"[direction:ltr] rtl:[direction:rtl]\",\r\n  timepickerCurrentButtonWrapper: \"relative h-full\",\r\n  timepickerCurrentButton:\r\n    \"text-[3.75rem] font-light leading-[1.2] tracking-[-0.00833em] text-white opacity-[.54] border-none bg-transparent p-0 min-[320px]:max-[825px]:landscape:text-5xl min-[320px]:max-[825px]:landscape:font-normal cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none \",\r\n  timepickerDot:\r\n    \"font-light leading-[1.2] tracking-[-0.00833em] text-[3.75rem] opacity-[.54] border-none bg-transparent p-0 text-white min-[320px]:max-[825px]:landscape:text-[3rem] min-[320px]:max-[825px]:landscape:font-normal\",\r\n  timepickerModeWrapper:\r\n    \"flex flex-col justify-center text-[18px] text-[#ffffff8a] min-[320px]:max-[825px]:landscape:!justify-around min-[320px]:max-[825px]:landscape:!flex-row\",\r\n  timepickerModeAm:\r\n    \"p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none\",\r\n  timepickerModePm:\r\n    \"p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none\",\r\n  timepickerClockWrapper:\r\n    \"min-w-[310px] max-w-[325px] min-h-[305px] overflow-x-hidden h-full flex justify-center flex-col items-center dark:bg-zinc-500\",\r\n  timepickerClock:\r\n    \"relative rounded-[100%] w-[260px] h-[260px] cursor-default my-0 mx-auto bg-[#00000012] dark:bg-zinc-600/50\",\r\n  timepickerMiddleDot:\r\n    \"top-1/2 left-1/2 w-[6px] h-[6px] -translate-y-1/2 -translate-x-1/2 rounded-[50%] bg-[#3b71ca] absolute\",\r\n  timepickerHandPointer:\r\n    \"bg-[#3b71ca] bottom-1/2 h-2/5 left-[calc(50%-1px)] rtl:!left-auto origin-[center_bottom_0] rtl:!origin-[50%_50%_0] w-[2px] absolute\",\r\n  timepickerPointerCircle:\r\n    \"-top-[21px] -left-[15px] w-[4px] border-[14px] border-solid border-[#3b71ca] h-[4px] box-content rounded-[100%] absolute\",\r\n  timepickerClockInner:\r\n    \"absolute top-1/2 left-1/2 -translate-y-1/2 -translate-x-1/2 w-[160px] h-[160px] rounded-[100%]\",\r\n  timepickerFooterWrapper:\r\n    \"rounded-b-lg flex justify-between items-center w-full h-[56px] px-[12px] bg-white dark:bg-zinc-500\",\r\n  timepickerFooter: \"w-full flex justify-between\",\r\n  timepickerFooterButton:\r\n    \"text-[0.8rem] min-w-[64px] box-border font-medium leading-[40px] rounded-[10px] tracking-[0.1rem] uppercase text-[#3b71ca] dark:text-white border-none bg-transparent transition-[background-color,box-shadow,border] duration-[250ms] ease-[cubic-bezier(0.4,0,0.2,1)] delay-[0ms] outline-none py-0 px-[10px] h-[40px] mb-[10px] hover:bg-[#00000014] focus:bg-[#00000014] focus:outline-none\",\r\n  timepickerInlineWrapper:\r\n    \"touch-none opacity-100 z-[1065] inset-0 bg-[#00000066] h-full flex items-center justify-center flex-col rounded-lg\",\r\n  timepickerInlineContainer:\r\n    \"flex items-center justify-center flex-col max-h-[calc(100%-64px)] overflow-y-auto shadow-[0_10px_15px_-3px_rgba(0,0,0,0.07),0_4px_6px_-2px_rgba(0,0,0,0.05)]\",\r\n  timepickerInlineElements:\r\n    \"flex flex-col min-h-[auto] min-w-[310px] bg-white rounded-[0.6rem] min-[320px]:max-[825px]:landscape:!flex-row min-[320px]:max-[825px]:landscape:rounded-bl-lg min-[320px]:max-[825px]:landscape:min-w-[auto] min-[320px]:max-[825px]:landscape::min-h-[auto] min-[320px]:max-[825px]:landscape:overflow-y-auto justify-around\",\r\n  timepickerInlineHead:\r\n    \"bg-[#3b71ca] dark:bg-zinc-700 h-[100px] rounded-t-lg min-[320px]:max-[825px]:landscape:rounded-tr-none min-[320px]:max-[825px]:landscape:rounded-bl-none min-[320px]:max-[825px]:landscape:p-[10px] min-[320px]:max-[825px]:landscape:pr-[10px] min-[320px]:max-[825px]:landscape:h-auto min-[320px]:max-[825px]:landscape:min-h-[305px] flex flex-row items-center justify-center p-0 rounded-b-lg\",\r\n  timepickerInlineHeadContent:\r\n    \"min-[320px]:max-[825px]:landscape:flex-col flex w-full justify-evenly items-center\",\r\n  timepickerInlineHourWrapper: \"relative h-full !opacity-100\",\r\n  timepickerCurrentMinuteWrapper: \"relative h-full\",\r\n  timepickerInlineIconUp:\r\n    \"absolute text-white -top-[35px] opacity-0 hover:opacity-100 transition-all duration-200 ease-[ease] cursor-pointer -translate-x-1/2 -translate-y-1/2 left-1/2 w-[30px] h-[30px] flex justify-center items-center\",\r\n  timepickerInlineIconSvg: \"h-4 w-4\",\r\n  timepickerInlineCurrentButton:\r\n    \"font-light leading-[1.2] tracking-[-0.00833em] text-white border-none bg-transparent p-0 min-[320px]:max-[825px]:landscape:text-5xl min-[320px]:max-[825px]:landscape:font-normal !opacity-100 cursor-pointer focus:bg-[#00000026] hover:outline-none focus:outline-none text-[2.5rem] hover:bg-[unset]\",\r\n  timepickerInlineIconDown:\r\n    \"absolute text-white -bottom-[47px] opacity-0 hover:opacity-100 transition-all duration-200 ease-[ease] cursor-pointer -translate-x-1/2 -translate-y-1/2 left-1/2 w-[30px] h-[30px] flex justify-center items-center\",\r\n  timepickerInlineDot:\r\n    \"font-light leading-[1.2] tracking-[-0.00833em] opacity-[.54] border-none bg-transparent p-0 text-white min-[320px]:max-[825px]:landscape:text-[3rem] min-[320px]:max-[825px]:landscape:font-normal text-[2.5rem]\",\r\n  timepickerInlineModeWrapper:\r\n    \"flex justify-center text-[18px] text-[#ffffff8a] min-[320px]:max-[825px]:landscape:!justify-around min-[320px]:max-[825px]:landscape:!flex-row\",\r\n  timepickerInlineModeAm:\r\n    \"hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer mr-2 ml-6\",\r\n  timepickerInlineModePm:\r\n    \"hover:bg-[#00000026] hover:outline-none focus:bg-[#00000026] focus:outline-none p-0 bg-transparent border-none text-white opacity-[.54] cursor-pointer\",\r\n  timepickerInlineSubmitButton:\r\n    \"hover:bg-[#00000014] focus:bg-[#00000014] focus:outline-none text-[0.8rem] box-border font-medium leading-[40px] tracking-[.1rem] uppercase border-none bg-transparent [transition:background-color_250ms_cubic-bezier(0.4,0,0.2,1)_0ms,box-shadow_250ms_cubic-bezier(0.4,0,0.2,1)_0ms,border_250ms_cubic-bezier(0.4,0,0.2,1)_0ms] outline-none rounded-[100%] h-[48px] min-w-[48px] inline-block ml-[30px] text-white py-1 px-2 mb-0\",\r\n  timepickerToggleButton:\r\n    \"h-4 w-4 ml-auto absolute outline-none border-none bg-transparent right-1.5 top-1/2 -translate-x-1/2 -translate-y-1/2 transition-all duration-300 ease-[cubic-bezier(0.25,0.1,0.25,1)] cursor-pointer hover:text-[#3b71ca] focus:text-[#3b71ca] dark:hover:text-[#3b71ca] dark:focus:text-[#3b71ca] dark:text-white\",\r\n};\r\n\r\nconst DefaultClassesType = {\r\n  tips: \"string\",\r\n  tipsActive: \"string\",\r\n  tipsDisabled: \"string\",\r\n  transform: \"string\",\r\n  modal: \"string\",\r\n  clockAnimation: \"string\",\r\n  opacity: \"string\",\r\n  timepickerWrapper: \"string\",\r\n  timepickerContainer: \"string\",\r\n  timepickerElements: \"string\",\r\n  timepickerHead: \"string\",\r\n  timepickerHeadContent: \"string\",\r\n  timepickerCurrentWrapper: \"string\",\r\n  timepickerCurrentButtonWrapper: \"string\",\r\n  timepickerCurrentButton: \"string\",\r\n  timepickerDot: \"string\",\r\n  timepickerModeWrapper: \"string\",\r\n  timepickerModeAm: \"string\",\r\n  timepickerModePm: \"string\",\r\n  timepickerClockWrapper: \"string\",\r\n  timepickerClock: \"string\",\r\n  timepickerMiddleDot: \"string\",\r\n  timepickerHandPointer: \"string\",\r\n  timepickerPointerCircle: \"string\",\r\n  timepickerClockInner: \"string\",\r\n  timepickerFooterWrapper: \"string\",\r\n  timepickerFooterButton: \"string\",\r\n  timepickerInlineWrapper: \"string\",\r\n  timepickerInlineContainer: \"string\",\r\n  timepickerInlineElements: \"string\",\r\n  timepickerInlineHead: \"string\",\r\n  timepickerInlineHeadContent: \"string\",\r\n  timepickerInlineHourWrapper: \"string\",\r\n  timepickerCurrentMinuteWrapper: \"string\",\r\n  timepickerInlineIconUp: \"string\",\r\n  timepickerInlineIconSvg: \"string\",\r\n  timepickerInlineCurrentButton: \"string\",\r\n  timepickerInlineIconDown: \"string\",\r\n  timepickerInlineDot: \"string\",\r\n  timepickerInlineModeWrapper: \"string\",\r\n  timepickerInlineModeAm: \"string\",\r\n  timepickerInlineModePm: \"string\",\r\n  timepickerInlineSubmitButton: \"string\",\r\n  timepickerToggleButton: \"string\",\r\n};\r\n\r\n/*\r\n------------------------------------------------------------------------\r\nClass Definition\r\n------------------------------------------------------------------------\r\n*/\r\n\r\nclass Timepicker {\r\n  constructor(element, options = {}, classes) {\r\n    this._element = element;\r\n\r\n    if (this._element) {\r\n      Data.setData(element, DATA_KEY, this);\r\n    }\r\n\r\n    this._document = document;\r\n    this._options = this._getConfig(options);\r\n    this._classes = this._getClasses(classes);\r\n    this._currentTime = null;\r\n    this._toggleButtonId = getUID(\"timepicker-toggle-\");\r\n\r\n    this.hoursArray = [\r\n      \"12\",\r\n      \"1\",\r\n      \"2\",\r\n      \"3\",\r\n      \"4\",\r\n      \"5\",\r\n      \"6\",\r\n      \"7\",\r\n      \"8\",\r\n      \"9\",\r\n      \"10\",\r\n      \"11\",\r\n    ];\r\n    this.innerHours = [\r\n      \"00\",\r\n      \"13\",\r\n      \"14\",\r\n      \"15\",\r\n      \"16\",\r\n      \"17\",\r\n      \"18\",\r\n      \"19\",\r\n      \"20\",\r\n      \"21\",\r\n      \"22\",\r\n      \"23\",\r\n    ];\r\n    this.minutesArray = [\r\n      \"00\",\r\n      \"05\",\r\n      \"10\",\r\n      \"15\",\r\n      \"20\",\r\n      \"25\",\r\n      \"30\",\r\n      \"35\",\r\n      \"40\",\r\n      \"45\",\r\n      \"50\",\r\n      \"55\",\r\n    ];\r\n\r\n    this.input = SelectorEngine.findOne(\"input\", this._element);\r\n    this.dataWithIcon = element.dataset.withIcon;\r\n    this.dataToggle = element.dataset.toggle;\r\n    this.customIcon = SelectorEngine.findOne(\r\n      SELECTOR_ATTR_TIMEPICKER_TOGGLE_BUTTON,\r\n      this._element\r\n    );\r\n\r\n    this._checkToggleButton();\r\n\r\n    this.inputFormatShow = SelectorEngine.findOne(\r\n      SELECTOR_ATTR_TIMEPICKER_FORMAT24,\r\n      this._element\r\n    );\r\n\r\n    this.inputFormat =\r\n      this.inputFormatShow === null\r\n        ? \"\"\r\n        : Object.values(this.inputFormatShow.dataset)[0];\r\n    this.elementToggle = SelectorEngine.findOne(\r\n      SELECTOR_DATA_TE_TOGGLE,\r\n      this._element\r\n    );\r\n    this.toggleElement = Object.values(\r\n      element.querySelector(SELECTOR_DATA_TE_TOGGLE).dataset\r\n    )[0];\r\n\r\n    this._hour = null;\r\n    this._minutes = null;\r\n    this._AM = null;\r\n    this._PM = null;\r\n    this._wrapper = null;\r\n    this._modal = null;\r\n    this._hand = null;\r\n    this._circle = null;\r\n    this._focusTrap = null;\r\n    this._popper = null;\r\n    this._interval = null;\r\n    this._timeoutInterval = null;\r\n\r\n    this._inputValue =\r\n      this._options.defaultTime !== \"\"\r\n        ? this._options.defaultTime\r\n        : this.input.value;\r\n\r\n    if (this._options.format24) {\r\n      this._options.format12 = false;\r\n\r\n      this._currentTime = formatNormalHours(this._inputValue);\r\n    }\r\n\r\n    if (this._options.format12) {\r\n      this._options.format24 = false;\r\n\r\n      this._currentTime = formatToAmPm(this._inputValue);\r\n    }\r\n\r\n    if (this._options.readOnly) {\r\n      this.input.setAttribute(ATTR_READONLY, true);\r\n    }\r\n\r\n    if (this.inputFormat === \"true\" && this.inputFormat !== \"\") {\r\n      this._options.format12 = false;\r\n      this._options.format24 = true;\r\n      this._currentTime = formatNormalHours(this._inputValue);\r\n    }\r\n\r\n    this._animations =\r\n      !window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches &&\r\n      this._options.animations;\r\n\r\n    this.init();\r\n\r\n    this._isHours = true;\r\n    this._isMinutes = false;\r\n    this._isInvalidTimeFormat = false;\r\n    this._isMouseMove = false;\r\n    this._isInner = false;\r\n    this._isAmEnabled = false;\r\n    this._isPmEnabled = false;\r\n\r\n    if (this._options.format12 && !this._options.defaultTime) {\r\n      this._isPmEnabled = true;\r\n    }\r\n\r\n    this._objWithDataOnChange = { degrees: null };\r\n\r\n    this._scrollBar = new ScrollBarHelper();\r\n  }\r\n\r\n  // Getters\r\n\r\n  static get NAME() {\r\n    return NAME;\r\n  }\r\n\r\n  // Public\r\n\r\n  init() {\r\n    const { format12, format24, enableValidation } = this._options;\r\n    let zero;\r\n    let hoursFormat;\r\n    let _amOrPm;\r\n\r\n    this.input.setAttribute(ATTR_TIMEPICKER_INPUT, \"\");\r\n\r\n    if (this._currentTime !== undefined) {\r\n      const { hours, minutes, amOrPm } = this._currentTime;\r\n\r\n      zero = Number(hours) < 10 ? 0 : \"\";\r\n      hoursFormat = `${zero}${Number(hours)}:${minutes}`;\r\n      _amOrPm = amOrPm;\r\n\r\n      if (format12) {\r\n        this.input.value = `${hoursFormat} ${_amOrPm}`;\r\n      } else if (format24) {\r\n        this.input.value = `${hoursFormat}`;\r\n      }\r\n    } else {\r\n      zero = \"\";\r\n      hoursFormat = \"\";\r\n      _amOrPm = \"\";\r\n\r\n      this.input.value = \"\";\r\n    }\r\n\r\n    if (this.input.value.length > 0 && this.input.value !== \"\") {\r\n      this.input.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n      EventHandler.trigger(this.input, \"input\");\r\n    }\r\n\r\n    if (this._options === null && this._element === null) return;\r\n\r\n    if (enableValidation) {\r\n      this._getValidate(\"keydown change blur focus\");\r\n    }\r\n\r\n    this._handleOpen();\r\n    this._listenToToggleKeydown();\r\n  }\r\n\r\n  dispose() {\r\n    this._removeModal();\r\n\r\n    if (this._element !== null) {\r\n      Data.removeData(this._element, DATA_KEY);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this._element = null;\r\n      this._options = null;\r\n      this.input = null;\r\n      this._focusTrap = null;\r\n    }, 350);\r\n\r\n    EventHandler.off(\r\n      this._document,\r\n      \"click\",\r\n      `[data-te-toggle='${this.toggleElement}']`\r\n    );\r\n    EventHandler.off(\r\n      this._element,\r\n      \"keydown\",\r\n      `[data-te-toggle='${this.toggleElement}']`\r\n    );\r\n  }\r\n\r\n  update(options = {}) {\r\n    this._options = this._getConfig({ ...this._options, ...options });\r\n  }\r\n\r\n  // private\r\n\r\n  _checkToggleButton() {\r\n    if (this.customIcon !== null) return;\r\n\r\n    if (this.dataWithIcon !== undefined) {\r\n      this._options.withIcon = null;\r\n\r\n      if (this.dataWithIcon === \"true\") {\r\n        this._appendToggleButton(this._options);\r\n      }\r\n    }\r\n\r\n    if (this._options.withIcon) {\r\n      this._appendToggleButton(this._options);\r\n    }\r\n  }\r\n\r\n  _appendToggleButton() {\r\n    const toggleButton = getToggleButtonTemplate(\r\n      this._options,\r\n      this._toggleButtonId,\r\n      this._classes\r\n    );\r\n\r\n    this.input.insertAdjacentHTML(\"afterend\", toggleButton);\r\n  }\r\n\r\n  _getDomElements() {\r\n    this._hour = SelectorEngine.findOne(`[${ATTR_TIMEPICKER_HOUR}]`);\r\n    this._minutes = SelectorEngine.findOne(`[${ATTR_TIMEPICKER_MINUTE}]`);\r\n    this._AM = SelectorEngine.findOne(SELECTOR_ATTR_TIMEPICKER_AM);\r\n    this._PM = SelectorEngine.findOne(SELECTOR_ATTR_TIMEPICKER_PM);\r\n    this._wrapper = SelectorEngine.findOne(`[${ATTR_TIMEPICKER_WRAPPER}]`);\r\n    this._modal = SelectorEngine.findOne(`[${ATTR_TIMEPICKER_MODAL}]`);\r\n    this._hand = SelectorEngine.findOne(`[${ATTR_TIMEPICKER_HAND_POINTER}]`);\r\n    this._circle = SelectorEngine.findOne(`[${ATTR_TIMEPICKER_CIRCLE}]`);\r\n    this._clock = SelectorEngine.findOne(`[${ATTR_TIMEPICKER_CLOCK}]`);\r\n    this._clockInner = SelectorEngine.findOne(\r\n      `[${ATTR_TIMEPICKER_CLOCK_INNER}]`\r\n    );\r\n  }\r\n\r\n  _handlerMaxMinHoursOptions(\r\n    degrees,\r\n    maxHour,\r\n    minHour,\r\n    maxFormat,\r\n    minFormat,\r\n    e\r\n  ) {\r\n    if (!maxHour && !minHour) return true;\r\n\r\n    const { format24, format12, disablePast, disableFuture } = this._options;\r\n    const { _isAmEnabled, _isPmEnabled } = this;\r\n    const key = e.keyCode;\r\n\r\n    const _isMouseOnInnerClock =\r\n      e.target.hasAttribute(ATTR_TIMEPICKER_CLOCK_INNER) ||\r\n      e.target.hasAttribute(ATTR_TIMEPICKER_INNER_HOURS) ||\r\n      e.target.hasAttribute(ATTR_TIMEPICKER_TIPS_INNER_ELEMENT);\r\n\r\n    minHour = setMinTime(minHour, disablePast, format12);\r\n    maxHour = setMaxTime(maxHour, disableFuture, format12);\r\n    typeof maxHour !== \"number\" && (maxHour = takeValue(maxHour, false)[0]);\r\n\r\n    const maxHourDegrees = maxHour !== \"\" ? maxHour * 30 : \"\";\r\n    const minHourDegrees = minHour !== \"\" ? minHour * 30 : \"\";\r\n\r\n    if (degrees < 0) {\r\n      degrees = 360 + degrees;\r\n    }\r\n\r\n    degrees = degrees === 360 ? 0 : degrees;\r\n\r\n    const _handleKeyboardEvents = () => {\r\n      const tips = document.querySelectorAll(\r\n        `[${ATTR_TIMEPICKER_TIPS_ELEMENT}]`\r\n      );\r\n      const innerTips = document.querySelectorAll(\r\n        `[${ATTR_TIMEPICKER_TIPS_INNER_ELEMENT}]`\r\n      );\r\n\r\n      const currentHour = _convertHourToNumber(this._hour.innerText);\r\n      let nextHourTip;\r\n      let numberToAdd;\r\n      let nextHour;\r\n\r\n      if (key === UP_ARROW) {\r\n        numberToAdd = 1;\r\n      } else if (key === DOWN_ARROW) {\r\n        numberToAdd = -1;\r\n      }\r\n\r\n      if (currentHour === 12 && key === UP_ARROW) {\r\n        nextHour = 1;\r\n      } else if (currentHour === 0 && key === UP_ARROW) {\r\n        nextHour = 13;\r\n      } else if (currentHour === 0 && key === DOWN_ARROW) {\r\n        nextHour = 23;\r\n      } else if (currentHour === 13 && key === DOWN_ARROW) {\r\n        nextHour = 0;\r\n      } else if (currentHour === 1 && key === DOWN_ARROW) {\r\n        nextHour = 12;\r\n      } else {\r\n        nextHour = currentHour + numberToAdd;\r\n      }\r\n\r\n      tips.forEach((tip) => {\r\n        if (Number(tip.textContent) === nextHour) {\r\n          nextHourTip = tip;\r\n        }\r\n      });\r\n      innerTips.forEach((innerTip) => {\r\n        if (Number(innerTip.textContent) === nextHour) {\r\n          nextHourTip = innerTip;\r\n        }\r\n      });\r\n\r\n      return !nextHourTip.parentElement.hasAttribute(ATTR_TIMEPICKER_DISABLED);\r\n    };\r\n\r\n    const _handle24FormatMouseEvents = () => {\r\n      const minInnerHourDegrees =\r\n        minHour !== \"\" && minHour > 12 ? (minHour - 12) * 30 : \"\";\r\n      const maxInnerHourDegrees =\r\n        maxHour !== \"\" && maxHour > 12 ? (maxHour - 12) * 30 : \"\";\r\n\r\n      if (\r\n        (minInnerHourDegrees && degrees < minInnerHourDegrees) ||\r\n        (maxInnerHourDegrees && degrees > maxInnerHourDegrees) ||\r\n        (maxHour && maxHour < 12)\r\n      ) {\r\n        return;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    if (format24 && e.type !== \"keydown\" && _isMouseOnInnerClock) {\r\n      return _handle24FormatMouseEvents();\r\n    }\r\n    if (e.type === \"keydown\") {\r\n      return _handleKeyboardEvents(e);\r\n    }\r\n\r\n    const minFormatAndCurrentFormatEqual =\r\n      !minFormat ||\r\n      (minFormat === \"PM\" && _isPmEnabled) ||\r\n      (minHour !== \"\" && minFormat === \"AM\" && _isAmEnabled);\r\n\r\n    const maxFormatAndCurrentFormatEqual =\r\n      !maxFormat ||\r\n      (maxFormat === \"PM\" && _isPmEnabled) ||\r\n      (maxHour !== \"\" && maxFormat === \"AM\" && _isAmEnabled);\r\n\r\n    const isMinHourValid = () => {\r\n      const minDegrees =\r\n        minHourDegrees === 360 && format12 ? 0 : minHourDegrees;\r\n      if (!minHour) {\r\n        return true;\r\n      } else if (\r\n        (minFormat === \"PM\" && _isAmEnabled) ||\r\n        (minFormatAndCurrentFormatEqual && degrees < minDegrees)\r\n      ) {\r\n        return;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    const isMaxHourValid = () => {\r\n      const maxDegrees =\r\n        maxHourDegrees === 360 && format12 ? 0 : maxHourDegrees;\r\n      if (!maxHour) {\r\n        return true;\r\n      } else if (\r\n        (maxFormat === \"AM\" && _isPmEnabled) ||\r\n        (maxFormatAndCurrentFormatEqual && degrees > maxDegrees)\r\n      ) {\r\n        return;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    return isMinHourValid() && isMaxHourValid();\r\n  }\r\n\r\n  _handleKeyboard() {\r\n    EventHandler.on(this._document, EVENT_KEYDOWN_DATA_API, \"\", (e) => {\r\n      let hour;\r\n      let minute;\r\n      let innerHour;\r\n      const {\r\n        increment,\r\n        maxTime,\r\n        minTime,\r\n        format12,\r\n        disablePast,\r\n        disableFuture,\r\n      } = this._options;\r\n\r\n      let minHour = takeValue(minTime, false)[0];\r\n      let maxHour = takeValue(maxTime, false)[0];\r\n      const minFormat = takeValue(minTime, false)[2];\r\n      const maxFormat = takeValue(maxTime, false)[2];\r\n\r\n      minHour = setMinTime(minHour, disablePast, format12);\r\n      maxHour = setMaxTime(maxHour, disableFuture, format12);\r\n\r\n      typeof maxHour !== \"number\" && (maxHour = takeValue(maxHour, false)[0]);\r\n\r\n      const hoursView =\r\n        SelectorEngine.findOne(`[${ATTR_TIMEPICKER_TIPS_MINUTES}]`) === null;\r\n      const innerHoursExist =\r\n        SelectorEngine.findOne(`[${ATTR_TIMEPICKER_INNER_HOURS}]`) !== null;\r\n\r\n      const degrees = Number(this._hand.style.transform.replace(/[^\\d-]/g, \"\"));\r\n\r\n      const allTipsMinutes = SelectorEngine.find(\r\n        `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`,\r\n        this._modal\r\n      );\r\n      const allTipsHours = SelectorEngine.find(\r\n        `[${ATTR_TIMEPICKER_TIPS_HOURS}]`,\r\n        this._modal\r\n      );\r\n      const allInnerTips = SelectorEngine.find(\r\n        `[${ATTR_TIMEPICKER_INNER_HOURS}]`,\r\n        this._modal\r\n      );\r\n\r\n      let hourTime = this._makeHourDegrees(e.target, degrees, hour).hour;\r\n      const { degrees: hourObjDegrees, addDegrees } = this._makeHourDegrees(\r\n        e.target,\r\n        degrees,\r\n        hour\r\n      );\r\n\r\n      let { minute: minHourMinutes, degrees: minObjDegrees } =\r\n        this._makeMinutesDegrees(degrees, minute);\r\n      const addMinDegrees = this._makeMinutesDegrees(\r\n        degrees,\r\n        minute\r\n      ).addDegrees;\r\n\r\n      let { hour: innerHourDegrees } = this._makeInnerHoursDegrees(\r\n        degrees,\r\n        innerHour\r\n      );\r\n\r\n      if (e.keyCode === ESCAPE) {\r\n        const cancelBtn = SelectorEngine.findOne(\r\n          `[${ATTR_TIMEPICKER_BUTTON_CANCEL}]`,\r\n          this._modal\r\n        );\r\n        EventHandler.trigger(cancelBtn, \"click\");\r\n      } else if (hoursView) {\r\n        if (innerHoursExist) {\r\n          if (e.keyCode === RIGHT_ARROW) {\r\n            this._isInner = false;\r\n            Manipulator.addStyle(this._hand, {\r\n              height: \"calc(40% + 1px)\",\r\n            });\r\n            this._hour.textContent = this._setHourOrMinute(\r\n              hourTime > 12 ? 1 : hourTime\r\n            );\r\n            this._toggleClassActive(this.hoursArray, this._hour, allTipsHours);\r\n            this._toggleClassActive(this.innerHours, this._hour, allInnerTips);\r\n          }\r\n\r\n          if (e.keyCode === LEFT_ARROW) {\r\n            this._isInner = true;\r\n            Manipulator.addStyle(this._hand, {\r\n              height: \"21.5%\",\r\n            });\r\n\r\n            this._hour.textContent = this._setHourOrMinute(\r\n              innerHourDegrees >= 24 || innerHourDegrees === \"00\"\r\n                ? 0\r\n                : innerHourDegrees\r\n            );\r\n            this._toggleClassActive(this.innerHours, this._hour, allInnerTips);\r\n            this._toggleClassActive(\r\n              this.hoursArray,\r\n              this._hour - 1,\r\n              allTipsHours\r\n            );\r\n          }\r\n        }\r\n        if (e.keyCode === UP_ARROW) {\r\n          const isNextHourValid = this._handlerMaxMinHoursOptions(\r\n            hourObjDegrees + 30,\r\n            maxHour,\r\n            minHour,\r\n            maxFormat,\r\n            minFormat,\r\n            e\r\n          );\r\n\r\n          if (!isNextHourValid) return;\r\n\r\n          Manipulator.addStyle(this._hand, {\r\n            transform: `rotateZ(${hourObjDegrees + addDegrees}deg)`,\r\n          });\r\n\r\n          if (this._isInner) {\r\n            innerHourDegrees += 1;\r\n\r\n            if (innerHourDegrees === 24) {\r\n              innerHourDegrees = 0;\r\n            } else if (innerHourDegrees === 25 || innerHourDegrees === \"001\") {\r\n              innerHourDegrees = 13;\r\n            }\r\n\r\n            this._hour.textContent = this._setHourOrMinute(innerHourDegrees);\r\n            this._toggleClassActive(this.innerHours, this._hour, allInnerTips);\r\n          } else {\r\n            hourTime += 1;\r\n            this._hour.textContent = this._setHourOrMinute(\r\n              hourTime > 12 ? 1 : hourTime\r\n            );\r\n            this._toggleClassActive(this.hoursArray, this._hour, allTipsHours);\r\n          }\r\n        }\r\n        if (e.keyCode === DOWN_ARROW) {\r\n          const isNextHourValid = this._handlerMaxMinHoursOptions(\r\n            hourObjDegrees - 30,\r\n            maxHour,\r\n            minHour,\r\n            maxFormat,\r\n            minFormat,\r\n            e\r\n          );\r\n\r\n          if (!isNextHourValid) return;\r\n\r\n          Manipulator.addStyle(this._hand, {\r\n            transform: `rotateZ(${hourObjDegrees - addDegrees}deg)`,\r\n          });\r\n\r\n          if (this._isInner) {\r\n            innerHourDegrees -= 1;\r\n\r\n            if (innerHourDegrees === 12) {\r\n              innerHourDegrees = 0;\r\n            } else if (innerHourDegrees === -1) {\r\n              innerHourDegrees = 23;\r\n            }\r\n\r\n            this._hour.textContent = this._setHourOrMinute(innerHourDegrees);\r\n            this._toggleClassActive(this.innerHours, this._hour, allInnerTips);\r\n          } else {\r\n            hourTime -= 1;\r\n            this._hour.textContent = this._setHourOrMinute(\r\n              hourTime === 0 ? 12 : hourTime\r\n            );\r\n            this._toggleClassActive(this.hoursArray, this._hour, allTipsHours);\r\n          }\r\n        }\r\n      } else {\r\n        if (e.keyCode === UP_ARROW) {\r\n          minObjDegrees += addMinDegrees;\r\n          Manipulator.addStyle(this._hand, {\r\n            transform: `rotateZ(${minObjDegrees}deg)`,\r\n          });\r\n          minHourMinutes += 1;\r\n          if (increment) {\r\n            minHourMinutes += 4;\r\n\r\n            if (minHourMinutes === \"0014\") {\r\n              minHourMinutes = 5;\r\n            }\r\n          }\r\n\r\n          this._minutes.textContent = this._setHourOrMinute(\r\n            minHourMinutes > 59 ? 0 : minHourMinutes\r\n          );\r\n          this._toggleClassActive(\r\n            this.minutesArray,\r\n            this._minutes,\r\n            allTipsMinutes\r\n          );\r\n          this._toggleBackgroundColorCircle(\r\n            `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`\r\n          );\r\n        }\r\n        if (e.keyCode === DOWN_ARROW) {\r\n          minObjDegrees -= addMinDegrees;\r\n          Manipulator.addStyle(this._hand, {\r\n            transform: `rotateZ(${minObjDegrees}deg)`,\r\n          });\r\n          if (increment) {\r\n            minHourMinutes -= 5;\r\n          } else {\r\n            minHourMinutes -= 1;\r\n          }\r\n\r\n          if (minHourMinutes === -1) {\r\n            minHourMinutes = 59;\r\n          } else if (minHourMinutes === -5) {\r\n            minHourMinutes = 55;\r\n          }\r\n\r\n          this._minutes.textContent = this._setHourOrMinute(minHourMinutes);\r\n          this._toggleClassActive(\r\n            this.minutesArray,\r\n            this._minutes,\r\n            allTipsMinutes\r\n          );\r\n          this._toggleBackgroundColorCircle(\r\n            `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`\r\n          );\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  _setActiveClassToTipsOnOpen(hour, ...rest) {\r\n    if (this._isInvalidTimeFormat) return;\r\n\r\n    if (!this._options.format24) {\r\n      [...rest].filter((e) => {\r\n        if (e === \"PM\") {\r\n          Manipulator.addClass(this._PM, this._classes.opacity);\r\n          this._PM.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n        } else if (e === \"AM\") {\r\n          Manipulator.addClass(this._AM, this._classes.opacity);\r\n          this._AM.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n        } else {\r\n          Manipulator.removeClass(this._AM, this._classes.opacity);\r\n          Manipulator.removeClass(this._PM, this._classes.opacity);\r\n          this._AM.removeAttribute(ATTR_TIMEPICKER_ACTIVE);\r\n          this._PM.removeAttribute(ATTR_TIMEPICKER_ACTIVE);\r\n        }\r\n\r\n        return e;\r\n      });\r\n\r\n      const allTipsHours = SelectorEngine.find(\r\n        `[${ATTR_TIMEPICKER_TIPS_HOURS}]`,\r\n        this._modal\r\n      );\r\n      this._addActiveClassToTip(allTipsHours, hour);\r\n    } else {\r\n      const allTipsHours = SelectorEngine.find(\r\n        `[${ATTR_TIMEPICKER_TIPS_HOURS}]`,\r\n        this._modal\r\n      );\r\n      const allInnerTips = SelectorEngine.find(\r\n        `[${ATTR_TIMEPICKER_INNER_HOURS}]`,\r\n        this._modal\r\n      );\r\n\r\n      this._addActiveClassToTip(allTipsHours, hour);\r\n      this._addActiveClassToTip(allInnerTips, hour);\r\n    }\r\n  }\r\n\r\n  _setTipsAndTimesDependOnInputValue(hour, minute) {\r\n    const { inline, format12 } = this._options;\r\n\r\n    if (!this._isInvalidTimeFormat) {\r\n      const rotateDegrees = hour > 12 ? hour * 30 - 360 : hour * 30;\r\n      this._hour.textContent = hour;\r\n      this._minutes.textContent = minute;\r\n\r\n      if (!inline) {\r\n        Manipulator.addStyle(this._hand, {\r\n          transform: `rotateZ(${rotateDegrees}deg)`,\r\n        });\r\n        Manipulator.addStyle(this._circle, {\r\n          backgroundColor: \"#1976d2\",\r\n        });\r\n\r\n        if (Number(hour) > 12 || hour === \"00\") {\r\n          Manipulator.addStyle(this._hand, {\r\n            height: \"21.5%\",\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      this._hour.textContent = \"12\";\r\n      this._minutes.textContent = \"00\";\r\n\r\n      if (!inline) {\r\n        Manipulator.addStyle(this._hand, {\r\n          transform: \"rotateZ(0deg)\",\r\n        });\r\n      }\r\n      if (format12) {\r\n        Manipulator.addClass(this._PM, this._classes.opacity);\r\n        this._PM.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n      }\r\n    }\r\n  }\r\n\r\n  _listenToToggleKeydown() {\r\n    EventHandler.on(\r\n      this._element,\r\n      \"keydown\",\r\n      `[data-te-toggle='${this.toggleElement}']`,\r\n      (e) => {\r\n        if (e.keyCode === ENTER) {\r\n          e.preventDefault();\r\n          EventHandler.trigger(this.elementToggle, \"click\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleOpen() {\r\n    const container = this._getContainer();\r\n    EventHandlerMulti.on(\r\n      this._element,\r\n      \"click\",\r\n      `[data-te-toggle='${this.toggleElement}']`,\r\n      (e) => {\r\n        if (this._options === null) return;\r\n\r\n        // Fix for input with open, if is not for settimeout input has incorrent jumping label\r\n        const fixForInput =\r\n          Manipulator.getDataAttribute(this.input, \"toggle\") !== null ? 200 : 0;\r\n\r\n        setTimeout(() => {\r\n          Manipulator.addStyle(this.elementToggle, {\r\n            pointerEvents: \"none\",\r\n          });\r\n\r\n          this.elementToggle.blur();\r\n\r\n          let checkInputValue;\r\n\r\n          if (takeValue(this.input)[0] === \"\") {\r\n            checkInputValue = [\"12\", \"00\", \"PM\"];\r\n          } else {\r\n            checkInputValue = takeValue(this.input);\r\n          }\r\n\r\n          const { modalID, inline, format12 } = this._options;\r\n          const [hour, minute, format] = checkInputValue;\r\n          const div = element(\"div\");\r\n\r\n          if (Number(hour) > 12 || hour === \"00\") {\r\n            this._isInner = true;\r\n          }\r\n\r\n          this.input.blur();\r\n          e.target.blur();\r\n\r\n          div.innerHTML = getTimepickerTemplate(this._options, this._classes);\r\n          Manipulator.addClass(div, this._classes.modal);\r\n          div.setAttribute(ATTR_TIMEPICKER_MODAL, \"\");\r\n\r\n          div.setAttribute(\"role\", \"dialog\");\r\n          div.setAttribute(\"tabIndex\", \"-1\");\r\n          div.setAttribute(\"id\", modalID);\r\n\r\n          if (!inline) {\r\n            container.appendChild(div);\r\n            this._scrollBar.hide();\r\n          } else {\r\n            this._popper = createPopper(this.input, div, {\r\n              placement: \"bottom-start\",\r\n            });\r\n\r\n            container.appendChild(div);\r\n          }\r\n\r\n          this._getDomElements();\r\n          if (this._animations) {\r\n            this._toggleBackdropAnimation();\r\n          } else {\r\n            Manipulator.addClass(this._wrapper, this._classes.opacity);\r\n          }\r\n          this._setActiveClassToTipsOnOpen(hour, minute, format);\r\n          this._appendTimes();\r\n          this._setActiveClassToTipsOnOpen(hour, minute, format);\r\n          this._setTipsAndTimesDependOnInputValue(hour, minute);\r\n\r\n          if (this.input.value === \"\") {\r\n            const allTipsHours = SelectorEngine.find(\r\n              `[${ATTR_TIMEPICKER_TIPS_HOURS}]`,\r\n              this._modal\r\n            );\r\n\r\n            if (format12) {\r\n              Manipulator.addClass(this._PM, this._classes.opacity);\r\n              this._PM.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n            }\r\n\r\n            this._hour.textContent = \"12\";\r\n            this._minutes.textContent = \"00\";\r\n            this._addActiveClassToTip(\r\n              allTipsHours,\r\n              Number(this._hour.textContent)\r\n            );\r\n          }\r\n\r\n          this._handleSwitchTimeMode();\r\n          this._handleOkButton();\r\n          this._handleClose();\r\n\r\n          if (inline) {\r\n            this._handleHoverInlineBtn();\r\n            this._handleDocumentClickInline();\r\n            this._handleInlineClicks();\r\n          } else {\r\n            this._handleSwitchHourMinute();\r\n            this._handleClockClick();\r\n            this._handleKeyboard();\r\n\r\n            // initial opacity on hour/minute mode fix\r\n            const initActive = document.querySelector(\r\n              `${SELECTOR_ATTR_TIMEPICKER_CURRENT}[${ATTR_TIMEPICKER_ACTIVE}]`\r\n            );\r\n            Manipulator.addClass(initActive, this._classes.opacity);\r\n\r\n            Manipulator.addStyle(this._hour, {\r\n              pointerEvents: \"none\",\r\n            });\r\n            Manipulator.addStyle(this._minutes, {\r\n              pointerEvents: \"\",\r\n            });\r\n          }\r\n\r\n          this._focusTrap = new FocusTrap(this._wrapper, {\r\n            event: \"keydown\",\r\n            condition: ({ key }) => key === \"Tab\",\r\n          });\r\n          this._focusTrap.trap();\r\n        }, fixForInput);\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleInlineClicks() {\r\n    let selectedHour;\r\n    let minuteNumber;\r\n    const countMinutes = (count) => {\r\n      let minutes = count;\r\n\r\n      if (minutes > 59) {\r\n        minutes = 0;\r\n      } else if (minutes < 0) {\r\n        minutes = 59;\r\n      }\r\n\r\n      return minutes;\r\n    };\r\n\r\n    const countHours = (count) => {\r\n      let hour = count;\r\n\r\n      if (this._options.format24) {\r\n        if (hour > 24) {\r\n          hour = 1;\r\n        } else if (hour < 0) {\r\n          hour = 23;\r\n        }\r\n\r\n        if (hour > 23) {\r\n          hour = 0;\r\n        }\r\n      } else {\r\n        if (hour > 12) {\r\n          hour = 1;\r\n        } else if (hour < 1) {\r\n          hour = 12;\r\n        }\r\n\r\n        if (hour > 12) {\r\n          hour = 1;\r\n        }\r\n      }\r\n\r\n      return hour;\r\n    };\r\n\r\n    const incrementHours = (hour) => {\r\n      const counteredNumber = countHours(hour);\r\n      this._hour.textContent = this._setHourOrMinute(counteredNumber);\r\n    };\r\n    const incrementMinutes = (minutes) => {\r\n      const counteredNumber = countMinutes(minutes);\r\n      this._minutes.textContent = this._setHourOrMinute(counteredNumber);\r\n    };\r\n\r\n    const addHours = () => {\r\n      selectedHour = countHours(selectedHour) + 1;\r\n      incrementHours(selectedHour);\r\n    };\r\n    const addMinutes = () => {\r\n      minuteNumber = countMinutes(minuteNumber) + 1;\r\n      incrementMinutes(minuteNumber);\r\n    };\r\n\r\n    const subHours = () => {\r\n      selectedHour = countHours(selectedHour) - 1;\r\n      incrementHours(selectedHour);\r\n    };\r\n\r\n    const subMinutes = () => {\r\n      minuteNumber = countMinutes(minuteNumber) - 1;\r\n      incrementMinutes(minuteNumber);\r\n    };\r\n\r\n    const _clearAsyncs = () => {\r\n      clearInterval(this._interval);\r\n      clearTimeout(this._timeoutInterval);\r\n    };\r\n\r\n    const _clearAndSetThisInterval = (addHoursOrAddMinutes) => {\r\n      _clearAsyncs();\r\n      this._timeoutInterval = setTimeout(() => {\r\n        this._interval = setInterval(addHoursOrAddMinutes, 100);\r\n      }, 500);\r\n    };\r\n    EventHandlerMulti.on(\r\n      this._modal,\r\n      \"click mousedown mouseup touchstart touchend contextmenu\",\r\n      `[${ATTR_TIMEPICKER_ICON_UP}], [${ATTR_TIMEPICKER_ICON_DOWN}]`,\r\n      (e) => {\r\n        selectedHour = Number(this._hour.textContent);\r\n        minuteNumber = Number(this._minutes.textContent);\r\n        const { target, type } = e;\r\n        const isEventTypeMousedownOrTouchstart =\r\n          type === \"mousedown\" || type === \"touchstart\";\r\n\r\n        if (target.closest(`[${ATTR_TIMEPICKER_ICON_UP}]`)) {\r\n          if (\r\n            target\r\n              .closest(`[${ATTR_TIMEPICKER_ICON_UP}]`)\r\n              .parentNode.hasAttribute(ATTR_TIMEPICKER_ICONS_HOUR_INLINE)\r\n          ) {\r\n            if (isEventTypeMousedownOrTouchstart) {\r\n              _clearAndSetThisInterval(addHours);\r\n            } else if (\r\n              type === \"mouseup\" ||\r\n              type === \"touchend\" ||\r\n              type === \"contextmenu\"\r\n            ) {\r\n              _clearAsyncs();\r\n            } else {\r\n              addHours();\r\n            }\r\n          } else {\r\n            // eslint-disable-next-line no-lonely-if\r\n            if (isEventTypeMousedownOrTouchstart) {\r\n              _clearAndSetThisInterval(addMinutes);\r\n            } else if (\r\n              type === \"mouseup\" ||\r\n              type === \"touchend\" ||\r\n              type === \"contextmenu\"\r\n            ) {\r\n              _clearAsyncs();\r\n            } else {\r\n              addMinutes();\r\n            }\r\n          }\r\n        } else if (target.closest(`[${ATTR_TIMEPICKER_ICON_DOWN}]`)) {\r\n          if (\r\n            target\r\n              .closest(`[${ATTR_TIMEPICKER_ICON_DOWN}]`)\r\n              .parentNode.hasAttribute(ATTR_TIMEPICKER_ICONS_HOUR_INLINE)\r\n          ) {\r\n            if (isEventTypeMousedownOrTouchstart) {\r\n              _clearAndSetThisInterval(subHours);\r\n            } else if (type === \"mouseup\" || type === \"touchend\") {\r\n              _clearAsyncs();\r\n            } else {\r\n              subHours();\r\n            }\r\n          } else {\r\n            // eslint-disable-next-line no-lonely-if\r\n            if (isEventTypeMousedownOrTouchstart) {\r\n              _clearAndSetThisInterval(subMinutes);\r\n            } else if (type === \"mouseup\" || type === \"touchend\") {\r\n              _clearAsyncs();\r\n            } else {\r\n              subMinutes();\r\n            }\r\n          }\r\n        }\r\n      }\r\n    );\r\n    EventHandler.on(window, EVENT_KEYDOWN_DATA_API, (e) => {\r\n      const key = e.code;\r\n      const isHourBtnFocused =\r\n        document.activeElement.hasAttribute(ATTR_TIMEPICKER_HOUR);\r\n      const isMinuteBtnFocused = document.activeElement.hasAttribute(\r\n        ATTR_TIMEPICKER_MINUTE\r\n      );\r\n      const isBodyFocused = document.activeElement === document.body;\r\n\r\n      selectedHour = Number(this._hour.textContent);\r\n      minuteNumber = Number(this._minutes.textContent);\r\n\r\n      switch (key) {\r\n        case \"ArrowUp\":\r\n          e.preventDefault();\r\n          if (isBodyFocused || isHourBtnFocused) {\r\n            this._hour.focus();\r\n            addHours();\r\n          } else if (isMinuteBtnFocused) {\r\n            addMinutes();\r\n          }\r\n          break;\r\n        case \"ArrowDown\":\r\n          e.preventDefault();\r\n          if (isBodyFocused || isHourBtnFocused) {\r\n            this._hour.focus();\r\n            subHours();\r\n          } else if (isMinuteBtnFocused) {\r\n            subMinutes();\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  _handleClose() {\r\n    EventHandler.on(\r\n      this._modal,\r\n      \"click\",\r\n      `[${ATTR_TIMEPICKER_WRAPPER}], [${ATTR_TIMEPICKER_BUTTON_CANCEL}], [${ATTR_TIMEPICKER_BUTTON_CLEAR}]`,\r\n      ({ target }) => {\r\n        const { closeModalOnBackdropClick } = this._options;\r\n\r\n        const runRemoveFunction = () => {\r\n          Manipulator.addStyle(this.elementToggle, {\r\n            pointerEvents: \"auto\",\r\n          });\r\n\r\n          if (this._animations) {\r\n            this._toggleBackdropAnimation(true);\r\n          }\r\n\r\n          this._removeModal();\r\n          this._focusTrap?.disable();\r\n          this._focusTrap = null;\r\n\r\n          if (this.elementToggle) {\r\n            this.elementToggle.focus();\r\n          } else if (this.input) {\r\n            this.input.focus();\r\n          }\r\n        };\r\n\r\n        if (target.hasAttribute(ATTR_TIMEPICKER_BUTTON_CLEAR)) {\r\n          this._toggleAmPm(\"PM\");\r\n          this.input.value = \"\";\r\n          this.input.removeAttribute(ATTR_TIMEPICKER_ACTIVE);\r\n\r\n          let checkInputValue;\r\n\r\n          if (takeValue(this.input)[0] === \"\") {\r\n            checkInputValue = [\"12\", \"00\", \"PM\"];\r\n          } else {\r\n            checkInputValue = takeValue(this.input);\r\n          }\r\n\r\n          const [hour, minute, format] = checkInputValue;\r\n          this._setTipsAndTimesDependOnInputValue(\"12\", \"00\");\r\n          this._setActiveClassToTipsOnOpen(hour, minute, format);\r\n          this._hour.click();\r\n        } else if (\r\n          target.hasAttribute(ATTR_TIMEPICKER_BUTTON_CANCEL) ||\r\n          target.hasAttribute(ATTR_TIMEPICKER_BUTTON_SUBMIT)\r\n        ) {\r\n          runRemoveFunction();\r\n        } else if (\r\n          target.hasAttribute(ATTR_TIMEPICKER_WRAPPER) &&\r\n          closeModalOnBackdropClick\r\n        ) {\r\n          runRemoveFunction();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  showValueInput() {\r\n    return this.input.value;\r\n  }\r\n\r\n  _handleOkButton() {\r\n    EventHandlerMulti.on(\r\n      this._modal,\r\n      \"click\",\r\n      `[${ATTR_TIMEPICKER_BUTTON_SUBMIT}]`,\r\n      () => {\r\n        let { maxTime, minTime } = this._options;\r\n        const {\r\n          format12,\r\n          format24,\r\n          readOnly,\r\n          focusInputAfterApprove,\r\n          disablePast,\r\n          disableFuture,\r\n        } = this._options;\r\n        const hourModeActive = this._document.querySelector(\r\n          `${SELECTOR_ATTR_TIMEPICKER_HOUR_MODE}[${ATTR_TIMEPICKER_ACTIVE}]`\r\n        );\r\n\r\n        const currentValue = `${this._hour.textContent}:${this._minutes.textContent}`;\r\n        const selectedHourContent = Number(this._hour.textContent);\r\n        const selectedHour =\r\n          selectedHourContent === 12 && format12 ? 0 : selectedHourContent;\r\n        const selectedMinutes = Number(this._minutes.textContent);\r\n\r\n        minTime = setMinTime(minTime, disablePast, format12);\r\n        maxTime = setMaxTime(maxTime, disableFuture, format12);\r\n\r\n        let [maxTimeHour, maxTimeMinutes, maxTimeFormat] = takeValue(\r\n          maxTime,\r\n          false\r\n        );\r\n        let [minTimeHour, minTimeMinutes, minTimeFormat] = takeValue(\r\n          minTime,\r\n          false\r\n        );\r\n\r\n        minTimeHour = minTimeHour === \"12\" && format12 ? \"00\" : minTimeHour;\r\n        maxTimeHour = maxTimeHour === \"12\" && format12 ? \"00\" : maxTimeHour;\r\n\r\n        const isHourLessThanMinHour = selectedHour < Number(minTimeHour);\r\n        const isHourGreaterThanMaxHour = selectedHour > Number(maxTimeHour);\r\n        let maxFormatAndCurrentFormatEqual = true;\r\n        if (hourModeActive) {\r\n          maxFormatAndCurrentFormatEqual =\r\n            maxTimeFormat === hourModeActive.textContent;\r\n        }\r\n\r\n        let minFormatAndCurrentFormatEqual = true;\r\n        if (hourModeActive) {\r\n          minFormatAndCurrentFormatEqual =\r\n            minTimeFormat === hourModeActive.textContent;\r\n        }\r\n\r\n        const hourEqualToMaxAndMinutesGreaterThanMax =\r\n          selectedMinutes > maxTimeMinutes &&\r\n          selectedHour === Number(maxTimeHour);\r\n        const hourEqualToMinAndMinutesLessThanMin =\r\n          selectedMinutes < minTimeMinutes &&\r\n          selectedHour === Number(minTimeHour);\r\n\r\n        this.input.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n        Manipulator.addStyle(this.elementToggle, {\r\n          pointerEvents: \"auto\",\r\n        });\r\n\r\n        if (maxTime !== \"\") {\r\n          if (\r\n            maxFormatAndCurrentFormatEqual &&\r\n            (isHourGreaterThanMaxHour || hourEqualToMaxAndMinutesGreaterThanMax)\r\n          ) {\r\n            return;\r\n          } else if (\r\n            maxTimeFormat === \"AM\" &&\r\n            hourModeActive.textContent === \"PM\"\r\n          ) {\r\n            return;\r\n          }\r\n        }\r\n        if (minTime !== \"\") {\r\n          if (\r\n            minFormatAndCurrentFormatEqual &&\r\n            (isHourLessThanMinHour || hourEqualToMinAndMinutesLessThanMin)\r\n          ) {\r\n            return;\r\n          }\r\n          if (minTimeFormat === \"PM\" && hourModeActive.textContent === \"AM\") {\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (\r\n          checkValueBeforeAccept(\r\n            this._options,\r\n            this.input,\r\n            this._hour.textContent\r\n          ) === undefined\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        if (this._isInvalidTimeFormat) {\r\n          this.input.removeAttribute(ATTR_TIMEPICKER_IS_INVALID);\r\n        }\r\n\r\n        if (!readOnly && focusInputAfterApprove) {\r\n          this.input.focus();\r\n        }\r\n\r\n        Manipulator.addStyle(this.elementToggle, {\r\n          pointerEvents: \"auto\",\r\n        });\r\n\r\n        if (format24) {\r\n          this.input.value = currentValue;\r\n        } else if (hourModeActive === null) {\r\n          this.input.value = `${currentValue} PM`;\r\n        } else {\r\n          this.input.value = `${currentValue} ${hourModeActive.textContent}`;\r\n        }\r\n\r\n        if (this._animations) {\r\n          this._toggleBackdropAnimation(true);\r\n        }\r\n\r\n        this._removeModal();\r\n\r\n        EventHandler.trigger(this.input, \"input.te.timepicker\");\r\n        EventHandler.trigger(this.input, \"input\");\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleHoverInlineBtn() {\r\n    EventHandlerMulti.on(\r\n      this._modal,\r\n      \"mouseover mouseleave\",\r\n      `[${ATTR_TIMEPICKER_CURRENT_INLINE}]`,\r\n      ({ type, target }) => {\r\n        const allIconsInlineHour = SelectorEngine.find(\r\n          `[${ATTR_TIMEPICKER_ICON_INLINE_HOUR}]`,\r\n          this._modal\r\n        );\r\n        const allIconsInlineMinute = SelectorEngine.find(\r\n          `[${ATTR_TIMEPICKER_ICON_INLINE_MINUTE}]`,\r\n          this._modal\r\n        );\r\n\r\n        const modifyIcons = (elements, shouldAdd) => {\r\n          return elements.forEach((icon) => {\r\n            if (shouldAdd) {\r\n              Manipulator.addClass(icon, this._classes.opacity);\r\n              icon.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n              return;\r\n            }\r\n\r\n            Manipulator.removeClass(icon, this._classes.opacity);\r\n            icon.removeAttribute(ATTR_TIMEPICKER_ACTIVE);\r\n          });\r\n        };\r\n\r\n        const pickerHasHourAttr = target.hasAttribute(ATTR_TIMEPICKER_HOUR);\r\n        const iconElements = pickerHasHourAttr\r\n          ? allIconsInlineHour\r\n          : allIconsInlineMinute;\r\n\r\n        modifyIcons(iconElements, type === \"mouseover\");\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleDocumentClickInline() {\r\n    EventHandler.on(document, EVENT_CLICK_DATA_API, ({ target }) => {\r\n      if (\r\n        this._modal &&\r\n        !this._modal.contains(target) &&\r\n        !target.hasAttribute(ATTR_TIMEPICKER_ICON)\r\n      ) {\r\n        clearInterval(this._interval);\r\n        Manipulator.addStyle(this.elementToggle, {\r\n          pointerEvents: \"auto\",\r\n        });\r\n        this._removeModal();\r\n\r\n        if (!this._animations) return;\r\n\r\n        this._toggleBackdropAnimation(true);\r\n      }\r\n    });\r\n  }\r\n\r\n  _handleSwitchHourMinute() {\r\n    toggleClassHandler(\r\n      \"click\",\r\n      SELECTOR_ATTR_TIMEPICKER_CURRENT,\r\n      this._classes\r\n    );\r\n\r\n    EventHandler.on(\r\n      this._modal,\r\n      \"click\",\r\n      SELECTOR_ATTR_TIMEPICKER_CURRENT,\r\n      () => {\r\n        const { format24 } = this._options;\r\n        const current = SelectorEngine.find(\r\n          SELECTOR_ATTR_TIMEPICKER_CURRENT,\r\n          this._modal\r\n        );\r\n        const allTipsMinutes = SelectorEngine.find(\r\n          `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`,\r\n          this._modal\r\n        );\r\n        const allTipsHours = SelectorEngine.find(\r\n          `[${ATTR_TIMEPICKER_TIPS_HOURS}]`,\r\n          this._modal\r\n        );\r\n        const allInnerTips = SelectorEngine.find(\r\n          `[${ATTR_TIMEPICKER_INNER_HOURS}]`,\r\n          this._modal\r\n        );\r\n        const hourValue = Number(this._hour.textContent);\r\n        const minuteValue = Number(this._minutes.textContent);\r\n\r\n        const switchTips = (array, classes) => {\r\n          allTipsHours.forEach((tip) => tip.remove());\r\n          allTipsMinutes.forEach((tip) => tip.remove());\r\n          Manipulator.addClass(this._hand, this._classes.transform);\r\n\r\n          setTimeout(() => {\r\n            Manipulator.removeClass(this._hand, this._classes.transform);\r\n          }, 401);\r\n\r\n          this._getAppendClock(array, `[${ATTR_TIMEPICKER_CLOCK}]`, classes);\r\n\r\n          const toggleActiveClass = () => {\r\n            const allTipsHours = SelectorEngine.find(\r\n              `[${ATTR_TIMEPICKER_TIPS_HOURS}]`,\r\n              this._modal\r\n            );\r\n            const allTipsMinutes = SelectorEngine.find(\r\n              `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`,\r\n              this._modal\r\n            );\r\n\r\n            this._addActiveClassToTip(allTipsHours, hourValue);\r\n            this._addActiveClassToTip(allTipsMinutes, minuteValue);\r\n          };\r\n\r\n          if (!format24) {\r\n            setTimeout(() => {\r\n              toggleActiveClass();\r\n            }, 401);\r\n          } else {\r\n            const allTipsInnerHours = SelectorEngine.find(\r\n              `[${ATTR_TIMEPICKER_INNER_HOURS}]`,\r\n              this._modal\r\n            );\r\n\r\n            setTimeout(() => {\r\n              this._addActiveClassToTip(allTipsInnerHours, hourValue);\r\n              toggleActiveClass();\r\n            }, 401);\r\n          }\r\n        };\r\n\r\n        current.forEach((e) => {\r\n          if (e.hasAttribute(ATTR_TIMEPICKER_ACTIVE)) {\r\n            if (e.hasAttribute(ATTR_TIMEPICKER_MINUTE)) {\r\n              Manipulator.addClass(this._hand, this._classes.transform);\r\n\r\n              Manipulator.addStyle(this._hand, {\r\n                transform: `rotateZ(${this._minutes.textContent * 6}deg)`,\r\n                height: \"calc(40% + 1px)\",\r\n              });\r\n\r\n              if (format24 && allInnerTips.length > 0) {\r\n                allInnerTips.forEach((innerTip) => innerTip.remove());\r\n              }\r\n              switchTips(\r\n                this.minutesArray,\r\n                ATTR_TIMEPICKER_TIPS_MINUTES,\r\n                allTipsMinutes\r\n              );\r\n              this._hour.style.pointerEvents = \"\";\r\n              this._minutes.style.pointerEvents = \"none\";\r\n            } else if (e.hasAttribute(ATTR_TIMEPICKER_HOUR)) {\r\n              Manipulator.addStyle(this._hand, {\r\n                transform: `rotateZ(${this._hour.textContent * 30}deg)`,\r\n              });\r\n\r\n              if (Number(this._hour.textContent) > 12) {\r\n                Manipulator.addStyle(this._hand, {\r\n                  transform: `rotateZ(${this._hour.textContent * 30 - 360}deg)`,\r\n                  height: \"21.5%\",\r\n                });\r\n\r\n                if (Number(this._hour.textContent) > 12) {\r\n                  Manipulator.addStyle(this._hand, {\r\n                    height: \"21.5%\",\r\n                  });\r\n                }\r\n              } else {\r\n                Manipulator.addStyle(this._hand, {\r\n                  height: \"calc(40% + 1px)\",\r\n                });\r\n              }\r\n\r\n              if (format24) {\r\n                this._getAppendClock(\r\n                  this.innerHours,\r\n                  `[${ATTR_TIMEPICKER_CLOCK_INNER}]`,\r\n                  ATTR_TIMEPICKER_INNER_HOURS\r\n                );\r\n              }\r\n\r\n              if (allInnerTips.length > 0) {\r\n                allInnerTips.forEach((innerTip) => innerTip.remove());\r\n              }\r\n\r\n              switchTips(\r\n                this.hoursArray,\r\n                ATTR_TIMEPICKER_TIPS_HOURS,\r\n                allTipsHours\r\n              );\r\n\r\n              Manipulator.addStyle(this._hour, {\r\n                pointerEvents: \"none\",\r\n              });\r\n              Manipulator.addStyle(this._minutes, {\r\n                pointerEvents: \"\",\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleDisablingTipsMaxTime(\r\n    selectedFormat,\r\n    maxTimeFormat,\r\n    maxTimeMinutes,\r\n    maxTimeHour\r\n  ) {\r\n    if (!this._options.maxTime && !this._options.disableFuture) {\r\n      return;\r\n    }\r\n\r\n    const outerHoursTips = SelectorEngine.find(\r\n      `[${ATTR_TIMEPICKER_TIPS_HOURS}]`\r\n    );\r\n    const innerHoursTips = SelectorEngine.find(\r\n      `[${ATTR_TIMEPICKER_INNER_HOURS}]`\r\n    );\r\n    const allTipsMinutes = SelectorEngine.find(\r\n      `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`\r\n    );\r\n\r\n    if (!maxTimeFormat || maxTimeFormat === selectedFormat) {\r\n      _verifyMaxTimeHourAndAddDisabledClass(\r\n        innerHoursTips,\r\n        maxTimeHour,\r\n        this._classes,\r\n        this._options.format12\r\n      );\r\n      _verifyMaxTimeHourAndAddDisabledClass(\r\n        outerHoursTips,\r\n        maxTimeHour,\r\n        this._classes,\r\n        this._options.format12\r\n      );\r\n      _verifyMaxTimeMinutesTipsAndAddDisabledClass(\r\n        allTipsMinutes,\r\n        maxTimeMinutes,\r\n        maxTimeHour,\r\n        this._hour.textContent,\r\n        this._classes,\r\n        this._options.format12\r\n      );\r\n      return;\r\n    }\r\n    if (maxTimeFormat === \"AM\" && selectedFormat === \"PM\") {\r\n      outerHoursTips.forEach((tip) => {\r\n        Manipulator.addClass(tip, this._classes.tipsDisabled);\r\n        tip.setAttribute(ATTR_TIMEPICKER_DISABLED, \"\");\r\n      });\r\n      allTipsMinutes.forEach((tip) => {\r\n        Manipulator.addClass(tip, this._classes.tipsDisabled);\r\n        tip.setAttribute(ATTR_TIMEPICKER_DISABLED, \"\");\r\n      });\r\n    }\r\n  }\r\n\r\n  _handleDisablingTipsMinTime(\r\n    selectedFormat,\r\n    minTimeFormat,\r\n    minTimeMinutes,\r\n    minTimeHour\r\n  ) {\r\n    if (!this._options.minTime && !this._options.disablePast) {\r\n      return;\r\n    }\r\n\r\n    const outerHoursTips = SelectorEngine.find(\r\n      `[${ATTR_TIMEPICKER_TIPS_HOURS}]`\r\n    );\r\n    const innerHoursTips = SelectorEngine.find(\r\n      `[${ATTR_TIMEPICKER_INNER_HOURS}]`\r\n    );\r\n    const allTipsMinutes = SelectorEngine.find(\r\n      `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`\r\n    );\r\n\r\n    if (!minTimeFormat || minTimeFormat === selectedFormat) {\r\n      _verifyMinTimeHourAndAddDisabledClass(\r\n        outerHoursTips,\r\n        minTimeHour,\r\n        this._classes,\r\n        this._options.format12\r\n      );\r\n      _verifyMinTimeHourAndAddDisabledClass(\r\n        innerHoursTips,\r\n        minTimeHour,\r\n        this._classes,\r\n        this._options.format12\r\n      );\r\n      _verifyMinTimeMinutesTipsAndAddDisabledClass(\r\n        allTipsMinutes,\r\n        minTimeMinutes,\r\n        minTimeHour,\r\n        this._hour.textContent,\r\n        this._classes,\r\n        this._options.format12\r\n      );\r\n    } else if (minTimeFormat === \"PM\" && selectedFormat === \"AM\") {\r\n      outerHoursTips.forEach((tip) => {\r\n        Manipulator.addClass(tip, this._classes.tipsDisabled);\r\n        tip.setAttribute(ATTR_TIMEPICKER_DISABLED, \"\");\r\n      });\r\n      allTipsMinutes.forEach((tip) => {\r\n        Manipulator.addClass(tip, this._classes.tipsDisabled);\r\n        tip.setAttribute(ATTR_TIMEPICKER_DISABLED, \"\");\r\n      });\r\n    }\r\n  }\r\n\r\n  _toggleAmPm = (enabled) => {\r\n    if (enabled === \"PM\") {\r\n      this._isPmEnabled = true;\r\n      this._isAmEnabled = false;\r\n    } else if (enabled === \"AM\") {\r\n      this._isPmEnabled = false;\r\n      this._isAmEnabled = true;\r\n    }\r\n  };\r\n\r\n  _handleSwitchTimeMode() {\r\n    EventHandler.on(\r\n      document,\r\n      \"click\",\r\n      SELECTOR_ATTR_TIMEPICKER_HOUR_MODE,\r\n      ({ target }) => {\r\n        let { maxTime, minTime } = this._options;\r\n        const { disablePast, disableFuture, format12 } = this._options;\r\n\r\n        minTime = setMinTime(minTime, disablePast, format12);\r\n        maxTime = setMaxTime(maxTime, disableFuture, format12);\r\n\r\n        const [maxTimeHour, maxTimeMinutes, maxTimeFormat] = takeValue(\r\n          maxTime,\r\n          false\r\n        );\r\n        const [minTimeHour, minTimeMinutes, minTimeFormat] = takeValue(\r\n          minTime,\r\n          false\r\n        );\r\n\r\n        const allTipsHour = SelectorEngine.find(\r\n          `[${ATTR_TIMEPICKER_TIPS_HOURS}]`\r\n        );\r\n        const allTipsMinutes = SelectorEngine.find(\r\n          `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`\r\n        );\r\n\r\n        const clearDisabledClassForAllTips = () => {\r\n          allTipsHour.forEach((tip) => {\r\n            Manipulator.removeClass(tip, this._classes.tipsDisabled);\r\n            tip.removeAttribute(ATTR_TIMEPICKER_DISABLED);\r\n          });\r\n\r\n          allTipsMinutes.forEach((tip) => {\r\n            Manipulator.removeClass(tip, this._classes.tipsDisabled);\r\n            tip.removeAttribute(ATTR_TIMEPICKER_DISABLED);\r\n          });\r\n        };\r\n\r\n        clearDisabledClassForAllTips();\r\n        this._handleDisablingTipsMinTime(\r\n          target.textContent,\r\n          minTimeFormat,\r\n          minTimeMinutes,\r\n          minTimeHour\r\n        );\r\n        this._handleDisablingTipsMaxTime(\r\n          target.textContent,\r\n          maxTimeFormat,\r\n          maxTimeMinutes,\r\n          maxTimeHour\r\n        );\r\n        this._toggleAmPm(target.textContent);\r\n        if (!target.hasAttribute(ATTR_TIMEPICKER_ACTIVE)) {\r\n          const allHoursMode = SelectorEngine.find(\r\n            SELECTOR_ATTR_TIMEPICKER_HOUR_MODE\r\n          );\r\n\r\n          allHoursMode.forEach((element) => {\r\n            if (element.hasAttribute(ATTR_TIMEPICKER_ACTIVE)) {\r\n              Manipulator.removeClass(element, this._classes.opacity);\r\n              element.removeAttribute(ATTR_TIMEPICKER_ACTIVE);\r\n            }\r\n          });\r\n\r\n          Manipulator.addClass(target, this._classes.opacity);\r\n          target.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleClockClick() {\r\n    let { maxTime, minTime } = this._options;\r\n    const { disablePast, disableFuture, format12 } = this._options;\r\n\r\n    minTime = setMinTime(minTime, disablePast, format12);\r\n    maxTime = setMaxTime(maxTime, disableFuture, format12);\r\n\r\n    const maxTimeFormat = takeValue(maxTime, false)[2];\r\n    const minTimeFormat = takeValue(minTime, false)[2];\r\n\r\n    const maxTimeHour = takeValue(maxTime, false)[0];\r\n    const minTimeHour = takeValue(minTime, false)[0];\r\n\r\n    const clockWrapper = SelectorEngine.findOne(\r\n      `[${ATTR_TIMEPICKER_CLOCK_WRAPPER}]`\r\n    );\r\n    EventHandlerMulti.on(\r\n      document,\r\n      `${EVENT_MOUSEDOWN_DATA_API} ${EVENT_MOUSEUP_DATA_API} ${EVENT_MOUSEMOVE_DATA_API} ${EVENT_MOUSELEAVE_DATA_API} ${EVENT_MOUSEOVER_DATA_API} ${EVENT_TOUCHSTART_DATA_API} ${EVENT_TOUCHMOVE_DATA_API} ${EVENT_TOUCHEND_DATA_API}`,\r\n      \"\",\r\n      (e) => {\r\n        if (!checkBrowser()) {\r\n          e.preventDefault();\r\n        }\r\n\r\n        const { type, target } = e;\r\n        const { closeModalOnMinutesClick, switchHoursToMinutesOnClick } =\r\n          this._options;\r\n        const minutes =\r\n          SelectorEngine.findOne(\r\n            `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`,\r\n            this._modal\r\n          ) !== null;\r\n        const hours =\r\n          SelectorEngine.findOne(\r\n            `[${ATTR_TIMEPICKER_TIPS_HOURS}]`,\r\n            this._modal\r\n          ) !== null;\r\n        const innerHours =\r\n          SelectorEngine.findOne(\r\n            `[${ATTR_TIMEPICKER_INNER_HOURS}]`,\r\n            this._modal\r\n          ) !== null;\r\n\r\n        const allTipsMinutes = SelectorEngine.find(\r\n          `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`,\r\n          this._modal\r\n        );\r\n\r\n        const mouseClick = findMousePosition(e, clockWrapper);\r\n        const radius = clockWrapper.offsetWidth / 2;\r\n\r\n        let rds = Math.atan2(mouseClick.y - radius, mouseClick.x - radius);\r\n        if (checkBrowser()) {\r\n          const touchClick = findMousePosition(e, clockWrapper, true);\r\n          rds = Math.atan2(touchClick.y - radius, touchClick.x - radius);\r\n        }\r\n\r\n        let xPos = null;\r\n        let yPos = null;\r\n        let elFromPoint = null;\r\n\r\n        if (\r\n          type === \"mousedown\" ||\r\n          type === \"mousemove\" ||\r\n          type === \"touchmove\" ||\r\n          type === \"touchstart\"\r\n        ) {\r\n          if (\r\n            type === \"mousedown\" ||\r\n            type === \"touchstart\" ||\r\n            type === \"touchmove\"\r\n          ) {\r\n            if (\r\n              this._hasTargetInnerClass(target) ||\r\n              target.hasAttribute(ATTR_TIMEPICKER_CLOCK_WRAPPER) ||\r\n              target.hasAttribute(ATTR_TIMEPICKER_CLOCK) ||\r\n              target.hasAttribute(ATTR_TIMEPICKER_TIPS_MINUTES) ||\r\n              target.hasAttribute(ATTR_TIMEPICKER_TIPS_HOURS) ||\r\n              target.hasAttribute(ATTR_TIMEPICKER_CIRCLE) ||\r\n              target.hasAttribute(ATTR_TIMEPICKER_HAND_POINTER) ||\r\n              target.hasAttribute(ATTR_TIMEPICKER_MIDDLE_DOT) ||\r\n              target.hasAttribute(ATTR_TIMEPICKER_TIPS_ELEMENT)\r\n            ) {\r\n              this._isMouseMove = true;\r\n\r\n              if (checkBrowser() && e.touches) {\r\n                xPos = e.touches[0].clientX;\r\n                yPos = e.touches[0].clientY;\r\n                elFromPoint = document.elementFromPoint(xPos, yPos);\r\n              }\r\n            }\r\n          }\r\n        } else if (type === \"mouseup\" || type === \"touchend\") {\r\n          this._isMouseMove = false;\r\n\r\n          if (\r\n            this._hasTargetInnerClass(target) ||\r\n            target.hasAttribute(ATTR_TIMEPICKER_CLOCK) ||\r\n            target.hasAttribute(ATTR_TIMEPICKER_TIPS_HOURS) ||\r\n            target.hasAttribute(ATTR_TIMEPICKER_CIRCLE) ||\r\n            target.hasAttribute(ATTR_TIMEPICKER_HAND_POINTER) ||\r\n            target.hasAttribute(ATTR_TIMEPICKER_MIDDLE_DOT) ||\r\n            target.hasAttribute(ATTR_TIMEPICKER_TIPS_ELEMENT)\r\n          ) {\r\n            if ((hours || innerHours) && switchHoursToMinutesOnClick) {\r\n              const isHourlessThanMinOrGreaterThanMax =\r\n                Number(this._hour.textContent) > maxTimeHour ||\r\n                Number(this._hour.textContent) < minTimeHour;\r\n              if (\r\n                this._options.format24 &&\r\n                maxTimeHour !== \"\" &&\r\n                minTimeHour !== \"\" &&\r\n                isHourlessThanMinOrGreaterThanMax\r\n              ) {\r\n                return;\r\n              } else if (\r\n                this._options.format24 &&\r\n                minTimeHour !== \"\" &&\r\n                Number(this._hour.textContent) < minTimeHour\r\n              ) {\r\n                return;\r\n              }\r\n            }\r\n            EventHandler.trigger(this._minutes, \"click\");\r\n          }\r\n\r\n          if (minutes && closeModalOnMinutesClick) {\r\n            const submitBtn = SelectorEngine.findOne(\r\n              `[${ATTR_TIMEPICKER_BUTTON_SUBMIT}]`,\r\n              this._modal\r\n            );\r\n            EventHandler.trigger(submitBtn, \"click\");\r\n          }\r\n        }\r\n\r\n        if (minutes) {\r\n          let minute;\r\n\r\n          const degrees = Math.trunc((rds * 180) / Math.PI) + 90;\r\n\r\n          const { degrees: minDegrees, minute: minTimeObj } =\r\n            this._makeMinutesDegrees(degrees, minute);\r\n\r\n          if (\r\n            this._handlerMaxMinMinutesOptions(minDegrees, minTimeObj) ===\r\n            undefined\r\n          ) {\r\n            return;\r\n          }\r\n\r\n          const { degrees: _degrees, minute: minuteTimes } =\r\n            this._handlerMaxMinMinutesOptions(minDegrees, minTimeObj);\r\n\r\n          if (this._isMouseMove) {\r\n            Manipulator.addStyle(this._hand, {\r\n              transform: `rotateZ(${_degrees}deg)`,\r\n            });\r\n\r\n            if (minuteTimes === undefined) {\r\n              return;\r\n            }\r\n\r\n            const changeMinutes = () => {\r\n              return minuteTimes >= 10 || minuteTimes === \"00\"\r\n                ? minuteTimes\r\n                : `0${minuteTimes}`;\r\n            };\r\n\r\n            this._minutes.textContent = changeMinutes();\r\n\r\n            this._toggleClassActive(\r\n              this.minutesArray,\r\n              this._minutes,\r\n              allTipsMinutes\r\n            );\r\n            this._toggleBackgroundColorCircle(\r\n              `[${ATTR_TIMEPICKER_TIPS_MINUTES}]`\r\n            );\r\n\r\n            this._objWithDataOnChange.degreesMinutes = _degrees;\r\n            this._objWithDataOnChange.minutes = minuteTimes;\r\n          }\r\n        }\r\n\r\n        if (hours || innerHours) {\r\n          let hour;\r\n\r\n          let degrees = Math.trunc((rds * 180) / Math.PI) + 90;\r\n          degrees = Math.round(degrees / 30) * 30;\r\n\r\n          Manipulator.addStyle(this._circle, {\r\n            backgroundColor: \"#1976d2\",\r\n          });\r\n          if (this._makeHourDegrees(target, degrees, hour) === undefined) {\r\n            return;\r\n          }\r\n          const makeDegrees = () => {\r\n            if (checkBrowser() && degrees && elFromPoint) {\r\n              const { degrees: touchDegrees, hour: touchHours } =\r\n                this._makeHourDegrees(elFromPoint, degrees, hour);\r\n\r\n              return this._handleMoveHand(\r\n                elFromPoint,\r\n                touchHours,\r\n                touchDegrees\r\n              );\r\n            } else {\r\n              const { degrees: movedDegrees, hour: movedHours } =\r\n                this._makeHourDegrees(target, degrees, hour);\r\n\r\n              return this._handleMoveHand(target, movedHours, movedDegrees);\r\n            }\r\n          };\r\n\r\n          this._objWithDataOnChange.degreesHours = degrees;\r\n\r\n          if (\r\n            this._handlerMaxMinHoursOptions(\r\n              degrees,\r\n              maxTimeHour,\r\n              minTimeHour,\r\n              maxTimeFormat,\r\n              minTimeFormat,\r\n              e\r\n            )\r\n          ) {\r\n            makeDegrees();\r\n          }\r\n        }\r\n\r\n        e.stopPropagation();\r\n      }\r\n    );\r\n  }\r\n\r\n  _hasTargetInnerClass(target) {\r\n    return (\r\n      target.hasAttribute(ATTR_TIMEPICKER_CLOCK_INNER) ||\r\n      target.hasAttribute(ATTR_TIMEPICKER_INNER_HOURS) ||\r\n      target.hasAttribute(ATTR_TIMEPICKER_TIPS_INNER_ELEMENT)\r\n    );\r\n  }\r\n\r\n  _handleMoveHand(target, hour, degrees) {\r\n    const allTipsHours = SelectorEngine.find(\r\n      `[${ATTR_TIMEPICKER_TIPS_HOURS}]`,\r\n      this._modal\r\n    );\r\n    const allTipsInner = SelectorEngine.find(\r\n      `[${ATTR_TIMEPICKER_INNER_HOURS}]`,\r\n      this._modal\r\n    );\r\n\r\n    if (!this._isMouseMove) return;\r\n\r\n    if (this._hasTargetInnerClass(target)) {\r\n      Manipulator.addStyle(this._hand, {\r\n        height: \"21.5%\",\r\n      });\r\n    } else {\r\n      Manipulator.addStyle(this._hand, {\r\n        height: \"calc(40% + 1px)\",\r\n      });\r\n    }\r\n\r\n    Manipulator.addStyle(this._hand, {\r\n      transform: `rotateZ(${degrees}deg)`,\r\n    });\r\n\r\n    this._hour.textContent = hour >= 10 || hour === \"00\" ? hour : `0${hour}`;\r\n\r\n    this._toggleClassActive(this.hoursArray, this._hour, allTipsHours);\r\n    this._toggleClassActive(this.innerHours, this._hour, allTipsInner);\r\n\r\n    this._objWithDataOnChange.hour =\r\n      hour >= 10 || hour === \"00\" ? hour : `0${hour}`;\r\n  }\r\n\r\n  _handlerMaxMinMinutesOptions(degrees, minute) {\r\n    let { maxTime, minTime } = this._options;\r\n    const { format12, increment, disablePast, disableFuture } = this._options;\r\n\r\n    minTime = setMinTime(minTime, disablePast, format12);\r\n    maxTime = setMaxTime(maxTime, disableFuture, format12);\r\n\r\n    const maxMin = takeValue(maxTime, false)[1];\r\n    const minMin = takeValue(minTime, false)[1];\r\n    const maxHourTimeValue = takeValue(maxTime, false)[0];\r\n    const minHourTimeValue = takeValue(minTime, false)[0];\r\n    const minHourTime =\r\n      minHourTimeValue === \"12\" && format12 ? \"0\" : minHourTimeValue;\r\n    const maxHourTime =\r\n      maxHourTimeValue === \"12\" && format12 ? \"0\" : maxHourTimeValue;\r\n\r\n    const maxTimeFormat = takeValue(maxTime, false)[2];\r\n    const minTimeFormat = takeValue(minTime, false)[2];\r\n\r\n    const maxMinDegrees = maxMin !== \"\" ? maxMin * 6 : \"\";\r\n    const minMinDegrees = minMin !== \"\" ? minMin * 6 : \"\";\r\n\r\n    const selectedHourContent = Number(this._hour.textContent);\r\n    const selectedHour =\r\n      selectedHourContent === 12 && format12 ? 0 : selectedHourContent;\r\n\r\n    if (!maxTimeFormat && !minTimeFormat) {\r\n      if (maxTime !== \"\" && minTime !== \"\") {\r\n        if (\r\n          (Number(maxHourTime) === selectedHour && degrees > maxMinDegrees) ||\r\n          (Number(minHourTime) === selectedHour && degrees < minMinDegrees)\r\n        ) {\r\n          return degrees;\r\n        }\r\n      } else if (minTime !== \"\" && selectedHour <= Number(minHourTime)) {\r\n        if (degrees <= minMinDegrees - 6) {\r\n          return degrees;\r\n        }\r\n      } else if (maxTime !== \"\" && selectedHour >= Number(maxHourTime)) {\r\n        if (degrees >= maxMinDegrees + 6) {\r\n          return degrees;\r\n        }\r\n      }\r\n    } else {\r\n      // eslint-disable-next-line no-lonely-if\r\n      if (minTime !== \"\") {\r\n        if (minTimeFormat === \"PM\" && this._isAmEnabled) {\r\n          return;\r\n        }\r\n\r\n        if (minTimeFormat === \"PM\" && this._isPmEnabled) {\r\n          if (selectedHour < Number(minHourTime)) {\r\n            return;\r\n          }\r\n\r\n          if (selectedHour <= Number(minHourTime)) {\r\n            if (degrees <= minMinDegrees - 6) {\r\n              return degrees;\r\n            }\r\n          }\r\n        } else if (minTimeFormat === \"AM\" && this._isAmEnabled) {\r\n          if (selectedHour < Number(minHourTime)) {\r\n            return;\r\n          }\r\n\r\n          if (selectedHour <= Number(minHourTime)) {\r\n            if (degrees <= minMinDegrees - 6) {\r\n              return degrees;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (maxTime !== \"\") {\r\n        if (maxTimeFormat === \"AM\" && this._isPmEnabled) {\r\n          return;\r\n        }\r\n\r\n        if (maxTimeFormat === \"PM\" && this._isPmEnabled) {\r\n          if (selectedHour >= Number(maxHourTime)) {\r\n            if (degrees >= maxMinDegrees + 6) {\r\n              return degrees;\r\n            }\r\n          }\r\n        } else if (maxTimeFormat === \"AM\" && this._isAmEnabled) {\r\n          if (selectedHour >= Number(maxHourTime)) {\r\n            if (degrees >= maxMinDegrees + 6) {\r\n              return degrees;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (increment) {\r\n      degrees = Math.round(degrees / 30) * 30;\r\n    }\r\n\r\n    if (degrees < 0) {\r\n      degrees = 360 + degrees;\r\n    } else if (degrees >= 360) {\r\n      degrees = 0;\r\n    }\r\n\r\n    return {\r\n      degrees,\r\n      minute,\r\n    };\r\n  }\r\n\r\n  _removeModal() {\r\n    if (this._animations) {\r\n      setTimeout(() => {\r\n        this._removeModalElements();\r\n        this._scrollBar.reset();\r\n      }, 300);\r\n    } else {\r\n      this._removeModalElements();\r\n      this._scrollBar.reset();\r\n    }\r\n\r\n    EventHandlerMulti.off(\r\n      this._document,\r\n      `${EVENT_CLICK_DATA_API} ${EVENT_KEYDOWN_DATA_API} ${EVENT_MOUSEDOWN_DATA_API} ${EVENT_MOUSEUP_DATA_API} ${EVENT_MOUSEMOVE_DATA_API} ${EVENT_MOUSELEAVE_DATA_API} ${EVENT_MOUSEOVER_DATA_API} ${EVENT_TOUCHSTART_DATA_API} ${EVENT_TOUCHMOVE_DATA_API} ${EVENT_TOUCHEND_DATA_API}`\r\n    );\r\n    EventHandler.off(window, EVENT_KEYDOWN_DATA_API);\r\n  }\r\n\r\n  _removeModalElements() {\r\n    if (this._modal) this._modal.remove();\r\n  }\r\n\r\n  _toggleBackdropAnimation(isToRemove = false) {\r\n    if (isToRemove) {\r\n      this._wrapper.classList.add(\"animate-[fade-out_350ms_ease-in-out]\");\r\n    } else {\r\n      this._wrapper.classList.add(\"animate-[fade-in_350ms_ease-in-out]\");\r\n\r\n      if (!this._options.inline)\r\n        Manipulator.addClass(this._clock, this._classes.clockAnimation);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this._wrapper.classList.remove(\r\n        \"animate-[fade-out_350ms_ease-in-out]\",\r\n        \"animate-[fade-in_350ms_ease-in-out]\"\r\n      );\r\n    }, 351);\r\n  }\r\n\r\n  _toggleBackgroundColorCircle = (classes) => {\r\n    const tips =\r\n      this._modal.querySelector(`${classes}[${ATTR_TIMEPICKER_ACTIVE}]`) !==\r\n      null;\r\n    if (tips) {\r\n      Manipulator.addStyle(this._circle, {\r\n        backgroundColor: \"#1976d2\",\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    Manipulator.addStyle(this._circle, {\r\n      backgroundColor: \"transparent\",\r\n    });\r\n  };\r\n\r\n  _toggleClassActive = (array, { textContent }, tips) => {\r\n    const findInArray = [...array].find(\r\n      (e) => Number(e) === Number(textContent)\r\n    );\r\n\r\n    return tips.forEach((e) => {\r\n      if (e.hasAttribute(ATTR_TIMEPICKER_DISABLED)) return;\r\n\r\n      if (e.textContent === findInArray) {\r\n        Manipulator.addClass(e, this._classes.tipsActive);\r\n        e.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n        return;\r\n      }\r\n\r\n      Manipulator.removeClass(e, this._classes.tipsActive);\r\n      e.removeAttribute(ATTR_TIMEPICKER_ACTIVE);\r\n    });\r\n  };\r\n\r\n  _addActiveClassToTip(tips, value) {\r\n    tips.forEach((tip) => {\r\n      if (Number(tip.textContent) === Number(value)) {\r\n        Manipulator.addClass(tip, this._classes.tipsActive);\r\n        tip.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n      }\r\n    });\r\n  }\r\n\r\n  _makeMinutesDegrees = (degrees, minute) => {\r\n    const { increment } = this._options;\r\n\r\n    if (degrees < 0) {\r\n      minute = Math.round(360 + degrees / 6) % 60;\r\n      degrees = 360 + Math.round(degrees / 6) * 6;\r\n    } else {\r\n      minute = Math.round(degrees / 6) % 60;\r\n      degrees = Math.round(degrees / 6) * 6;\r\n    }\r\n\r\n    if (increment) {\r\n      degrees = Math.round(degrees / 30) * 30;\r\n      minute = (Math.round(degrees / 6) * 6) / 6;\r\n\r\n      if (minute === 60) {\r\n        minute = \"00\";\r\n      }\r\n    }\r\n\r\n    if (degrees >= 360) {\r\n      degrees = 0;\r\n    }\r\n\r\n    return {\r\n      degrees,\r\n      minute,\r\n      addDegrees: increment ? 30 : 6,\r\n    };\r\n  };\r\n\r\n  _makeHourDegrees = (target, degrees, hour) => {\r\n    if (!target) {\r\n      return;\r\n    }\r\n    if (this._hasTargetInnerClass(target)) {\r\n      if (degrees < 0) {\r\n        hour = Math.round(360 + degrees / 30) % 24;\r\n        degrees = 360 + degrees;\r\n      } else {\r\n        hour = Math.round(degrees / 30) + 12;\r\n        if (hour === 12) {\r\n          hour = \"00\";\r\n        }\r\n      }\r\n    } else if (degrees < 0) {\r\n      hour = Math.round(360 + degrees / 30) % 12;\r\n      degrees = 360 + degrees;\r\n    } else {\r\n      hour = Math.round(degrees / 30) % 12;\r\n      if (hour === 0 || hour > 12) {\r\n        hour = 12;\r\n      }\r\n    }\r\n\r\n    if (degrees >= 360) {\r\n      degrees = 0;\r\n    }\r\n\r\n    return {\r\n      degrees,\r\n      hour,\r\n      addDegrees: 30,\r\n    };\r\n  };\r\n\r\n  _makeInnerHoursDegrees = (degrees, hour) => {\r\n    if (degrees < 0) {\r\n      hour = Math.round(360 + degrees / 30) % 24;\r\n      degrees = 360 + degrees;\r\n    } else {\r\n      hour = Math.round(degrees / 30) + 12;\r\n      if (hour === 12) {\r\n        hour = \"00\";\r\n      }\r\n    }\r\n\r\n    return {\r\n      degrees,\r\n      hour,\r\n      addDegrees: 30,\r\n    };\r\n  };\r\n\r\n  _setHourOrMinute(number) {\r\n    return number < 10 ? `0${number}` : number;\r\n  }\r\n\r\n  _appendTimes() {\r\n    const { format24 } = this._options;\r\n\r\n    if (format24) {\r\n      this._getAppendClock(\r\n        this.hoursArray,\r\n        `[${ATTR_TIMEPICKER_CLOCK}]`,\r\n        ATTR_TIMEPICKER_TIPS_HOURS\r\n      );\r\n      this._getAppendClock(\r\n        this.innerHours,\r\n        `[${ATTR_TIMEPICKER_CLOCK_INNER}]`,\r\n        ATTR_TIMEPICKER_INNER_HOURS\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    this._getAppendClock(\r\n      this.hoursArray,\r\n      `[${ATTR_TIMEPICKER_CLOCK}]`,\r\n      ATTR_TIMEPICKER_TIPS_HOURS\r\n    );\r\n  }\r\n\r\n  _getAppendClock = (\r\n    array = [],\r\n    clockClass = `[${ATTR_TIMEPICKER_CLOCK}]`,\r\n    tipsClass\r\n  ) => {\r\n    let { minTime, maxTime } = this._options;\r\n    const { inline, format12, disablePast, disableFuture } = this._options;\r\n\r\n    minTime = setMinTime(minTime, disablePast, format12);\r\n    maxTime = setMaxTime(maxTime, disableFuture, format12);\r\n\r\n    const [maxTimeHour, maxTimeMinutes, maxTimeFormat] = takeValue(\r\n      maxTime,\r\n      false\r\n    );\r\n    const [minTimeHour, minTimeMinutes, minTimeFormat] = takeValue(\r\n      minTime,\r\n      false\r\n    );\r\n\r\n    // fix for append clock for max/min if input has invalid  value\r\n    if (\r\n      !inline &&\r\n      format12 &&\r\n      this._isInvalidTimeFormat &&\r\n      !this._AM.hasAttribute(ATTR_TIMEPICKER_ACTIVE)\r\n    ) {\r\n      Manipulator.addClass(this._PM, this._classes.opacity);\r\n      this._PM.setAttribute(ATTR_TIMEPICKER_ACTIVE, \"\");\r\n    }\r\n\r\n    const clock = SelectorEngine.findOne(clockClass);\r\n\r\n    const elements = 360 / array.length;\r\n\r\n    function rad(el) {\r\n      return el * (Math.PI / 180);\r\n    }\r\n\r\n    if (clock === null) return;\r\n\r\n    const clockWidth = (clock.offsetWidth - 32) / 2;\r\n    const clockHeight = (clock.offsetHeight - 32) / 2;\r\n    const radius = clockWidth - 4;\r\n\r\n    setTimeout(() => {\r\n      let currentFormat;\r\n      if (format12) {\r\n        currentFormat = SelectorEngine.findOne(\r\n          `${SELECTOR_ATTR_TIMEPICKER_HOUR_MODE}[${ATTR_TIMEPICKER_ACTIVE}]`\r\n        ).textContent;\r\n      }\r\n      this._handleDisablingTipsMinTime(\r\n        currentFormat,\r\n        minTimeFormat,\r\n        minTimeMinutes,\r\n        minTimeHour\r\n      );\r\n      this._handleDisablingTipsMaxTime(\r\n        currentFormat,\r\n        maxTimeFormat,\r\n        maxTimeMinutes,\r\n        maxTimeHour\r\n      );\r\n    }, 0);\r\n\r\n    [...array].forEach((e, i) => {\r\n      const angle = rad(i * elements);\r\n\r\n      const span = element(\"span\");\r\n      const spanToTips = element(\"span\");\r\n\r\n      spanToTips.innerHTML = e;\r\n      Manipulator.addClass(span, this._classes.tips);\r\n      span.setAttribute(tipsClass, \"\");\r\n\r\n      const itemWidth = span.offsetWidth;\r\n      const itemHeight = span.offsetHeight;\r\n\r\n      Manipulator.addStyle(span, {\r\n        left: `${clockWidth + Math.sin(angle) * radius - itemWidth}px`,\r\n        bottom: `${clockHeight + Math.cos(angle) * radius - itemHeight}px`,\r\n      });\r\n\r\n      if (array.includes(\"05\")) {\r\n        span.setAttribute(ATTR_TIMEPICKER_TIPS_MINUTES, \"\");\r\n      }\r\n\r\n      if (array.includes(\"13\")) {\r\n        spanToTips.setAttribute(ATTR_TIMEPICKER_TIPS_INNER_ELEMENT, \"\");\r\n      } else {\r\n        spanToTips.setAttribute(ATTR_TIMEPICKER_TIPS_ELEMENT, \"\");\r\n      }\r\n\r\n      span.appendChild(spanToTips);\r\n      return clock.appendChild(span);\r\n    });\r\n  };\r\n\r\n  _getConfig(config) {\r\n    const dataAttributes = Manipulator.getDataAttributes(this._element);\r\n\r\n    config = {\r\n      ...Default,\r\n      ...dataAttributes,\r\n      ...config,\r\n    };\r\n\r\n    typeCheckConfig(NAME, config, DefaultType);\r\n    return config;\r\n  }\r\n\r\n  _getClasses(classes) {\r\n    const dataAttributes = Manipulator.getDataClassAttributes(this._element);\r\n\r\n    classes = {\r\n      ...DefaultClasses,\r\n      ...dataAttributes,\r\n      ...classes,\r\n    };\r\n\r\n    typeCheckConfig(NAME, classes, DefaultClassesType);\r\n\r\n    return classes;\r\n  }\r\n\r\n  _getContainer() {\r\n    return SelectorEngine.findOne(this._options.container);\r\n  }\r\n\r\n  _getValidate(event) {\r\n    const { format24, format12, appendValidationInfo } = this._options;\r\n\r\n    EventHandlerMulti.on(this.input, event, ({ target }) => {\r\n      if (this._options === null || this.input.value === \"\") return;\r\n\r\n      const regexAMFormat = /^(0?[1-9]|1[012])(:[0-5]\\d) [APap][mM]$/;\r\n      const regexNormalFormat = /^([01]\\d|2[0-3])(:[0-5]\\d)$/;\r\n      const testedAMRegex = regexAMFormat.test(target.value);\r\n      const testedNormalRegex = regexNormalFormat.test(target.value);\r\n\r\n      if (\r\n        (testedNormalRegex !== true && format24) ||\r\n        (testedAMRegex !== true && format12)\r\n      ) {\r\n        if (appendValidationInfo) {\r\n          this.input.setAttribute(ATTR_TIMEPICKER_IS_INVALID, \"\");\r\n        }\r\n\r\n        Manipulator.addStyle(target, { marginBottom: 0 });\r\n\r\n        this._isInvalidTimeFormat = true;\r\n        return;\r\n      }\r\n\r\n      this.input.removeAttribute(ATTR_TIMEPICKER_IS_INVALID);\r\n      this._isInvalidTimeFormat = false;\r\n      const allInvalid = SelectorEngine.findOne(\r\n        `[${ATTR_TIMEPICKER_INVALID_FEEDBACK}]`\r\n      );\r\n\r\n      if (allInvalid === null) return;\r\n\r\n      allInvalid.remove();\r\n    });\r\n  }\r\n\r\n  // Static\r\n  static getInstance(element) {\r\n    return Data.getData(element, DATA_KEY);\r\n  }\r\n\r\n  static getOrCreateInstance(element, config = {}) {\r\n    return (\r\n      this.getInstance(element) ||\r\n      new this(element, typeof config === \"object\" ? config : null)\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timepicker;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\n/* eslint-disable indent */\r\nconst ATTR_SELECT = \"data-te-datatable-select-ref\";\r\nconst ATTR_PAGINATION_NAV = \"data-te-datatable-pagination-nav-ref\";\r\nconst ATTR_PAGINATION_RIGHT = \"data-te-datatable-pagination-right-ref\";\r\nconst ATTR_PAGINATION_LEFT = \"data-te-datatable-pagination-left-ref\";\r\nconst ATTR_PAGINATION_START = \"data-te-datatable-pagination-start-ref\";\r\nconst ATTR_PAGINATION_END = \"data-te-datatable-pagination-end-ref\";\r\n\r\nconst pagination = (\r\n  {\r\n    text,\r\n    entries,\r\n    entriesOptions,\r\n    fullPagination,\r\n    rowsText,\r\n    allText,\r\n    paginationStartIconTemplate,\r\n    paginationLeftIconTemplate,\r\n    paginationRightIconTemplate,\r\n    paginationEndIconTemplate,\r\n    classes,\r\n  },\r\n  loading,\r\n  bordered\r\n) => {\r\n  const options = entriesOptions\r\n    .map((option) => {\r\n      if (option === \"All\") {\r\n        return `<option value=\"${option}\" ${\r\n          option === entries ? \"selected\" : \"\"\r\n        }>${allText}</option>`;\r\n      }\r\n      return `<option value=\"${option}\" ${\r\n        option === entries ? \"selected\" : \"\"\r\n      }>${option}</option>`;\r\n    })\r\n    .join(\"\\n\");\r\n\r\n  return `\r\n<div class=\"${classes.pagination} ${\r\n    bordered ? `${classes.paginationBordered}` : \"\"\r\n  } ${classes.borderColor} ${classes.color}\">\r\n  <div class=\"${classes.selectItemsWrapper}\">  \r\n    <p class=\"${classes.paginationRowsText} ${\r\n    loading ? `${classes.loadingPaginationRowsText}` : \"\"\r\n  }\">${rowsText}</p>\r\n    <div class=\"${classes.selectWrapper} ${\r\n    loading ? `${classes.loadingPaginationSelectWrapper}` : \"\"\r\n  }\">\r\n      <select name=\"entries\"\r\n        ${loading ? \"disabled\" : \"\"} class=\"select\" ${ATTR_SELECT}>\r\n        ${options}\r\n      </select>\r\n    </div>\r\n  </div>\r\n  <div class=\"${classes.paginationNav} ${\r\n    loading ? `${classes.loadingPaginationNav}` : \"\"\r\n  }\" ${ATTR_PAGINATION_NAV}>\r\n  ${text}\r\n  </div>\r\n  <div class=\"${classes.paginationButtonsWrapper}\">\r\n    ${\r\n      fullPagination\r\n        ? `<button data-te-ripple-init data-te-ripple-color=\"dark\" class=\"${classes.paginationStartButton}\" ${ATTR_PAGINATION_START}>\r\n           ${paginationStartIconTemplate}\r\n          </button>`\r\n        : \"\"\r\n    }\r\n    <button data-te-ripple-init data-te-ripple-color=\"dark\" class=\"${\r\n      classes.paginationLeftButton\r\n    }\" ${ATTR_PAGINATION_LEFT}>\r\n      ${paginationLeftIconTemplate}\r\n  </button>\r\n    <button data-te-ripple-init data-te-ripple-color=\"dark\" class=\"${\r\n      classes.paginationRightButton\r\n    }\" ${ATTR_PAGINATION_RIGHT}>\r\n      ${paginationRightIconTemplate}\r\n  </button>\r\n    ${\r\n      fullPagination\r\n        ? `<button data-te-ripple-init data-te-ripple-color=\"dark\" class=\"${classes.paginationEndButton}\" ${ATTR_PAGINATION_END}>\r\n           ${paginationEndIconTemplate}\r\n          </button>`\r\n        : \"\"\r\n    }\r\n  </div>\r\n</div>\r\n`;\r\n};\r\n\r\nexport default pagination;\r\n","/*!\n * perfect-scrollbar v1.5.3\n * Copyright 2021 Hyunje Jun, MDBootstrap and Contributors\n * Licensed under MIT\n */\n\nfunction get(element) {\n  return getComputedStyle(element);\n}\n\nfunction set(element, obj) {\n  for (var key in obj) {\n    var val = obj[key];\n    if (typeof val === 'number') {\n      val = val + \"px\";\n    }\n    element.style[key] = val;\n  }\n  return element;\n}\n\nfunction div(className) {\n  var div = document.createElement('div');\n  div.className = className;\n  return div;\n}\n\nvar elMatches =\n  typeof Element !== 'undefined' &&\n  (Element.prototype.matches ||\n    Element.prototype.webkitMatchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector);\n\nfunction matches(element, query) {\n  if (!elMatches) {\n    throw new Error('No element matching method supported');\n  }\n\n  return elMatches.call(element, query);\n}\n\nfunction remove(element) {\n  if (element.remove) {\n    element.remove();\n  } else {\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n}\n\nfunction queryChildren(element, selector) {\n  return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }\n  );\n}\n\nvar cls = {\n  main: 'ps',\n  rtl: 'ps__rtl',\n  element: {\n    thumb: function (x) { return (\"ps__thumb-\" + x); },\n    rail: function (x) { return (\"ps__rail-\" + x); },\n    consuming: 'ps__child--consume',\n  },\n  state: {\n    focus: 'ps--focus',\n    clicking: 'ps--clicking',\n    active: function (x) { return (\"ps--active-\" + x); },\n    scrolling: function (x) { return (\"ps--scrolling-\" + x); },\n  },\n};\n\n/*\n * Helper methods\n */\nvar scrollingClassTimeout = { x: null, y: null };\n\nfunction addScrollingClass(i, x) {\n  var classList = i.element.classList;\n  var className = cls.state.scrolling(x);\n\n  if (classList.contains(className)) {\n    clearTimeout(scrollingClassTimeout[x]);\n  } else {\n    classList.add(className);\n  }\n}\n\nfunction removeScrollingClass(i, x) {\n  scrollingClassTimeout[x] = setTimeout(\n    function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },\n    i.settings.scrollingThreshold\n  );\n}\n\nfunction setScrollingClassInstantly(i, x) {\n  addScrollingClass(i, x);\n  removeScrollingClass(i, x);\n}\n\nvar EventElement = function EventElement(element) {\n  this.element = element;\n  this.handlers = {};\n};\n\nvar prototypeAccessors = { isEmpty: { configurable: true } };\n\nEventElement.prototype.bind = function bind (eventName, handler) {\n  if (typeof this.handlers[eventName] === 'undefined') {\n    this.handlers[eventName] = [];\n  }\n  this.handlers[eventName].push(handler);\n  this.element.addEventListener(eventName, handler, false);\n};\n\nEventElement.prototype.unbind = function unbind (eventName, target) {\n    var this$1 = this;\n\n  this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {\n    if (target && handler !== target) {\n      return true;\n    }\n    this$1.element.removeEventListener(eventName, handler, false);\n    return false;\n  });\n};\n\nEventElement.prototype.unbindAll = function unbindAll () {\n  for (var name in this.handlers) {\n    this.unbind(name);\n  }\n};\n\nprototypeAccessors.isEmpty.get = function () {\n    var this$1 = this;\n\n  return Object.keys(this.handlers).every(\n    function (key) { return this$1.handlers[key].length === 0; }\n  );\n};\n\nObject.defineProperties( EventElement.prototype, prototypeAccessors );\n\nvar EventManager = function EventManager() {\n  this.eventElements = [];\n};\n\nEventManager.prototype.eventElement = function eventElement (element) {\n  var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];\n  if (!ee) {\n    ee = new EventElement(element);\n    this.eventElements.push(ee);\n  }\n  return ee;\n};\n\nEventManager.prototype.bind = function bind (element, eventName, handler) {\n  this.eventElement(element).bind(eventName, handler);\n};\n\nEventManager.prototype.unbind = function unbind (element, eventName, handler) {\n  var ee = this.eventElement(element);\n  ee.unbind(eventName, handler);\n\n  if (ee.isEmpty) {\n    // remove\n    this.eventElements.splice(this.eventElements.indexOf(ee), 1);\n  }\n};\n\nEventManager.prototype.unbindAll = function unbindAll () {\n  this.eventElements.forEach(function (e) { return e.unbindAll(); });\n  this.eventElements = [];\n};\n\nEventManager.prototype.once = function once (element, eventName, handler) {\n  var ee = this.eventElement(element);\n  var onceHandler = function (evt) {\n    ee.unbind(eventName, onceHandler);\n    handler(evt);\n  };\n  ee.bind(eventName, onceHandler);\n};\n\nfunction createEvent(name) {\n  if (typeof window.CustomEvent === 'function') {\n    return new CustomEvent(name);\n  } else {\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(name, false, false, undefined);\n    return evt;\n  }\n}\n\nfunction processScrollDiff(\n  i,\n  axis,\n  diff,\n  useScrollingClass,\n  forceFireReachEvent\n) {\n  if ( useScrollingClass === void 0 ) useScrollingClass = true;\n  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;\n\n  var fields;\n  if (axis === 'top') {\n    fields = [\n      'contentHeight',\n      'containerHeight',\n      'scrollTop',\n      'y',\n      'up',\n      'down' ];\n  } else if (axis === 'left') {\n    fields = [\n      'contentWidth',\n      'containerWidth',\n      'scrollLeft',\n      'x',\n      'left',\n      'right' ];\n  } else {\n    throw new Error('A proper axis should be provided');\n  }\n\n  processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);\n}\n\nfunction processScrollDiff$1(\n  i,\n  diff,\n  ref,\n  useScrollingClass,\n  forceFireReachEvent\n) {\n  var contentHeight = ref[0];\n  var containerHeight = ref[1];\n  var scrollTop = ref[2];\n  var y = ref[3];\n  var up = ref[4];\n  var down = ref[5];\n  if ( useScrollingClass === void 0 ) useScrollingClass = true;\n  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;\n\n  var element = i.element;\n\n  // reset reach\n  i.reach[y] = null;\n\n  // 1 for subpixel rounding\n  if (element[scrollTop] < 1) {\n    i.reach[y] = 'start';\n  }\n\n  // 1 for subpixel rounding\n  if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {\n    i.reach[y] = 'end';\n  }\n\n  if (diff) {\n    element.dispatchEvent(createEvent((\"ps-scroll-\" + y)));\n\n    if (diff < 0) {\n      element.dispatchEvent(createEvent((\"ps-scroll-\" + up)));\n    } else if (diff > 0) {\n      element.dispatchEvent(createEvent((\"ps-scroll-\" + down)));\n    }\n\n    if (useScrollingClass) {\n      setScrollingClassInstantly(i, y);\n    }\n  }\n\n  if (i.reach[y] && (diff || forceFireReachEvent)) {\n    element.dispatchEvent(createEvent((\"ps-\" + y + \"-reach-\" + (i.reach[y]))));\n  }\n}\n\nfunction toInt(x) {\n  return parseInt(x, 10) || 0;\n}\n\nfunction isEditable(el) {\n  return (\n    matches(el, 'input,[contenteditable]') ||\n    matches(el, 'select,[contenteditable]') ||\n    matches(el, 'textarea,[contenteditable]') ||\n    matches(el, 'button,[contenteditable]')\n  );\n}\n\nfunction outerWidth(element) {\n  var styles = get(element);\n  return (\n    toInt(styles.width) +\n    toInt(styles.paddingLeft) +\n    toInt(styles.paddingRight) +\n    toInt(styles.borderLeftWidth) +\n    toInt(styles.borderRightWidth)\n  );\n}\n\nvar env = {\n  isWebKit:\n    typeof document !== 'undefined' &&\n    'WebkitAppearance' in document.documentElement.style,\n  supportsTouch:\n    typeof window !== 'undefined' &&\n    ('ontouchstart' in window ||\n      ('maxTouchPoints' in window.navigator &&\n        window.navigator.maxTouchPoints > 0) ||\n      (window.DocumentTouch && document instanceof window.DocumentTouch)),\n  supportsIePointer:\n    typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,\n  isChrome:\n    typeof navigator !== 'undefined' &&\n    /Chrome/i.test(navigator && navigator.userAgent),\n};\n\nfunction updateGeometry(i) {\n  var element = i.element;\n  var roundedScrollTop = Math.floor(element.scrollTop);\n  var rect = element.getBoundingClientRect();\n\n  i.containerWidth = Math.round(rect.width);\n  i.containerHeight = Math.round(rect.height);\n\n  i.contentWidth = element.scrollWidth;\n  i.contentHeight = element.scrollHeight;\n\n  if (!element.contains(i.scrollbarXRail)) {\n    // clean up and append\n    queryChildren(element, cls.element.rail('x')).forEach(function (el) { return remove(el); }\n    );\n    element.appendChild(i.scrollbarXRail);\n  }\n  if (!element.contains(i.scrollbarYRail)) {\n    // clean up and append\n    queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }\n    );\n    element.appendChild(i.scrollbarYRail);\n  }\n\n  if (\n    !i.settings.suppressScrollX &&\n    i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth\n  ) {\n    i.scrollbarXActive = true;\n    i.railXWidth = i.containerWidth - i.railXMarginWidth;\n    i.railXRatio = i.containerWidth / i.railXWidth;\n    i.scrollbarXWidth = getThumbSize(\n      i,\n      toInt((i.railXWidth * i.containerWidth) / i.contentWidth)\n    );\n    i.scrollbarXLeft = toInt(\n      ((i.negativeScrollAdjustment + element.scrollLeft) *\n        (i.railXWidth - i.scrollbarXWidth)) /\n        (i.contentWidth - i.containerWidth)\n    );\n  } else {\n    i.scrollbarXActive = false;\n  }\n\n  if (\n    !i.settings.suppressScrollY &&\n    i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight\n  ) {\n    i.scrollbarYActive = true;\n    i.railYHeight = i.containerHeight - i.railYMarginHeight;\n    i.railYRatio = i.containerHeight / i.railYHeight;\n    i.scrollbarYHeight = getThumbSize(\n      i,\n      toInt((i.railYHeight * i.containerHeight) / i.contentHeight)\n    );\n    i.scrollbarYTop = toInt(\n      (roundedScrollTop * (i.railYHeight - i.scrollbarYHeight)) /\n        (i.contentHeight - i.containerHeight)\n    );\n  } else {\n    i.scrollbarYActive = false;\n  }\n\n  if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {\n    i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;\n  }\n  if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {\n    i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;\n  }\n\n  updateCss(element, i);\n\n  if (i.scrollbarXActive) {\n    element.classList.add(cls.state.active('x'));\n  } else {\n    element.classList.remove(cls.state.active('x'));\n    i.scrollbarXWidth = 0;\n    i.scrollbarXLeft = 0;\n    element.scrollLeft = i.isRtl === true ? i.contentWidth : 0;\n  }\n  if (i.scrollbarYActive) {\n    element.classList.add(cls.state.active('y'));\n  } else {\n    element.classList.remove(cls.state.active('y'));\n    i.scrollbarYHeight = 0;\n    i.scrollbarYTop = 0;\n    element.scrollTop = 0;\n  }\n}\n\nfunction getThumbSize(i, thumbSize) {\n  if (i.settings.minScrollbarLength) {\n    thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);\n  }\n  if (i.settings.maxScrollbarLength) {\n    thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);\n  }\n  return thumbSize;\n}\n\nfunction updateCss(element, i) {\n  var xRailOffset = { width: i.railXWidth };\n  var roundedScrollTop = Math.floor(element.scrollTop);\n\n  if (i.isRtl) {\n    xRailOffset.left =\n      i.negativeScrollAdjustment +\n      element.scrollLeft +\n      i.containerWidth -\n      i.contentWidth;\n  } else {\n    xRailOffset.left = element.scrollLeft;\n  }\n  if (i.isScrollbarXUsingBottom) {\n    xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;\n  } else {\n    xRailOffset.top = i.scrollbarXTop + roundedScrollTop;\n  }\n  set(i.scrollbarXRail, xRailOffset);\n\n  var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };\n  if (i.isScrollbarYUsingRight) {\n    if (i.isRtl) {\n      yRailOffset.right =\n        i.contentWidth -\n        (i.negativeScrollAdjustment + element.scrollLeft) -\n        i.scrollbarYRight -\n        i.scrollbarYOuterWidth -\n        9;\n    } else {\n      yRailOffset.right = i.scrollbarYRight - element.scrollLeft;\n    }\n  } else {\n    if (i.isRtl) {\n      yRailOffset.left =\n        i.negativeScrollAdjustment +\n        element.scrollLeft +\n        i.containerWidth * 2 -\n        i.contentWidth -\n        i.scrollbarYLeft -\n        i.scrollbarYOuterWidth;\n    } else {\n      yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;\n    }\n  }\n  set(i.scrollbarYRail, yRailOffset);\n\n  set(i.scrollbarX, {\n    left: i.scrollbarXLeft,\n    width: i.scrollbarXWidth - i.railBorderXWidth,\n  });\n  set(i.scrollbarY, {\n    top: i.scrollbarYTop,\n    height: i.scrollbarYHeight - i.railBorderYWidth,\n  });\n}\n\nfunction clickRail(i) {\n  var element = i.element;\n\n  i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });\n  i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {\n    var positionTop =\n      e.pageY -\n      window.pageYOffset -\n      i.scrollbarYRail.getBoundingClientRect().top;\n    var direction = positionTop > i.scrollbarYTop ? 1 : -1;\n\n    i.element.scrollTop += direction * i.containerHeight;\n    updateGeometry(i);\n\n    e.stopPropagation();\n  });\n\n  i.event.bind(i.scrollbarX, 'mousedown', function (e) { return e.stopPropagation(); });\n  i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {\n    var positionLeft =\n      e.pageX -\n      window.pageXOffset -\n      i.scrollbarXRail.getBoundingClientRect().left;\n    var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;\n\n    i.element.scrollLeft += direction * i.containerWidth;\n    updateGeometry(i);\n\n    e.stopPropagation();\n  });\n}\n\nfunction dragThumb(i) {\n  bindMouseScrollHandler(i, [\n    'containerWidth',\n    'contentWidth',\n    'pageX',\n    'railXWidth',\n    'scrollbarX',\n    'scrollbarXWidth',\n    'scrollLeft',\n    'x',\n    'scrollbarXRail' ]);\n  bindMouseScrollHandler(i, [\n    'containerHeight',\n    'contentHeight',\n    'pageY',\n    'railYHeight',\n    'scrollbarY',\n    'scrollbarYHeight',\n    'scrollTop',\n    'y',\n    'scrollbarYRail' ]);\n}\n\nfunction bindMouseScrollHandler(\n  i,\n  ref\n) {\n  var containerHeight = ref[0];\n  var contentHeight = ref[1];\n  var pageY = ref[2];\n  var railYHeight = ref[3];\n  var scrollbarY = ref[4];\n  var scrollbarYHeight = ref[5];\n  var scrollTop = ref[6];\n  var y = ref[7];\n  var scrollbarYRail = ref[8];\n\n  var element = i.element;\n\n  var startingScrollTop = null;\n  var startingMousePageY = null;\n  var scrollBy = null;\n\n  function mouseMoveHandler(e) {\n    if (e.touches && e.touches[0]) {\n      e[pageY] = e.touches[0].pageY;\n    }\n    element[scrollTop] =\n      startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);\n    addScrollingClass(i, y);\n    updateGeometry(i);\n\n    e.stopPropagation();\n    if (e.type.startsWith('touch') && e.changedTouches.length > 1) {\n      e.preventDefault();\n    }\n  }\n\n  function mouseUpHandler() {\n    removeScrollingClass(i, y);\n    i[scrollbarYRail].classList.remove(cls.state.clicking);\n    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);\n  }\n\n  function bindMoves(e, touchMode) {\n    startingScrollTop = element[scrollTop];\n    if (touchMode && e.touches) {\n      e[pageY] = e.touches[0].pageY;\n    }\n    startingMousePageY = e[pageY];\n    scrollBy =\n      (i[contentHeight] - i[containerHeight]) /\n      (i[railYHeight] - i[scrollbarYHeight]);\n    if (!touchMode) {\n      i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);\n      i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);\n      e.preventDefault();\n    } else {\n      i.event.bind(i.ownerDocument, 'touchmove', mouseMoveHandler);\n    }\n\n    i[scrollbarYRail].classList.add(cls.state.clicking);\n\n    e.stopPropagation();\n  }\n\n  i.event.bind(i[scrollbarY], 'mousedown', function (e) {\n    bindMoves(e);\n  });\n  i.event.bind(i[scrollbarY], 'touchstart', function (e) {\n    bindMoves(e, true);\n  });\n}\n\nfunction keyboard(i) {\n  var element = i.element;\n\n  var elementHovered = function () { return matches(element, ':hover'); };\n  var scrollbarFocused = function () { return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus'); };\n\n  function shouldPreventDefault(deltaX, deltaY) {\n    var scrollTop = Math.floor(element.scrollTop);\n    if (deltaX === 0) {\n      if (!i.scrollbarYActive) {\n        return false;\n      }\n      if (\n        (scrollTop === 0 && deltaY > 0) ||\n        (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)\n      ) {\n        return !i.settings.wheelPropagation;\n      }\n    }\n\n    var scrollLeft = element.scrollLeft;\n    if (deltaY === 0) {\n      if (!i.scrollbarXActive) {\n        return false;\n      }\n      if (\n        (scrollLeft === 0 && deltaX < 0) ||\n        (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)\n      ) {\n        return !i.settings.wheelPropagation;\n      }\n    }\n    return true;\n  }\n\n  i.event.bind(i.ownerDocument, 'keydown', function (e) {\n    if (\n      (e.isDefaultPrevented && e.isDefaultPrevented()) ||\n      e.defaultPrevented\n    ) {\n      return;\n    }\n\n    if (!elementHovered() && !scrollbarFocused()) {\n      return;\n    }\n\n    var activeElement = document.activeElement\n      ? document.activeElement\n      : i.ownerDocument.activeElement;\n    if (activeElement) {\n      if (activeElement.tagName === 'IFRAME') {\n        activeElement = activeElement.contentDocument.activeElement;\n      } else {\n        // go deeper if element is a webcomponent\n        while (activeElement.shadowRoot) {\n          activeElement = activeElement.shadowRoot.activeElement;\n        }\n      }\n      if (isEditable(activeElement)) {\n        return;\n      }\n    }\n\n    var deltaX = 0;\n    var deltaY = 0;\n\n    switch (e.which) {\n      case 37: // left\n        if (e.metaKey) {\n          deltaX = -i.contentWidth;\n        } else if (e.altKey) {\n          deltaX = -i.containerWidth;\n        } else {\n          deltaX = -30;\n        }\n        break;\n      case 38: // up\n        if (e.metaKey) {\n          deltaY = i.contentHeight;\n        } else if (e.altKey) {\n          deltaY = i.containerHeight;\n        } else {\n          deltaY = 30;\n        }\n        break;\n      case 39: // right\n        if (e.metaKey) {\n          deltaX = i.contentWidth;\n        } else if (e.altKey) {\n          deltaX = i.containerWidth;\n        } else {\n          deltaX = 30;\n        }\n        break;\n      case 40: // down\n        if (e.metaKey) {\n          deltaY = -i.contentHeight;\n        } else if (e.altKey) {\n          deltaY = -i.containerHeight;\n        } else {\n          deltaY = -30;\n        }\n        break;\n      case 32: // space bar\n        if (e.shiftKey) {\n          deltaY = i.containerHeight;\n        } else {\n          deltaY = -i.containerHeight;\n        }\n        break;\n      case 33: // page up\n        deltaY = i.containerHeight;\n        break;\n      case 34: // page down\n        deltaY = -i.containerHeight;\n        break;\n      case 36: // home\n        deltaY = i.contentHeight;\n        break;\n      case 35: // end\n        deltaY = -i.contentHeight;\n        break;\n      default:\n        return;\n    }\n\n    if (i.settings.suppressScrollX && deltaX !== 0) {\n      return;\n    }\n    if (i.settings.suppressScrollY && deltaY !== 0) {\n      return;\n    }\n\n    element.scrollTop -= deltaY;\n    element.scrollLeft += deltaX;\n    updateGeometry(i);\n\n    if (shouldPreventDefault(deltaX, deltaY)) {\n      e.preventDefault();\n    }\n  });\n}\n\nfunction wheel(i) {\n  var element = i.element;\n\n  function shouldPreventDefault(deltaX, deltaY) {\n    var roundedScrollTop = Math.floor(element.scrollTop);\n    var isTop = element.scrollTop === 0;\n    var isBottom =\n      roundedScrollTop + element.offsetHeight === element.scrollHeight;\n    var isLeft = element.scrollLeft === 0;\n    var isRight =\n      element.scrollLeft + element.offsetWidth === element.scrollWidth;\n\n    var hitsBound;\n\n    // pick axis with primary direction\n    if (Math.abs(deltaY) > Math.abs(deltaX)) {\n      hitsBound = isTop || isBottom;\n    } else {\n      hitsBound = isLeft || isRight;\n    }\n\n    return hitsBound ? !i.settings.wheelPropagation : true;\n  }\n\n  function getDeltaFromEvent(e) {\n    var deltaX = e.deltaX;\n    var deltaY = -1 * e.deltaY;\n\n    if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {\n      // OS X Safari\n      deltaX = (-1 * e.wheelDeltaX) / 6;\n      deltaY = e.wheelDeltaY / 6;\n    }\n\n    if (e.deltaMode && e.deltaMode === 1) {\n      // Firefox in deltaMode 1: Line scrolling\n      deltaX *= 10;\n      deltaY *= 10;\n    }\n\n    if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {\n      // IE in some mouse drivers\n      deltaX = 0;\n      deltaY = e.wheelDelta;\n    }\n\n    if (e.shiftKey) {\n      // reverse axis with shift key\n      return [-deltaY, -deltaX];\n    }\n    return [deltaX, deltaY];\n  }\n\n  function shouldBeConsumedByChild(target, deltaX, deltaY) {\n    // FIXME: this is a workaround for <select> issue in FF and IE #571\n    if (!env.isWebKit && element.querySelector('select:focus')) {\n      return true;\n    }\n\n    if (!element.contains(target)) {\n      return false;\n    }\n\n    var cursor = target;\n\n    while (cursor && cursor !== element) {\n      if (cursor.classList.contains(cls.element.consuming)) {\n        return true;\n      }\n\n      var style = get(cursor);\n\n      // if deltaY && vertical scrollable\n      if (deltaY && style.overflowY.match(/(scroll|auto)/)) {\n        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\n        if (maxScrollTop > 0) {\n          if (\n            (cursor.scrollTop > 0 && deltaY < 0) ||\n            (cursor.scrollTop < maxScrollTop && deltaY > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n      // if deltaX && horizontal scrollable\n      if (deltaX && style.overflowX.match(/(scroll|auto)/)) {\n        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\n        if (maxScrollLeft > 0) {\n          if (\n            (cursor.scrollLeft > 0 && deltaX < 0) ||\n            (cursor.scrollLeft < maxScrollLeft && deltaX > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n\n      cursor = cursor.parentNode;\n    }\n\n    return false;\n  }\n\n  function mousewheelHandler(e) {\n    var ref = getDeltaFromEvent(e);\n    var deltaX = ref[0];\n    var deltaY = ref[1];\n\n    if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {\n      return;\n    }\n\n    var shouldPrevent = false;\n    if (!i.settings.useBothWheelAxes) {\n      // deltaX will only be used for horizontal scrolling and deltaY will\n      // only be used for vertical scrolling - this is the default\n      element.scrollTop -= deltaY * i.settings.wheelSpeed;\n      element.scrollLeft += deltaX * i.settings.wheelSpeed;\n    } else if (i.scrollbarYActive && !i.scrollbarXActive) {\n      // only vertical scrollbar is active and useBothWheelAxes option is\n      // active, so let's scroll vertical bar using both mouse wheel axes\n      if (deltaY) {\n        element.scrollTop -= deltaY * i.settings.wheelSpeed;\n      } else {\n        element.scrollTop += deltaX * i.settings.wheelSpeed;\n      }\n      shouldPrevent = true;\n    } else if (i.scrollbarXActive && !i.scrollbarYActive) {\n      // useBothWheelAxes and only horizontal bar is active, so use both\n      // wheel axes for horizontal bar\n      if (deltaX) {\n        element.scrollLeft += deltaX * i.settings.wheelSpeed;\n      } else {\n        element.scrollLeft -= deltaY * i.settings.wheelSpeed;\n      }\n      shouldPrevent = true;\n    }\n\n    updateGeometry(i);\n\n    shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);\n    if (shouldPrevent && !e.ctrlKey) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n\n  if (typeof window.onwheel !== 'undefined') {\n    i.event.bind(element, 'wheel', mousewheelHandler);\n  } else if (typeof window.onmousewheel !== 'undefined') {\n    i.event.bind(element, 'mousewheel', mousewheelHandler);\n  }\n}\n\nfunction touch(i) {\n  if (!env.supportsTouch && !env.supportsIePointer) {\n    return;\n  }\n\n  var element = i.element;\n\n  function shouldPrevent(deltaX, deltaY) {\n    var scrollTop = Math.floor(element.scrollTop);\n    var scrollLeft = element.scrollLeft;\n    var magnitudeX = Math.abs(deltaX);\n    var magnitudeY = Math.abs(deltaY);\n\n    if (magnitudeY > magnitudeX) {\n      // user is perhaps trying to swipe up/down the page\n\n      if (\n        (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||\n        (deltaY > 0 && scrollTop === 0)\n      ) {\n        // set prevent for mobile Chrome refresh\n        return window.scrollY === 0 && deltaY > 0 && env.isChrome;\n      }\n    } else if (magnitudeX > magnitudeY) {\n      // user is perhaps trying to swipe left/right across the page\n\n      if (\n        (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||\n        (deltaX > 0 && scrollLeft === 0)\n      ) {\n        return true;\n      }\n    }\n\n    return true;\n  }\n\n  function applyTouchMove(differenceX, differenceY) {\n    element.scrollTop -= differenceY;\n    element.scrollLeft -= differenceX;\n\n    updateGeometry(i);\n  }\n\n  var startOffset = {};\n  var startTime = 0;\n  var speed = {};\n  var easingLoop = null;\n\n  function getTouch(e) {\n    if (e.targetTouches) {\n      return e.targetTouches[0];\n    } else {\n      // Maybe IE pointer\n      return e;\n    }\n  }\n\n  function shouldHandle(e) {\n    if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {\n      return false;\n    }\n    if (e.targetTouches && e.targetTouches.length === 1) {\n      return true;\n    }\n    if (\n      e.pointerType &&\n      e.pointerType !== 'mouse' &&\n      e.pointerType !== e.MSPOINTER_TYPE_MOUSE\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  function touchStart(e) {\n    if (!shouldHandle(e)) {\n      return;\n    }\n\n    var touch = getTouch(e);\n\n    startOffset.pageX = touch.pageX;\n    startOffset.pageY = touch.pageY;\n\n    startTime = new Date().getTime();\n\n    if (easingLoop !== null) {\n      clearInterval(easingLoop);\n    }\n  }\n\n  function shouldBeConsumedByChild(target, deltaX, deltaY) {\n    if (!element.contains(target)) {\n      return false;\n    }\n\n    var cursor = target;\n\n    while (cursor && cursor !== element) {\n      if (cursor.classList.contains(cls.element.consuming)) {\n        return true;\n      }\n\n      var style = get(cursor);\n\n      // if deltaY && vertical scrollable\n      if (deltaY && style.overflowY.match(/(scroll|auto)/)) {\n        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;\n        if (maxScrollTop > 0) {\n          if (\n            (cursor.scrollTop > 0 && deltaY < 0) ||\n            (cursor.scrollTop < maxScrollTop && deltaY > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n      // if deltaX && horizontal scrollable\n      if (deltaX && style.overflowX.match(/(scroll|auto)/)) {\n        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;\n        if (maxScrollLeft > 0) {\n          if (\n            (cursor.scrollLeft > 0 && deltaX < 0) ||\n            (cursor.scrollLeft < maxScrollLeft && deltaX > 0)\n          ) {\n            return true;\n          }\n        }\n      }\n\n      cursor = cursor.parentNode;\n    }\n\n    return false;\n  }\n\n  function touchMove(e) {\n    if (shouldHandle(e)) {\n      var touch = getTouch(e);\n\n      var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };\n\n      var differenceX = currentOffset.pageX - startOffset.pageX;\n      var differenceY = currentOffset.pageY - startOffset.pageY;\n\n      if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {\n        return;\n      }\n\n      applyTouchMove(differenceX, differenceY);\n      startOffset = currentOffset;\n\n      var currentTime = new Date().getTime();\n\n      var timeGap = currentTime - startTime;\n      if (timeGap > 0) {\n        speed.x = differenceX / timeGap;\n        speed.y = differenceY / timeGap;\n        startTime = currentTime;\n      }\n\n      if (shouldPrevent(differenceX, differenceY)) {\n        e.preventDefault();\n      }\n    }\n  }\n  function touchEnd() {\n    if (i.settings.swipeEasing) {\n      clearInterval(easingLoop);\n      easingLoop = setInterval(function() {\n        if (i.isInitialized) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        if (!speed.x && !speed.y) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        if (!i.element) {\n          clearInterval(easingLoop);\n          return;\n        }\n\n        applyTouchMove(speed.x * 30, speed.y * 30);\n\n        speed.x *= 0.8;\n        speed.y *= 0.8;\n      }, 10);\n    }\n  }\n\n  if (env.supportsTouch) {\n    i.event.bind(element, 'touchstart', touchStart);\n    i.event.bind(element, 'touchmove', touchMove);\n    i.event.bind(element, 'touchend', touchEnd);\n  } else if (env.supportsIePointer) {\n    if (window.PointerEvent) {\n      i.event.bind(element, 'pointerdown', touchStart);\n      i.event.bind(element, 'pointermove', touchMove);\n      i.event.bind(element, 'pointerup', touchEnd);\n    } else if (window.MSPointerEvent) {\n      i.event.bind(element, 'MSPointerDown', touchStart);\n      i.event.bind(element, 'MSPointerMove', touchMove);\n      i.event.bind(element, 'MSPointerUp', touchEnd);\n    }\n  }\n}\n\nvar defaultSettings = function () { return ({\n  handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],\n  maxScrollbarLength: null,\n  minScrollbarLength: null,\n  scrollingThreshold: 1000,\n  scrollXMarginOffset: 0,\n  scrollYMarginOffset: 0,\n  suppressScrollX: false,\n  suppressScrollY: false,\n  swipeEasing: true,\n  useBothWheelAxes: false,\n  wheelPropagation: true,\n  wheelSpeed: 1,\n}); };\n\nvar handlers = {\n  'click-rail': clickRail,\n  'drag-thumb': dragThumb,\n  keyboard: keyboard,\n  wheel: wheel,\n  touch: touch,\n};\n\nvar PerfectScrollbar = function PerfectScrollbar(element, userSettings) {\n  var this$1 = this;\n  if ( userSettings === void 0 ) userSettings = {};\n\n  if (typeof element === 'string') {\n    element = document.querySelector(element);\n  }\n\n  if (!element || !element.nodeName) {\n    throw new Error('no element is specified to initialize PerfectScrollbar');\n  }\n\n  this.element = element;\n\n  element.classList.add(cls.main);\n\n  this.settings = defaultSettings();\n  for (var key in userSettings) {\n    this.settings[key] = userSettings[key];\n  }\n\n  this.containerWidth = null;\n  this.containerHeight = null;\n  this.contentWidth = null;\n  this.contentHeight = null;\n\n  var focus = function () { return element.classList.add(cls.state.focus); };\n  var blur = function () { return element.classList.remove(cls.state.focus); };\n\n  this.isRtl = get(element).direction === 'rtl';\n  if (this.isRtl === true) {\n    element.classList.add(cls.rtl);\n  }\n  this.isNegativeScroll = (function () {\n    var originalScrollLeft = element.scrollLeft;\n    var result = null;\n    element.scrollLeft = -1;\n    result = element.scrollLeft < 0;\n    element.scrollLeft = originalScrollLeft;\n    return result;\n  })();\n  this.negativeScrollAdjustment = this.isNegativeScroll\n    ? element.scrollWidth - element.clientWidth\n    : 0;\n  this.event = new EventManager();\n  this.ownerDocument = element.ownerDocument || document;\n\n  this.scrollbarXRail = div(cls.element.rail('x'));\n  element.appendChild(this.scrollbarXRail);\n  this.scrollbarX = div(cls.element.thumb('x'));\n  this.scrollbarXRail.appendChild(this.scrollbarX);\n  this.scrollbarX.setAttribute('tabindex', 0);\n  this.event.bind(this.scrollbarX, 'focus', focus);\n  this.event.bind(this.scrollbarX, 'blur', blur);\n  this.scrollbarXActive = null;\n  this.scrollbarXWidth = null;\n  this.scrollbarXLeft = null;\n  var railXStyle = get(this.scrollbarXRail);\n  this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);\n  if (isNaN(this.scrollbarXBottom)) {\n    this.isScrollbarXUsingBottom = false;\n    this.scrollbarXTop = toInt(railXStyle.top);\n  } else {\n    this.isScrollbarXUsingBottom = true;\n  }\n  this.railBorderXWidth =\n    toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth);\n  // Set rail to display:block to calculate margins\n  set(this.scrollbarXRail, { display: 'block' });\n  this.railXMarginWidth =\n    toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);\n  set(this.scrollbarXRail, { display: '' });\n  this.railXWidth = null;\n  this.railXRatio = null;\n\n  this.scrollbarYRail = div(cls.element.rail('y'));\n  element.appendChild(this.scrollbarYRail);\n  this.scrollbarY = div(cls.element.thumb('y'));\n  this.scrollbarYRail.appendChild(this.scrollbarY);\n  this.scrollbarY.setAttribute('tabindex', 0);\n  this.event.bind(this.scrollbarY, 'focus', focus);\n  this.event.bind(this.scrollbarY, 'blur', blur);\n  this.scrollbarYActive = null;\n  this.scrollbarYHeight = null;\n  this.scrollbarYTop = null;\n  var railYStyle = get(this.scrollbarYRail);\n  this.scrollbarYRight = parseInt(railYStyle.right, 10);\n  if (isNaN(this.scrollbarYRight)) {\n    this.isScrollbarYUsingRight = false;\n    this.scrollbarYLeft = toInt(railYStyle.left);\n  } else {\n    this.isScrollbarYUsingRight = true;\n  }\n  this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;\n  this.railBorderYWidth =\n    toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);\n  set(this.scrollbarYRail, { display: 'block' });\n  this.railYMarginHeight =\n    toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);\n  set(this.scrollbarYRail, { display: '' });\n  this.railYHeight = null;\n  this.railYRatio = null;\n\n  this.reach = {\n    x:\n      element.scrollLeft <= 0\n        ? 'start'\n        : element.scrollLeft >= this.contentWidth - this.containerWidth\n        ? 'end'\n        : null,\n    y:\n      element.scrollTop <= 0\n        ? 'start'\n        : element.scrollTop >= this.contentHeight - this.containerHeight\n        ? 'end'\n        : null,\n  };\n\n  this.isAlive = true;\n\n  this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });\n\n  this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only\n  this.lastScrollLeft = element.scrollLeft; // for onScroll only\n  this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });\n  updateGeometry(this);\n};\n\nPerfectScrollbar.prototype.update = function update () {\n  if (!this.isAlive) {\n    return;\n  }\n\n  // Recalcuate negative scrollLeft adjustment\n  this.negativeScrollAdjustment = this.isNegativeScroll\n    ? this.element.scrollWidth - this.element.clientWidth\n    : 0;\n\n  // Recalculate rail margins\n  set(this.scrollbarXRail, { display: 'block' });\n  set(this.scrollbarYRail, { display: 'block' });\n  this.railXMarginWidth =\n    toInt(get(this.scrollbarXRail).marginLeft) +\n    toInt(get(this.scrollbarXRail).marginRight);\n  this.railYMarginHeight =\n    toInt(get(this.scrollbarYRail).marginTop) +\n    toInt(get(this.scrollbarYRail).marginBottom);\n\n  // Hide scrollbars not to affect scrollWidth and scrollHeight\n  set(this.scrollbarXRail, { display: 'none' });\n  set(this.scrollbarYRail, { display: 'none' });\n\n  updateGeometry(this);\n\n  processScrollDiff(this, 'top', 0, false, true);\n  processScrollDiff(this, 'left', 0, false, true);\n\n  set(this.scrollbarXRail, { display: '' });\n  set(this.scrollbarYRail, { display: '' });\n};\n\nPerfectScrollbar.prototype.onScroll = function onScroll (e) {\n  if (!this.isAlive) {\n    return;\n  }\n\n  updateGeometry(this);\n  processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);\n  processScrollDiff(\n    this,\n    'left',\n    this.element.scrollLeft - this.lastScrollLeft\n  );\n\n  this.lastScrollTop = Math.floor(this.element.scrollTop);\n  this.lastScrollLeft = this.element.scrollLeft;\n};\n\nPerfectScrollbar.prototype.destroy = function destroy () {\n  if (!this.isAlive) {\n    return;\n  }\n\n  this.event.unbindAll();\n  remove(this.scrollbarX);\n  remove(this.scrollbarY);\n  remove(this.scrollbarXRail);\n  remove(this.scrollbarYRail);\n  this.removePsClasses();\n\n  // unset elements\n  this.element = null;\n  this.scrollbarX = null;\n  this.scrollbarY = null;\n  this.scrollbarXRail = null;\n  this.scrollbarYRail = null;\n\n  this.isAlive = false;\n};\n\nPerfectScrollbar.prototype.removePsClasses = function removePsClasses () {\n  this.element.className = this.element.className\n    .split(' ')\n    .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })\n    .join(' ');\n};\n\nexport default PerfectScrollbar;\n//# sourceMappingURL=perfect-scrollbar.esm.js.map\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\n/* eslint-disable indent */\r\nconst ATTR_SORT_ICON = \"data-te-datatable-sort-icon-ref\";\r\nconst ATTR_HEADER_CHECKBOX = \"data-te-datatable-header-checkbox-ref\";\r\n\r\nconst columns = (\r\n  columns,\r\n  selectable,\r\n  multi,\r\n  bordered,\r\n  sm,\r\n  loading,\r\n  sortIconTemplate,\r\n  classes\r\n) => {\r\n  const checkboxHeader = multi\r\n    ? `\r\n  <th scope=\"col\">\r\n    <div class=\"${classes.checkboxHeaderWrapper}\">\r\n      <input\r\n        class=\"${classes.checkboxHeader}\"\r\n        type=\"checkbox\"\r\n        value=\"\"\r\n        ${ATTR_HEADER_CHECKBOX}\r\n        />\r\n    </div>\r\n  </th>\r\n  `\r\n    : '<th scope=\"col\"></th>';\r\n  const headers = columns.map((column, i) => {\r\n    const fixedOffset = column.fixed\r\n      ? columns\r\n          .filter((cell, j) => cell.fixed === column.fixed && j < i)\r\n          .reduce((a, b) => a + b.width, 0)\r\n      : null;\r\n    return `<th class=\"${classes.column} ${\r\n      bordered ? `${classes.tableBordered}` : \"\"\r\n    } ${classes.borderColor} ${sm ? `${classes.sm}` : \"\"} ${\r\n      column.fixed ? `${classes.fixedHeader} ${classes.color}` : \"\"\r\n    } ${loading ? `${classes.loadingColumn}` : \"\"}\" style=\"${\r\n      column.fixed\r\n        ? `${column.fixed === \"right\" ? \"right\" : \"left\"}: ${fixedOffset}px;`\r\n        : \"\"\r\n    }\" scope=\"col\">${\r\n      column.sort\r\n        ? `<div class=\"${classes.sortIconWrapper}\"><span class=\"${\r\n            classes.sortIcon\r\n          } ${loading ? \"invisible\" : \"\"}\" data-te-sort=\"${\r\n            column.field\r\n          }\" ${ATTR_SORT_ICON}>${sortIconTemplate}</span>`\r\n        : \"\"\r\n    } <span class=\"${column.sort ? \"\" : \"pl-[18px]\"}\">${\r\n      column.label\r\n    }</span></div></th>`;\r\n  });\r\n\r\n  return [selectable ? checkboxHeader : \"\", ...headers].join(\"\\n\");\r\n};\r\n\r\nexport default columns;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\n/* eslint-disable indent */\r\nimport paginationTemplate from \"./pagination\";\r\nimport generateColumns from \"./columns\";\r\nimport generateRows from \"./rows\";\r\n\r\nconst ATTR_BODY = \"data-te-datatable-inner-ref\";\r\nconst ATTR_HEADER = \"data-te-datatable-header-ref\";\r\n\r\nconst tableTemplate = ({\r\n  columns,\r\n  rows,\r\n  noFoundMessage,\r\n  edit,\r\n  multi,\r\n  selectable,\r\n  loading,\r\n  loadingMessage,\r\n  pagination,\r\n  bordered,\r\n  borderless,\r\n  striped,\r\n  hover,\r\n  fixedHeader,\r\n  sm,\r\n  sortIconTemplate,\r\n  classes,\r\n}) => {\r\n  const rowsTemplate = generateRows({\r\n    rows,\r\n    columns,\r\n    noFoundMessage,\r\n    edit,\r\n    loading,\r\n    selectable,\r\n    bordered,\r\n    borderless,\r\n    striped,\r\n    hover,\r\n    sm,\r\n    classes,\r\n  });\r\n  const columnsTemplate = generateColumns(\r\n    columns,\r\n    selectable,\r\n    multi,\r\n    bordered,\r\n    sm,\r\n    loading,\r\n    sortIconTemplate,\r\n    classes\r\n  );\r\n\r\n  const table = `\r\n<div class=\"${classes.color}\" ${ATTR_BODY}>\r\n  <table class=\"${classes.table}\">\r\n    <thead class=\"${classes.tableHeader} ${\r\n    bordered ? `${classes.tableBordered}` : \"\"\r\n  } ${borderless ? `${classes.borderless}` : \"\"} ${\r\n    classes.borderColor\r\n  }\" ${ATTR_HEADER}>\r\n      <tr>\r\n        ${columnsTemplate}\r\n      </tr>\r\n    </thead>\r\n    <tbody class=\"${fixedHeader ? `${classes.fixedHeaderBody}` : \"\"}\">\r\n      ${loading ? \"\" : rowsTemplate}\r\n    </tbody>\r\n  </table>\r\n</div>\r\n${\r\n  loading\r\n    ? `\r\n  <div class=\"${classes.loadingItemsWrapper}\">\r\n    <div class=\"${classes.loadingProgressBarWrapper}\">\r\n      <div class=\"${classes.loadingProgressBar}\"></div>\r\n    </div>\r\n  </div>\r\n<p class=\"${classes.loadingMessage}\">${loadingMessage}</p>\r\n`\r\n    : \"\"\r\n}\r\n${pagination.enable ? paginationTemplate(pagination, loading, bordered) : \"\"}\r\n  `;\r\n\r\n  return { table, rows: rowsTemplate, column: columnsTemplate };\r\n};\r\n\r\nexport default tableTemplate;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\n/* eslint-disable indent */\r\nconst ATTR_ROW = \"data-te-datatable-row-ref\";\r\nconst ATTR_ROW_CHECKBOX = \"data-te-datatable-row-checkbox-ref\";\r\nconst ATTR_CELL = \"data-te-datatable-cell-ref\";\r\n\r\nconst rows = ({\r\n  rows,\r\n  columns,\r\n  noFoundMessage,\r\n  edit,\r\n  selectable,\r\n  loading,\r\n  bordered,\r\n  borderless,\r\n  striped,\r\n  hover,\r\n  sm,\r\n  classes,\r\n}) => {\r\n  const rowsTemplate = rows.map((row) => {\r\n    const checkbox = `\r\n      <td data-te-field=\"checkbox\" class=\"${\r\n        bordered ? `${classes.tableBordered} ${classes.borderColor}` : \"\"\r\n      }\">\r\n        <div class=\"${classes.checkboxRowWrapper}\">\r\n          <input\r\n            class=\"${classes.checkboxRow}\"\r\n            type=\"checkbox\"\r\n            value=\"\"\r\n            data-te-row-index=\"${row.rowIndex}\"  ${ATTR_ROW_CHECKBOX}/>\r\n        </div>\r\n      </td>`;\r\n    const innerRow = columns\r\n      .map((column, i) => {\r\n        const style = {};\r\n\r\n        if (column.width) {\r\n          style[\"min-width\"] = `${column.width - 1}px`;\r\n          style[\"max-width\"] = `${column.width}px`;\r\n          style.width = `${column.width}px`;\r\n        }\r\n        if (column.fixed) {\r\n          const fixedOffset = columns\r\n            .filter((cell, j) => cell.fixed === column.fixed && j < i)\r\n            .reduce((a, b) => a + b.width, 0);\r\n\r\n          style[\r\n            column.fixed === \"right\" ? \"right\" : \"left\"\r\n          ] = `${fixedOffset}px`;\r\n        }\r\n\r\n        const cssText = Object.keys(style)\r\n          .map((property) => `${property}: ${style[property]}`)\r\n          .join(\"; \");\r\n\r\n        return `<td style=\"${cssText}\" class=\"${classes.rowItem} ${\r\n          classes.borderColor\r\n        } ${edit ? `${classes.edit}` : \"\"} ${\r\n          bordered ? `${classes.tableBordered}` : \"\"\r\n        } ${sm ? `${classes.sm}` : \"\"} ${\r\n          column.fixed ? `${classes.fixedHeader} ${classes.color}` : \"\"\r\n        }\" ${ATTR_CELL} data-te-field=\"${column.field}\" ${\r\n          edit && 'contenteditable=\"true\"'\r\n        }>${row[column.field]}</td>`;\r\n      })\r\n      .join(\"\");\r\n\r\n    return `<tr scope=\"row\" class=\"${classes.row} ${classes.borderColor} ${\r\n      classes.rowAnimation\r\n    } ${striped ? `${classes.striped}` : \"\"} ${\r\n      borderless ? `${classes.borderless}` : \"\"\r\n    } ${hover ? `${classes.hoverRow}` : \"\"}\" data-te-index=\"${\r\n      row.rowIndex\r\n    }\" ${ATTR_ROW}>${selectable ? checkbox : \"\"}${innerRow}</tr>`;\r\n  });\r\n\r\n  return rows.length > 0 || loading\r\n    ? rowsTemplate.join(\"\\n\")\r\n    : `<tr class=\"${classes.noFoundMessageWrapper} ${classes.borderColor}\"><td class=\"${classes.noFoundMessage}\">${noFoundMessage}</td></tr>`;\r\n};\r\n\r\nexport default rows;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\nimport PerfectScrollbar from \"../../methods/perfect-scrollbar\";\r\nimport { typeCheckConfig } from \"../../util/index\";\r\nimport Data from \"../../dom/data\";\r\nimport EventHandler from \"../../dom/event-handler\";\r\nimport Manipulator from \"../../dom/manipulator\";\r\nimport SelectorEngine from \"../../dom/selector-engine\";\r\nimport tableTemplate from \"./html/table\"; //eslint-disable-line\r\nimport { search, sort, paginate } from \"./util\";\r\nimport Select from \"../../forms/select\";\r\n\r\n/**\r\n * ------------------------------------------------------------------------\r\n * Constants\r\n * ------------------------------------------------------------------------\r\n */\r\n\r\nconst NAME = \"datatable\";\r\nconst ATTR_NAME = `data-te-${NAME}`;\r\nconst DATA_KEY = `te.${NAME}`;\r\nconst EVENT_KEY = `.${DATA_KEY}`;\r\n\r\nconst ATTR_BODY = `[${ATTR_NAME}-inner-ref]`;\r\nconst ATTR_CELL = `[${ATTR_NAME}-cell-ref]`;\r\nconst ATTR_HEADER = `[${ATTR_NAME}-header-ref]`;\r\nconst ATTR_HEADER_CHECKBOX = `[${ATTR_NAME}-header-checkbox-ref]`;\r\nconst ATTR_PAGINATION_RIGHT = `[${ATTR_NAME}-pagination-right-ref]`;\r\nconst ATTR_PAGINATION_LEFT = `[${ATTR_NAME}-pagination-left-ref]`;\r\nconst ATTR_PAGINATION_START = `[${ATTR_NAME}-pagination-start-ref]`;\r\nconst ATTR_PAGINATION_END = `[${ATTR_NAME}-pagination-end-ref]`;\r\nconst ATTR_PAGINATION_NAV = `[${ATTR_NAME}-pagination-nav-ref]`;\r\nconst ATTR_SELECT = `[${ATTR_NAME}-select-ref]`;\r\nconst ATTR_SORT_ICON = `[${ATTR_NAME}-sort-icon-ref]`;\r\nconst ATTR_ROW = `[${ATTR_NAME}-row-ref]`;\r\nconst ATTR_ROW_CHECKBOX = `[${ATTR_NAME}-row-checkbox-ref]`;\r\n\r\nconst EVENT_SELECT = `selectRows${EVENT_KEY}`;\r\nconst EVENT_RENDER = `render${EVENT_KEY}`;\r\nconst EVENT_ROW_CLICK = `rowClick${EVENT_KEY}`;\r\nconst EVENT_UPDATE = `update${EVENT_KEY}`;\r\n\r\nconst sortIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 10.5L12 3m0 0l7.5 7.5M12 3v18\" />\r\n</svg>`;\r\nconst paginationStartIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5\" />\r\n</svg>`;\r\nconst paginationLeftIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 19.5L8.25 12l7.5-7.5\" />\r\n</svg>`;\r\nconst paginationRightIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 4.5l7.5 7.5-7.5 7.5\" />\r\n</svg>`;\r\nconst paginationEndIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M11.25 4.5l7.5 7.5-7.5 7.5m-6-15l7.5 7.5-7.5 7.5\"/>\r\n</svg>`;\r\n\r\nconst BORDER_COLOR_CLASSES = \"border-neutral-200 dark:border-neutral-500\";\r\nconst BORDERLESS_CLASSES = \"border-none\";\r\nconst CHECKBOX_HEADER_CLASSES =\r\n  \"relative float-left -ml-[1.5rem] mr-[6px] mt-[0.15rem] h-[1.125rem] w-[1.125rem] appearance-none rounded-[0.25rem] border-[0.125rem] border-solid border-neutral-300 outline-none before:pointer-events-none before:absolute before:h-[0.875rem] before:w-[0.875rem] before:scale-0 before:rounded-full before:bg-transparent before:opacity-0 before:shadow-[0px_0px_0px_13px_transparent] before:content-[''] checked:border-primary checked:bg-primary checked:before:opacity-[0.16] checked:after:absolute checked:after:-mt-px checked:after:ml-[0.25rem] checked:after:block checked:after:h-[0.8125rem] checked:after:w-[0.375rem] checked:after:rotate-45 checked:after:border-[0.125rem] checked:after:border-l-0 checked:after:border-t-0 checked:after:border-solid checked:after:border-white checked:after:bg-transparent checked:after:content-[''] hover:cursor-pointer hover:before:opacity-[0.04] hover:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:shadow-none focus:transition-[border-color_0.2s] focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-[0.875rem] focus:after:w-[0.875rem] focus:after:rounded-[0.125rem] focus:after:content-[''] checked:focus:before:scale-100 checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] checked:focus:after:-mt-px checked:focus:after:ml-[0.25rem] checked:focus:after:h-[0.8125rem] checked:focus:after:w-[0.375rem] checked:focus:after:rotate-45 checked:focus:after:rounded-none checked:focus:after:border-[0.125rem] checked:focus:after:border-l-0 checked:focus:after:border-t-0 checked:focus:after:border-solid checked:focus:after:border-white checked:focus:after:bg-transparent dark:border-neutral-600 dark:checked:border-primary dark:checked:bg-primary dark:focus:before:shadow-[0px_0px_0px_13px_rgba(255,255,255,0.4)] dark:checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] dark:border-neutral-400\";\r\nconst CHECKBOX_HEADER_WRAPPER_CLASSES =\r\n  \"mb-[0.125rem] min-h-[1.5rem] pl-[1.5rem] ml-3 flex items-center\";\r\nconst CHECKBOX_ROW_CLASSES =\r\n  \"relative float-left -ml-[1.5rem] mr-[6px] mt-[0.15rem] h-[1.125rem] w-[1.125rem] appearance-none rounded-[0.25rem] border-[0.125rem] border-solid border-neutral-300 outline-none before:pointer-events-none before:absolute before:h-[0.875rem] before:w-[0.875rem] before:scale-0 before:rounded-full before:bg-transparent before:opacity-0 before:shadow-[0px_0px_0px_13px_transparent] before:content-[''] checked:border-primary checked:bg-primary checked:before:opacity-[0.16] checked:after:absolute checked:after:-mt-px checked:after:ml-[0.25rem] checked:after:block checked:after:h-[0.8125rem] checked:after:w-[0.375rem] checked:after:rotate-45 checked:after:border-[0.125rem] checked:after:border-l-0 checked:after:border-t-0 checked:after:border-solid checked:after:border-white checked:after:bg-transparent checked:after:content-[''] hover:cursor-pointer hover:before:opacity-[0.04] hover:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:shadow-none focus:transition-[border-color_0.2s] focus:before:scale-100 focus:before:opacity-[0.12] focus:before:shadow-[0px_0px_0px_13px_rgba(0,0,0,0.6)] focus:before:transition-[box-shadow_0.2s,transform_0.2s] focus:after:absolute focus:after:z-[1] focus:after:block focus:after:h-[0.875rem] focus:after:w-[0.875rem] focus:after:rounded-[0.125rem] focus:after:content-[''] checked:focus:before:scale-100 checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] checked:focus:before:transition-[box-shadow_0.2s,transform_0.2s] checked:focus:after:-mt-px checked:focus:after:ml-[0.25rem] checked:focus:after:h-[0.8125rem] checked:focus:after:w-[0.375rem] checked:focus:after:rotate-45 checked:focus:after:rounded-none checked:focus:after:border-[0.125rem] checked:focus:after:border-l-0 checked:focus:after:border-t-0 checked:focus:after:border-solid checked:focus:after:border-white checked:focus:after:bg-transparent dark:border-neutral-600 dark:checked:border-primary dark:checked:bg-primary dark:focus:before:shadow-[0px_0px_0px_13px_rgba(255,255,255,0.4)] dark:checked:focus:before:shadow-[0px_0px_0px_13px_#3b71ca] dark:border-neutral-400\";\r\nconst CHECKBOX_ROW_WRAPPER_CLASSES =\r\n  \"mb-[0.125rem] min-h-[1.5rem] pl-[1.5rem] ml-3 flex items-center\";\r\nconst COLOR_CLASSES = \"bg-white dark:bg-neutral-800\";\r\nconst COLUMNS_CLASSES =\r\n  \"py-4 pl-1 text-clip overflow-hidden text-[#212529] dark:text-white\";\r\nconst EDIT_CLASSES = \"focus:outline-none\";\r\nconst FIXED_HEADER_CLASSES = \"sticky top-0 z-30\";\r\nconst FIXED_HEADER_BODY_CLASSES = \"sticky z-10 bg-inherit\";\r\nconst HOVER_ROW_CLASSES = \"hover:bg-neutral-100 dark:hover:bg-neutral-700\";\r\nconst LOADING_COLUMN_CLASSES =\r\n  \"pointer-events-none cursor-none text-neutral-400 dark:text-neutral-300\";\r\nconst LOADING_ITEMS_WRAPPER_CLASSES = \"h-[2px] relative w-full overflow-hidden\";\r\nconst LOADING_MESSAGE_CLASSES =\r\n  \"text-center text-neutral-500 font-ligh text-sm my-4 dark:text-neutral-400\";\r\nconst LOADING_PAGINATION_NAV_CLASSES = \"text-neutral-500 dark:text-neutral-300\";\r\nconst LOADING_PAGINATION_ROWS_TEXT_CLASSES =\r\n  \"text-neutral-500 dark:text-neutral-300\";\r\nconst LOADING_PAGINATION_SELECT_WRAPPER_CLASSES =\r\n  \"pointer-events-none cursor-none\";\r\nconst LOADING_PROGRESS_BAR_CLASSES =\r\n  \"h-full w-[45%] bg-primary-400 dark:bg-primary-600\";\r\nconst LOADING_PROGRESS_BAR_WRAPPER_CLASSES =\r\n  \"h-full animate-[progress_3s_ease-in-out_infinite]\";\r\nconst NO_FOUND_MESSAGE_CLASSES =\r\n  \"pl-2 py-3 font-light text-sm dark:text-neutral-300\";\r\nconst NO_FOUND_MESSAGE_WRAPPER_CLASSES = \"border-b\";\r\nconst PAGINATION_CLASSES =\r\n  \"flex md:flex-row justify-end items-center py-2 space-x-4 text-sm flex-col leading-[1.6]\";\r\nconst PAGINATION_BORDERED_CLASSES = \"border border-t-0\";\r\nconst PAGINATION_BUTTONS_WRAPPER_CLASSES =\r\n  \"order-1 my-3 md:order-none md:my-0 md:pr-1\";\r\nconst PAGINATION_END_BUTTON_CLASSES =\r\n  \"inline-block rounded p-2.5 text-xs font-medium uppercase leading-normal transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-primary-600 focus:text-primary-600 focus:outline-none focus:ring-0 active:text-primary-700 disabled:text-slate-300 disabled:hover:bg-transparent dark:hover:bg-neutral-500 dark:disabled:hover:bg-transparent dark:disabled:text-neutral-600\";\r\nconst PAGINATION_LEFT_BUTTON_CLASSES =\r\n  \"inline-block rounded p-2.5 font-medium uppercase leading-normal transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-primary-600 focus:text-primary-600 focus:outline-none focus:ring-0 active:text-primary-700 disabled:text-slate-300 disabled:hover:bg-transparent dark:hover:bg-neutral-500 dark:disabled:hover:bg-transparent dark:disabled:text-neutral-600\";\r\nconst PAGINATION_NAV_CLASSES = \"font-normal order-2 mb-3 md:order-none md:mb-0\";\r\nconst PAGINATION_RIGHT_BUTTON_CLASSES =\r\n  \"inline-block rounded p-2.5 font-medium uppercase leading-normal transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-primary-600 focus:text-primary-600 focus:outline-none focus:ring-0 active:text-primary-700 disabled:text-slate-300 disabled:hover:bg-transparent dark:hover:bg-neutral-500 dark:disabled:hover:bg-transparent dark:disabled:text-neutral-600\";\r\nconst PAGINATION_ROWS_TEXT_CLASSES = \"font-light\";\r\nconst PAGINATION_START_BUTTON_CLASSES =\r\n  \"inline-block rounded p-2.5 font-medium uppercase leading-normal transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-primary-600 focus:text-primary-600 focus:outline-none focus:ring-0 active:text-primary-700 disabled:text-slate-300 disabled:hover:bg-transparent dark:hover:bg-neutral-500 dark:disabled:hover:bg-transparent dark:disabled:text-neutral-600\";\r\nconst ROW_CLASSES = \"border-b\";\r\nconst ROW_ANIMATION_CLASSES =\r\n  \"transition ease-in-out duration-300 motion-reduce:transition-none\";\r\nconst ROW_ITEM_CLASSES =\r\n  \"whitespace-nowrap text-clip overflow-hidden px-[1.4rem] py-4\";\r\nconst SCROLL_CLASSES = \"relative\";\r\nconst SELECTABLE_ROW_CLASSES = \"!bg-neutral-100 dark:!bg-neutral-600\";\r\nconst SELECT_ITEMS_WRAPPER_CLASSES =\r\n  \"flex items-center space-x-4 order-3 md:order-none\";\r\nconst SELECT_WRAPPER_CLASSES = \"w-[70px]\";\r\nconst SM_CLASSES = \"!py-2\";\r\nconst SORT_ICON_CLASSES =\r\n  \"w-[15px] h-[10px] origin-bottom font-black mr-1 opacity-0 text-neutral-500 group-hover:opacity-100 transition hover:ease-in-out transform ease-linear duration-300 motion-reduce:transition-none dark:text-neutral-400\";\r\nconst SORT_ICON_WRAPPER_CLASSES = \"flex flex-row group\";\r\nconst STRIPED_CLASSES =\r\n  \"[&:nth-child(odd)]:bg-neutral-50 [&:nth-child(odd)]:dark:bg-neutral-700\";\r\nconst TABLE_BORDERED_CLASSES = \"border\";\r\nconst TABLE_HEADER_CLASSES = \"border-b font-normal px-[1.4rem]\";\r\nconst TABLE_CLASSES = \"text-left text-sm font-light w-full leading-[1.6]\";\r\n\r\nconst TYPE_OPTIONS = {\r\n  bordered: \"boolean\",\r\n  borderless: \"boolean\",\r\n  clickableRows: \"boolean\",\r\n  defaultValue: \"string\",\r\n  edit: \"boolean\",\r\n  entries: \"(number|string)\",\r\n  entriesOptions: \"array\",\r\n  fullPagination: \"boolean\",\r\n  hover: \"boolean\",\r\n  loading: \"boolean\",\r\n  loadingMessage: \"string\",\r\n  maxWidth: \"(null|number|string)\",\r\n  maxHeight: \"(null|number|string)\",\r\n  multi: \"boolean\",\r\n  noFoundMessage: \"string\",\r\n  pagination: \"boolean\",\r\n  selectable: \"boolean\",\r\n  sm: \"boolean\",\r\n  sortField: \"(null|string)\",\r\n  sortOrder: \"string\",\r\n  fixedHeader: \"boolean\",\r\n  striped: \"boolean\",\r\n  rowsText: \"string\",\r\n  ofText: \"string\",\r\n  allText: \"string\",\r\n  forceSort: \"boolean\",\r\n  sortIconTemplate: \"string\",\r\n  paginationStartIconTemplate: \"string\",\r\n  paginationEndIconTemplate: \"string\",\r\n  paginationLeftIconTemplate: \"string\",\r\n  paginationRightIconTemplate: \"string\",\r\n};\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  bordered: false,\r\n  borderless: false,\r\n  clickableRows: false,\r\n  defaultValue: \"-\",\r\n  edit: false,\r\n  entries: 10,\r\n  entriesOptions: [10, 25, 50, 200],\r\n  fixedHeader: false,\r\n  fullPagination: false,\r\n  hover: false,\r\n  loading: false,\r\n  loadingMessage: \"Loading results...\",\r\n  maxWidth: null,\r\n  maxHeight: null,\r\n  multi: false,\r\n  noFoundMessage: \"No matching results found\",\r\n  pagination: true,\r\n  selectable: false,\r\n  sm: false,\r\n  sortField: null,\r\n  sortOrder: \"asc\",\r\n  striped: false,\r\n  rowsText: \"Rows per page:\",\r\n  ofText: \"of\",\r\n  allText: \"All\",\r\n  forceSort: false,\r\n  sortIconTemplate: sortIconTemplate,\r\n  paginationStartIconTemplate: paginationStartIconTemplate,\r\n  paginationEndIconTemplate: paginationEndIconTemplate,\r\n  paginationLeftIconTemplate: paginationLeftIconTemplate,\r\n  paginationRightIconTemplate: paginationRightIconTemplate,\r\n};\r\n\r\nconst TYPE_COLUMN_FIELDS = {\r\n  label: \"string\",\r\n  field: \"string\",\r\n  fixed: \"(boolean|string)\",\r\n  format: \"(function|null)\",\r\n  width: \"(number|null)\",\r\n  sort: \"boolean\",\r\n  columnIndex: \"number\",\r\n};\r\n\r\nconst DEFAULT_COLUMN = {\r\n  label: \"\",\r\n  field: \"\",\r\n  fixed: false,\r\n  format: null,\r\n  width: null,\r\n  sort: true,\r\n  columnIndex: 0,\r\n};\r\n\r\nconst DefaultClasses = {\r\n  table: TABLE_CLASSES,\r\n  tableHeader: TABLE_HEADER_CLASSES,\r\n  column: COLUMNS_CLASSES,\r\n  pagination: PAGINATION_CLASSES,\r\n  selectWrapper: SELECT_WRAPPER_CLASSES,\r\n  scroll: SCROLL_CLASSES,\r\n  tableBordered: TABLE_BORDERED_CLASSES,\r\n  paginationBordered: PAGINATION_BORDERED_CLASSES,\r\n  borderless: BORDERLESS_CLASSES,\r\n  checkboxRowWrapper: CHECKBOX_ROW_WRAPPER_CLASSES,\r\n  checkboxRow: CHECKBOX_ROW_CLASSES,\r\n  checkboxHeaderWrapper: CHECKBOX_HEADER_WRAPPER_CLASSES,\r\n  checkboxHeader: CHECKBOX_HEADER_CLASSES,\r\n  row: ROW_CLASSES,\r\n  rowItem: ROW_ITEM_CLASSES,\r\n  striped: STRIPED_CLASSES,\r\n  sortIconWrapper: SORT_ICON_WRAPPER_CLASSES,\r\n  sortIcon: SORT_ICON_CLASSES,\r\n  paginationRowsText: PAGINATION_ROWS_TEXT_CLASSES,\r\n  paginationNav: PAGINATION_NAV_CLASSES,\r\n  paginationButtonsWrapper: PAGINATION_BUTTONS_WRAPPER_CLASSES,\r\n  hoverRow: HOVER_ROW_CLASSES,\r\n  borderColor: BORDER_COLOR_CLASSES,\r\n  color: COLOR_CLASSES,\r\n  fixedHeader: FIXED_HEADER_CLASSES,\r\n  fixedHeaderBody: FIXED_HEADER_BODY_CLASSES,\r\n  selectableRow: SELECTABLE_ROW_CLASSES,\r\n  rowAnimation: ROW_ANIMATION_CLASSES,\r\n  sm: SM_CLASSES,\r\n  edit: EDIT_CLASSES,\r\n  selectItemsWrapper: SELECT_ITEMS_WRAPPER_CLASSES,\r\n  paginationStartButton: PAGINATION_START_BUTTON_CLASSES,\r\n  paginationLeftButton: PAGINATION_LEFT_BUTTON_CLASSES,\r\n  paginationRightButton: PAGINATION_RIGHT_BUTTON_CLASSES,\r\n  paginationEndButton: PAGINATION_END_BUTTON_CLASSES,\r\n  loadingItemsWrapper: LOADING_ITEMS_WRAPPER_CLASSES,\r\n  loadingProgressBarWrapper: LOADING_PROGRESS_BAR_WRAPPER_CLASSES,\r\n  loadingProgressBar: LOADING_PROGRESS_BAR_CLASSES,\r\n  loadingMessage: LOADING_MESSAGE_CLASSES,\r\n  loadingPaginationRowsText: LOADING_PAGINATION_ROWS_TEXT_CLASSES,\r\n  loadingPaginationSelectWrapper: LOADING_PAGINATION_SELECT_WRAPPER_CLASSES,\r\n  loadingPaginationNav: LOADING_PAGINATION_NAV_CLASSES,\r\n  loadingColumn: LOADING_COLUMN_CLASSES,\r\n  noFoundMessageWrapper: NO_FOUND_MESSAGE_WRAPPER_CLASSES,\r\n  noFoundMessage: NO_FOUND_MESSAGE_CLASSES,\r\n};\r\n\r\nconst DefaultClassesType = {\r\n  table: \"string\",\r\n  tableHeader: \"string\",\r\n  column: \"string\",\r\n  pagination: \"string\",\r\n  selectWrapper: \"string\",\r\n  scroll: \"string\",\r\n  tableBordered: \"string\",\r\n  paginationBordered: \"string\",\r\n  borderless: \"string\",\r\n  checkboxRowWrapper: \"string\",\r\n  checkboxRow: \"string\",\r\n  checkboxHeaderWrapper: \"string\",\r\n  checkboxHeader: \"string\",\r\n  row: \"string\",\r\n  rowItem: \"string\",\r\n  striped: \"string\",\r\n  sortIconWrapper: \"string\",\r\n  sortIcon: \"string\",\r\n  paginationRowsText: \"string\",\r\n  paginationNav: \"string\",\r\n  paginationButtonsWrapper: \"string\",\r\n  hoverRow: \"string\",\r\n  borderColor: \"string\",\r\n  color: \"string\",\r\n  fixedHeader: \"string\",\r\n  fixedHeaderBody: \"string\",\r\n  selectableRow: \"string\",\r\n  rowAnimation: \"string\",\r\n  sm: \"string\",\r\n  edit: \"string\",\r\n  selectItemsWrapper: \"string\",\r\n  paginationStartButton: \"string\",\r\n  paginationLeftButton: \"string\",\r\n  paginationRightButton: \"string\",\r\n  paginationEndButton: \"string\",\r\n  loadingItemsWrapper: \"string\",\r\n  loadingProgressBarWrapper: \"string\",\r\n  loadingProgressBar: \"string\",\r\n  loadingMessage: \"string\",\r\n  loadingPaginationRowsText: \"string\",\r\n  loadingPaginationSelectWrapper: \"string\",\r\n  loadingPaginationNav: \"string\",\r\n  loadingColumn: \"string\",\r\n  noFoundMessageWrapper: \"string\",\r\n  noFoundMessage: \"string\",\r\n};\r\n/**\r\n * ------------------------------------------------------------------------\r\n * Class Definition\r\n * ------------------------------------------------------------------------\r\n */\r\n\r\nclass Datatable {\r\n  constructor(element, data = {}, options = {}, classes = {}) {\r\n    this._element = element;\r\n\r\n    this._options = this._getOptions(options);\r\n    this._classes = this._getClasses(classes);\r\n\r\n    this._sortReverse = false;\r\n    this._activePage = 0;\r\n\r\n    this._search = \"\";\r\n    this._searchColumn = null;\r\n\r\n    this._paginationLeft = null;\r\n    this._paginationRight = null;\r\n    this._paginationStart = null;\r\n    this._paginationEnd = null;\r\n    this._select = null;\r\n    this._selectInstance = null;\r\n\r\n    this._selected = [];\r\n    this._checkboxes = null;\r\n    this._headerCheckbox = null;\r\n    this._rows = this._getRows(data.rows);\r\n    this._columns = this._getColumns(data.columns);\r\n\r\n    if (this._element) {\r\n      Data.setData(element, DATA_KEY, this);\r\n\r\n      this._perfectScrollbar = null;\r\n      this._setup();\r\n    }\r\n  }\r\n\r\n  // Getters\r\n\r\n  static get NAME() {\r\n    return NAME;\r\n  }\r\n\r\n  get columns() {\r\n    return this._columns.map((column, index) => {\r\n      let template = {\r\n        ...DEFAULT_COLUMN,\r\n        field: `field_${index}`,\r\n        columnIndex: index,\r\n      };\r\n\r\n      if (typeof column === \"string\") {\r\n        template.label = column;\r\n      } else if (typeof column === \"object\") {\r\n        template = {\r\n          ...template,\r\n          ...column,\r\n        };\r\n      }\r\n\r\n      typeCheckConfig(\"column\", template, TYPE_COLUMN_FIELDS);\r\n\r\n      return template;\r\n    });\r\n  }\r\n\r\n  get rows() {\r\n    return this._rows.map((row, index) => {\r\n      const output = {\r\n        rowIndex: index,\r\n      };\r\n\r\n      if (Array.isArray(row)) {\r\n        this.columns.forEach((column, i) => {\r\n          if (row[i] === 0) {\r\n            output[column.field] = row[i];\r\n          } else {\r\n            output[column.field] = row[i] || this._options.defaultValue;\r\n          }\r\n        });\r\n      } else if (typeof row === \"object\") {\r\n        this.columns.forEach((column) => {\r\n          if (row[column.field] === 0) {\r\n            output[column.field] = row[column.field];\r\n          } else {\r\n            output[column.field] =\r\n              row[column.field] || this._options.defaultValue;\r\n          }\r\n        });\r\n      }\r\n\r\n      return output;\r\n    });\r\n  }\r\n\r\n  get searchResult() {\r\n    return search(this.rows, this._search, this._searchColumn);\r\n  }\r\n\r\n  get computedRows() {\r\n    let result = [...this.searchResult];\r\n\r\n    if (this._options.sortOrder) {\r\n      result = sort({\r\n        rows: result,\r\n        field: this._options.sortField,\r\n        order: this._options.sortOrder,\r\n      });\r\n    }\r\n\r\n    if (this._options.pagination) {\r\n      if (this._options.entries === \"All\") {\r\n        result = paginate({\r\n          rows: result,\r\n          entries: result.length,\r\n          activePage: this._activePage,\r\n        });\r\n      } else {\r\n        result = paginate({\r\n          rows: result,\r\n          entries: this._options.entries,\r\n          activePage: this._activePage,\r\n        });\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  get pages() {\r\n    if (this._options.entries === \"All\") {\r\n      return 1;\r\n    }\r\n\r\n    return Math.ceil(this.searchResult.length / this._options.entries);\r\n  }\r\n\r\n  get navigationText() {\r\n    const firstVisibleEntry = this._activePage * this._options.entries;\r\n\r\n    if (this.searchResult.length === 0) {\r\n      return `0 ${this._options.ofText} 0`;\r\n    }\r\n\r\n    if (this._options.entries === \"All\") {\r\n      return `1 - ${this.searchResult.length} ${this._options.ofText} ${this.searchResult.length}`;\r\n    }\r\n\r\n    return `${firstVisibleEntry + 1} - ${\r\n      this.computedRows.length + firstVisibleEntry\r\n    } ${this._options.ofText} ${this.searchResult.length}`;\r\n  }\r\n\r\n  get tableOptions() {\r\n    return {\r\n      classes: this._classes,\r\n      columns: this.columns,\r\n      rows: this.computedRows,\r\n      noFoundMessage: this._options.noFoundMessage,\r\n      edit: this._options.edit,\r\n      loading: this._options.loading,\r\n      loaderClass: this._options.loaderClass,\r\n      loadingMessage: this._options.loadingMessage,\r\n      selectable: this._options.selectable,\r\n      multi: this._options.multi,\r\n      bordered: this._options.bordered,\r\n      borderless: this._options.borderless,\r\n      striped: this._options.striped,\r\n      hover: this._options.hover,\r\n      fixedHeader: this._options.fixedHeader,\r\n      sm: this._options.sm,\r\n      sortIconTemplate: this._options.sortIconTemplate,\r\n      pagination: {\r\n        enable: this._options.pagination,\r\n        text: this.navigationText,\r\n        entries: this._options.entries,\r\n        entriesOptions: this._options.entriesOptions,\r\n        fullPagination: this._options.fullPagination,\r\n        rowsText: this._options.rowsText,\r\n        ofText: this._options.ofText,\r\n        allText: this._options.allText,\r\n        paginationStartIconTemplate: this._options.paginationStartIconTemplate,\r\n        paginationLeftIconTemplate: this._options.paginationLeftIconTemplate,\r\n        paginationRightIconTemplate: this._options.paginationRightIconTemplate,\r\n        paginationEndIconTemplate: this._options.paginationEndIconTemplate,\r\n        classes: this._classes,\r\n      },\r\n      forceSort: this._options.forceSort,\r\n    };\r\n  }\r\n\r\n  // Public\r\n\r\n  update(data, options = {}) {\r\n    if (data && data.rows) {\r\n      this._rows = data.rows;\r\n    }\r\n\r\n    if (data && data.columns) {\r\n      this._columns = data.columns;\r\n    }\r\n\r\n    this._clearClassList(options);\r\n\r\n    this._options = this._getOptions({ ...this._options, ...options });\r\n\r\n    this._setup();\r\n\r\n    this._performSort();\r\n  }\r\n\r\n  dispose() {\r\n    if (this._selectInstance) {\r\n      this._selectInstance.dispose();\r\n    }\r\n\r\n    Data.removeData(this._element, DATA_KEY);\r\n\r\n    this._removeEventListeners();\r\n\r\n    this._perfectScrollbar.destroy();\r\n\r\n    this._element = null;\r\n  }\r\n\r\n  search(string, column) {\r\n    this._search = string;\r\n\r\n    this._searchColumn = column;\r\n\r\n    this._activePage = 0;\r\n\r\n    if (this._options.pagination) {\r\n      this._toggleDisableState();\r\n    }\r\n\r\n    this._renderRows();\r\n\r\n    if (this._options.maxHeight) {\r\n      this._perfectScrollbar.element.scrollTop = 0;\r\n\r\n      this._perfectScrollbar.update();\r\n    }\r\n  }\r\n\r\n  sort(column, order = \"asc\") {\r\n    this._options.sortOrder = order;\r\n\r\n    if (typeof column === \"string\") {\r\n      this._options.sortField = this.columns.find(\r\n        (header) => header.label === column\r\n      ).field;\r\n    } else {\r\n      this._options.sortField = column.field;\r\n    }\r\n\r\n    const icon = SelectorEngine.findOne(\r\n      `[data-te-sort=\"${this._options.sortField}\"]`,\r\n      this._element\r\n    );\r\n\r\n    this._activePage = 0;\r\n\r\n    this._toggleDisableState();\r\n\r\n    this._renderRows();\r\n\r\n    this._setActiveSortIcon(icon);\r\n  }\r\n\r\n  setActivePage(index) {\r\n    if (index < this.pages) {\r\n      this._changeActivePage(index);\r\n    }\r\n  }\r\n\r\n  // Private\r\n\r\n  _getClasses(classes) {\r\n    const dataAttributes = Manipulator.getDataClassAttributes(this._element);\r\n\r\n    classes = {\r\n      ...DefaultClasses,\r\n      ...dataAttributes,\r\n      ...classes,\r\n    };\r\n\r\n    typeCheckConfig(NAME, classes, DefaultClassesType);\r\n\r\n    return classes;\r\n  }\r\n\r\n  _changeActivePage(index) {\r\n    this._activePage = index;\r\n\r\n    this._toggleDisableState();\r\n\r\n    this._renderRows();\r\n  }\r\n\r\n  _clearClassList(options) {\r\n    [\"hover\", \"bordered\", \"borderless\", \"sm\", \"striped\"].forEach((option) => {\r\n      if (this._options[option] && !options[option]) {\r\n        Manipulator.removeDataAttribute(`data-te-${option}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  _emitSelectEvent() {\r\n    EventHandler.trigger(this._element, EVENT_SELECT, {\r\n      selectedRows: this.rows.filter(\r\n        (row) => this._selected.indexOf(row.rowIndex) !== -1\r\n      ),\r\n      selectedIndexes: this._selected,\r\n      allSelected: this._selected.length === this.rows.length,\r\n    });\r\n  }\r\n\r\n  _getRows(rows = []) {\r\n    const body = SelectorEngine.findOne(\"tbody\", this._element);\r\n\r\n    if (!body) {\r\n      return rows;\r\n    }\r\n\r\n    const tableRows = SelectorEngine.find(\"tr\", body).map((row) => {\r\n      return SelectorEngine.find(\"td\", row).map((cell) => cell.innerHTML);\r\n    });\r\n\r\n    return [...tableRows, ...rows];\r\n  }\r\n\r\n  _getColumns(columns = []) {\r\n    const head = SelectorEngine.findOne(\"thead\", this._element);\r\n\r\n    if (!head) {\r\n      return columns;\r\n    }\r\n\r\n    const headerRow = SelectorEngine.findOne(\"tr\", head);\r\n\r\n    const headers = SelectorEngine.find(\"th\", headerRow).map((cell) => ({\r\n      label: cell.innerHTML,\r\n      ...Manipulator.getDataAttributes(cell),\r\n    }));\r\n\r\n    return [...headers, ...columns];\r\n  }\r\n\r\n  _getCSSValue(size) {\r\n    if (typeof size === \"string\") {\r\n      return size;\r\n    }\r\n\r\n    return `${size}px`;\r\n  }\r\n\r\n  _getOptions(options) {\r\n    const config = {\r\n      ...DEFAULT_OPTIONS,\r\n      ...Manipulator.getDataAttributes(this._element),\r\n      ...options,\r\n    };\r\n\r\n    typeCheckConfig(NAME, config, TYPE_OPTIONS);\r\n    return config;\r\n  }\r\n\r\n  _setActiveRows() {\r\n    SelectorEngine.find(ATTR_ROW, this._element).forEach((row) => {\r\n      if (this._selected.includes(Manipulator.getDataAttribute(row, \"index\"))) {\r\n        Manipulator.addClass(row, `active ${this._classes.selectableRow}`);\r\n      } else {\r\n        Manipulator.removeClass(row, `active ${this._classes.selectableRow}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  _setEntries(e) {\r\n    this._options = this._getOptions({\r\n      ...this._options,\r\n      entries: e.target.value,\r\n    });\r\n\r\n    if (this._activePage > this.pages - 1) {\r\n      this._activePage = this.pages - 1;\r\n    }\r\n\r\n    this._toggleDisableState();\r\n\r\n    this._renderRows();\r\n  }\r\n\r\n  _setSelected() {\r\n    SelectorEngine.find(ATTR_ROW_CHECKBOX, this._element).forEach(\r\n      (checkbox) => {\r\n        const index = Manipulator.getDataAttribute(checkbox, \"rowIndex\");\r\n        checkbox.checked = this._selected.includes(index);\r\n      }\r\n    );\r\n\r\n    this._setActiveRows();\r\n  }\r\n\r\n  _setActiveSortIcon(active) {\r\n    SelectorEngine.find(ATTR_SORT_ICON, this._element).forEach((icon) => {\r\n      const angle =\r\n        this._options.sortOrder === \"desc\" && icon === active ? 180 : 0;\r\n\r\n      Manipulator.style(icon, {\r\n        transform: `rotate(${angle}deg)`,\r\n      });\r\n\r\n      if (icon === active && this._options.sortOrder) {\r\n        Manipulator.addClass(icon, `opacity-100`);\r\n      } else {\r\n        Manipulator.removeClass(icon, `opacity-100`);\r\n      }\r\n    });\r\n  }\r\n\r\n  _setup() {\r\n    this._renderTable();\r\n\r\n    if (this._options.pagination) {\r\n      this._setupPagination();\r\n    }\r\n\r\n    if (this._options.edit) {\r\n      this._setupEditable();\r\n    }\r\n\r\n    if (this._options.clickableRows) {\r\n      this._setupClickableRows();\r\n    }\r\n\r\n    if (this._options.selectable) {\r\n      this._setupSelectable();\r\n    }\r\n\r\n    this._setupScroll();\r\n\r\n    this._setupSort();\r\n  }\r\n\r\n  _setupClickableRows() {\r\n    SelectorEngine.find(ATTR_ROW, this._element).forEach((row) => {\r\n      const index = Manipulator.getDataAttribute(row, \"index\");\r\n      Manipulator.addClass(row, `cursor-pointer`);\r\n      EventHandler.on(row, \"click\", (e) => {\r\n        if (!SelectorEngine.matches(e.target, ATTR_ROW_CHECKBOX)) {\r\n          EventHandler.trigger(this._element, EVENT_ROW_CLICK, {\r\n            index,\r\n            row: this.rows[index],\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  _setupEditable() {\r\n    SelectorEngine.find(ATTR_ROW, this._element).forEach((row) => {\r\n      const index = Manipulator.getDataAttribute(row, \"index\");\r\n      SelectorEngine.find(ATTR_CELL, row).forEach((cell) => {\r\n        EventHandler.on(cell, \"input\", (e) => this._updateRow(e, index));\r\n      });\r\n    });\r\n  }\r\n\r\n  _setupScroll() {\r\n    const datatableBody = SelectorEngine.findOne(ATTR_BODY, this._element);\r\n\r\n    const style = {};\r\n\r\n    if (this._options.maxHeight) {\r\n      style.maxHeight = this._getCSSValue(this._options.maxHeight);\r\n    }\r\n\r\n    if (this._options.maxWidth) {\r\n      const width = this._getCSSValue(this._options.maxWidth);\r\n\r\n      style.maxWidth = width;\r\n\r\n      Manipulator.style(this._element, { maxWidth: width });\r\n    }\r\n\r\n    Manipulator.style(datatableBody, style);\r\n    Manipulator.addClass(datatableBody, `${this._classes.scroll}`);\r\n\r\n    if (this._options.fixedHeader) {\r\n      let headers = SelectorEngine.find(ATTR_HEADER, this._element);\r\n\r\n      if (this._options.selectable) {\r\n        headers = headers.filter((header, index) => {\r\n          Manipulator.addClass(\r\n            header,\r\n            `${this._classes.fixedHeader} ${this._classes.color}`\r\n          );\r\n\r\n          return index !== 0;\r\n        });\r\n      }\r\n\r\n      headers.forEach((header, i) => {\r\n        Manipulator.addClass(\r\n          header,\r\n          `${this._classes.fixedHeader} ${this._classes.color}`\r\n        );\r\n\r\n        if (this.columns[i].fixed) {\r\n          Manipulator.addClass(header, `!z-40`);\r\n        }\r\n      });\r\n    }\r\n\r\n    this._perfectScrollbar = new PerfectScrollbar(datatableBody);\r\n  }\r\n\r\n  _setupSort() {\r\n    SelectorEngine.find(ATTR_SORT_ICON, this._element).forEach((icon) => {\r\n      const field = Manipulator.getDataAttribute(icon, \"sort\");\r\n      const [header] = SelectorEngine.parents(icon, \"th\");\r\n      if (this.columns.sort) {\r\n        Manipulator.addClass(header, `cursor-pointer`);\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      if (field === this._options.sortField) {\r\n        this._setActiveSortIcon(icon);\r\n      }\r\n\r\n      EventHandler.on(header, \"click\", () => {\r\n        if (\r\n          this._options.sortField === field &&\r\n          this._options.sortOrder === \"asc\"\r\n        ) {\r\n          this._options.sortOrder = \"desc\";\r\n        } else if (\r\n          this._options.sortField === field &&\r\n          this._options.sortOrder === \"desc\"\r\n        ) {\r\n          this._options.sortOrder = this._options.forceSort ? \"asc\" : null;\r\n        } else {\r\n          this._options.sortOrder = \"asc\";\r\n        }\r\n\r\n        this._options.sortField = field;\r\n\r\n        this._activePage = 0;\r\n\r\n        this._performSort();\r\n\r\n        this._setActiveSortIcon(icon);\r\n      });\r\n    });\r\n  }\r\n\r\n  _performSort() {\r\n    this._toggleDisableState();\r\n\r\n    this._renderRows();\r\n  }\r\n\r\n  _setupSelectable() {\r\n    this._checkboxes = SelectorEngine.find(ATTR_ROW_CHECKBOX, this._element);\r\n\r\n    this._headerCheckbox = SelectorEngine.findOne(\r\n      ATTR_HEADER_CHECKBOX,\r\n      this._element\r\n    );\r\n\r\n    EventHandler.on(this._headerCheckbox, \"input\", (e) =>\r\n      this._toggleSelectAll(e)\r\n    );\r\n\r\n    this._checkboxes.forEach((checkbox) => {\r\n      const rowIndex = Manipulator.getDataAttribute(checkbox, \"rowIndex\");\r\n\r\n      EventHandler.on(checkbox, \"input\", (e) =>\r\n        this._toggleSelectRow(e, rowIndex)\r\n      );\r\n    });\r\n  }\r\n\r\n  _setupPagination() {\r\n    this._paginationRight = SelectorEngine.findOne(\r\n      ATTR_PAGINATION_RIGHT,\r\n      this._element\r\n    );\r\n\r\n    this._paginationLeft = SelectorEngine.findOne(\r\n      ATTR_PAGINATION_LEFT,\r\n      this._element\r\n    );\r\n\r\n    EventHandler.on(this._paginationRight, \"click\", () =>\r\n      this._changeActivePage(this._activePage + 1)\r\n    );\r\n\r\n    EventHandler.on(this._paginationLeft, \"click\", () =>\r\n      this._changeActivePage(this._activePage - 1)\r\n    );\r\n\r\n    if (this._options.fullPagination) {\r\n      this._paginationStart = SelectorEngine.findOne(\r\n        ATTR_PAGINATION_START,\r\n        this._element\r\n      );\r\n\r\n      this._paginationEnd = SelectorEngine.findOne(\r\n        ATTR_PAGINATION_END,\r\n        this._element\r\n      );\r\n\r\n      EventHandler.on(this._paginationStart, \"click\", () =>\r\n        this._changeActivePage(0)\r\n      );\r\n\r\n      EventHandler.on(this._paginationEnd, \"click\", () =>\r\n        this._changeActivePage(this.pages - 1)\r\n      );\r\n    }\r\n\r\n    this._toggleDisableState();\r\n\r\n    this._setupPaginationSelect();\r\n  }\r\n\r\n  _setupPaginationSelect() {\r\n    this._select = SelectorEngine.findOne(ATTR_SELECT, this._element);\r\n\r\n    this._selectInstance = new Select(this._select);\r\n\r\n    EventHandler.on(this._select, \"valueChange.te.select\", (e) =>\r\n      this._setEntries(e)\r\n    );\r\n  }\r\n\r\n  _removeEventListeners() {\r\n    if (this._options.pagination) {\r\n      EventHandler.off(this._paginationRight, \"click\");\r\n\r\n      EventHandler.off(this._paginationLeft, \"click\");\r\n\r\n      EventHandler.off(this._select, \"valueChange.te.select\");\r\n\r\n      if (this._options.fullPagination) {\r\n        EventHandler.off(this._paginationStart, \"click\");\r\n\r\n        EventHandler.off(this._paginationEnd, \"click\");\r\n      }\r\n    }\r\n\r\n    if (this._options.edit) {\r\n      SelectorEngine.find(ATTR_CELL, this._element).forEach((cell) => {\r\n        EventHandler.off(cell, \"input\");\r\n      });\r\n    }\r\n\r\n    if (this._options.clickableRows) {\r\n      SelectorEngine.find(ATTR_ROW, this._element).forEach((row) => {\r\n        EventHandler.off(row, \"click\");\r\n      });\r\n    }\r\n\r\n    SelectorEngine.find(ATTR_SORT_ICON, this._element).forEach((icon) => {\r\n      const [header] = SelectorEngine.parents(icon, \"th\");\r\n\r\n      EventHandler.off(header, \"click\");\r\n    });\r\n\r\n    if (this._options.selectable) {\r\n      EventHandler.off(this._headerCheckbox, \"input\");\r\n\r\n      this._checkboxes.forEach((checkbox) => {\r\n        EventHandler.off(checkbox, \"input\");\r\n      });\r\n    }\r\n  }\r\n\r\n  _renderTable() {\r\n    this._element.innerHTML = tableTemplate(this.tableOptions).table;\r\n\r\n    this._formatCells();\r\n\r\n    EventHandler.trigger(this._element, EVENT_RENDER);\r\n  }\r\n\r\n  _renderRows() {\r\n    const body = SelectorEngine.findOne(\"tbody\", this._element);\r\n\r\n    if (this._options.pagination) {\r\n      const navigation = SelectorEngine.findOne(\r\n        ATTR_PAGINATION_NAV,\r\n        this._element\r\n      );\r\n      navigation.innerText = this.navigationText;\r\n    }\r\n\r\n    body.innerHTML = tableTemplate(this.tableOptions).rows;\r\n\r\n    this._formatCells();\r\n\r\n    if (this._options.edit) {\r\n      this._setupEditable();\r\n    }\r\n\r\n    if (this._options.selectable) {\r\n      this._setupSelectable();\r\n\r\n      this._setSelected();\r\n    }\r\n\r\n    if (this._options.clickableRows) {\r\n      this._setupClickableRows();\r\n    }\r\n\r\n    EventHandler.trigger(this._element, EVENT_RENDER);\r\n  }\r\n\r\n  _formatCells() {\r\n    const rows = SelectorEngine.find(ATTR_ROW, this._element);\r\n\r\n    rows.forEach((row) => {\r\n      const index = Manipulator.getDataAttribute(row, \"index\");\r\n\r\n      const cells = SelectorEngine.find(ATTR_CELL, row);\r\n\r\n      cells.forEach((cell) => {\r\n        const field = Manipulator.getDataAttribute(cell, \"field\");\r\n\r\n        const column = this.columns.find((column) => column.field === field);\r\n\r\n        if (column && column.format !== null) {\r\n          column.format(cell, this.rows[index][field]);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  _toggleDisableState() {\r\n    if (this._options.pagination === false) {\r\n      return;\r\n    }\r\n    if (this._activePage === 0 || this._options.loading) {\r\n      this._paginationLeft.setAttribute(\"disabled\", \"\");\r\n\r\n      if (this._options.fullPagination) {\r\n        this._paginationStart.setAttribute(\"disabled\", \"\");\r\n      }\r\n    } else {\r\n      this._paginationLeft.removeAttribute(\"disabled\");\r\n      if (this._options.fullPagination) {\r\n        this._paginationStart.removeAttribute(\"disabled\");\r\n      }\r\n    }\r\n    if (\r\n      this._activePage === this.pages - 1 ||\r\n      this._options.loading ||\r\n      this.pages === 0\r\n    ) {\r\n      this._paginationRight.setAttribute(\"disabled\", \"\");\r\n      if (this._options.fullPagination) {\r\n        this._paginationEnd.setAttribute(\"disabled\", \"\");\r\n      }\r\n    } else {\r\n      this._paginationRight.removeAttribute(\"disabled\");\r\n      if (this._options.fullPagination) {\r\n        this._paginationEnd.removeAttribute(\"disabled\");\r\n      }\r\n    }\r\n  }\r\n\r\n  _toggleSelectAll(e) {\r\n    if (e.target.checked) {\r\n      this._selected = this.rows.map((row) => row.rowIndex);\r\n    } else this._selected = [];\r\n\r\n    this._setSelected();\r\n\r\n    this._emitSelectEvent();\r\n  }\r\n\r\n  _toggleSelectRow(e, rowIndex) {\r\n    if (e.target.checked) {\r\n      if (this._options.multi && !this._selected.includes(rowIndex)) {\r\n        this._selected = [...this._selected, rowIndex];\r\n      } else {\r\n        this._selected = [rowIndex];\r\n\r\n        this._checkboxes.forEach((checkbox) => {\r\n          if (checkbox !== e.target) {\r\n            checkbox.checked = false;\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this._selected = this._selected.filter((index) => index !== rowIndex);\r\n    }\r\n    if (this._options.multi && !e.target.checked) {\r\n      this._headerCheckbox.checked = false;\r\n    }\r\n\r\n    this._setActiveRows();\r\n\r\n    this._emitSelectEvent();\r\n  }\r\n\r\n  _updateRow(event, index) {\r\n    const field = Manipulator.getDataAttribute(event.target, \"field\");\r\n\r\n    const value = event.target.textContent;\r\n\r\n    const row = this._rows[index];\r\n\r\n    if (Array.isArray(row)) {\r\n      const column = this.columns.find((column) => {\r\n        return column.field === field;\r\n      });\r\n\r\n      const columnIndex = column.columnIndex;\r\n\r\n      row[columnIndex] = value;\r\n    } else {\r\n      row[field] = value;\r\n    }\r\n\r\n    EventHandler.trigger(this._element, EVENT_UPDATE, {\r\n      rows: this._rows,\r\n      columns: this._columns,\r\n    });\r\n  }\r\n\r\n  static jQueryInterface(config, param1, param2) {\r\n    return this.each(function () {\r\n      let data = Data.getData(this, DATA_KEY);\r\n      const _config = typeof config === \"object\" && config;\r\n\r\n      if (!data && /dispose/.test(config)) {\r\n        return;\r\n      }\r\n\r\n      if (!data) {\r\n        data = new Datatable(this, _config, param1);\r\n      }\r\n\r\n      if (typeof config === \"string\") {\r\n        if (typeof data[config] === \"undefined\") {\r\n          throw new TypeError(`No method named \"${config}\"`);\r\n        }\r\n\r\n        data[config](param1, param2);\r\n      }\r\n    });\r\n  }\r\n\r\n  static getInstance(element) {\r\n    return Data.getData(element, DATA_KEY);\r\n  }\r\n\r\n  static getOrCreateInstance(element, config = {}) {\r\n    return (\r\n      this.getInstance(element) ||\r\n      new this(element, typeof config === \"object\" ? config : null)\r\n    );\r\n  }\r\n}\r\n\r\nexport default Datatable;\r\n","import { createPopper } from \"@popperjs/core\";\r\nimport { element, typeCheckConfig, getUID } from \"../util/index\";\r\nimport Data from \"../dom/data\";\r\nimport EventHandler from \"../dom/event-handler\";\r\nimport SelectorEngine from \"../dom/selector-engine\";\r\nimport Manipulator from \"../dom/manipulator\";\r\nimport { ESCAPE } from \"../util/keycodes\";\r\nimport Ripple from \"../methods/ripple\";\r\n\r\n/**\r\n * ------------------------------------------------------------------------\r\n * Constants\r\n * ------------------------------------------------------------------------\r\n */\r\n\r\nconst NAME = \"popconfirm\";\r\nconst DATA_KEY = \"te.popconfirm\";\r\nconst EVENT_KEY = `.${DATA_KEY}`;\r\nconst EVENT_CANCEL = `cancel${EVENT_KEY}`;\r\nconst EVENT_CONFIRM = `confirm${EVENT_KEY}`;\r\nconst SELECTOR_ATTR_POPCONFIRM_BODY = \"[data-te-popconfirm-body]\";\r\nconst ATTR_POPCONFIRM_POPOVER = \"data-te-popconfirm-popover\";\r\nconst ATTR_POPCONFIRM_MODAL = \"data-te-popconfirm-modal\";\r\nconst ATTR_POPCONFIRM_BACKDROP = \"data-te-popconfirm-backdrop\";\r\n\r\nconst DefaultType = {\r\n  popconfirmMode: \"string\",\r\n  message: \"string\",\r\n  cancelText: \"(null|string)\",\r\n  okText: \"(null|string)\",\r\n  popconfirmIconTemplate: \"string\",\r\n  cancelLabel: \"(null|string)\",\r\n  confirmLabel: \"(null|string)\",\r\n  position: \"(null|string)\",\r\n};\r\n\r\nconst Default = {\r\n  popconfirmMode: \"inline\",\r\n  message: \"Are you sure?\",\r\n  cancelText: \"Cancel\",\r\n  okText: \"OK\",\r\n  popconfirmIconTemplate: ``,\r\n  cancelLabel: \"Cancel\",\r\n  confirmLabel: \"Confirm\",\r\n  position: \"bottom\",\r\n};\r\n\r\nconst DefaultClassesType = {\r\n  backdrop: \"string\",\r\n  body: \"string\",\r\n  btnCancel: \"string\",\r\n  btnConfirm: \"string\",\r\n  btnsContainer: \"string\",\r\n  fade: \"string\",\r\n  icon: \"string\",\r\n  message: \"string\",\r\n  messageText: \"string\",\r\n  modal: \"string\",\r\n  popover: \"string\",\r\n};\r\n\r\nconst DefaultClasses = {\r\n  backdrop:\r\n    \"h-full w-full z-[1070] fixed top-0 left-0 bg-[#00000066] flex justify-center items-center\",\r\n  body: \"p-[1rem] bg-white rounded-[0.5rem] opacity-0 dark:bg-neutral-700\",\r\n  btnCancel:\r\n    \"inline-block rounded bg-primary-100 px-4 pb-[5px] pt-[6px] text-xs font-medium uppercase leading-normal text-primary-700 transition duration-150 ease-in-out hover:bg-primary-accent-100 focus:bg-primary-accent-100 focus:outline-none focus:ring-0 active:bg-primary-accent-200\",\r\n  btnConfirm:\r\n    \"inline-block rounded bg-primary px-4 pb-[5px] pt-[6px] text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]\",\r\n  btnsContainer: \"flex justify-end space-x-2\",\r\n  fade: \"transition-opacity duration-[150ms] ease-linear\",\r\n  icon: \"pr-2\",\r\n  message: \"flex mb-3\",\r\n  messageText: \"text-neutral-600 dark:text-white\",\r\n  modal: \"absolute w-[300px] z-[1080] shadow-sm rounded-[0.5rem]\",\r\n  popover: \"w-[300px] border-0 rounded-[0.5rem] z-[1080] shadow-sm\",\r\n};\r\n\r\n/**\r\n * ------------------------------------------------------------------------\r\n * Class Definition\r\n * ------------------------------------------------------------------------\r\n */\r\n\r\nclass Popconfirm {\r\n  constructor(element, options, classes) {\r\n    this._element = element;\r\n    this._options = this._getConfig(options);\r\n    this._classes = this._getClasses(classes);\r\n    this._popper = null;\r\n    this._cancelButton = \"\";\r\n    this._confirmButton = \"\";\r\n    this._isOpen = false;\r\n    this._uid = this._element.id\r\n      ? `popconfirm-${this._element.id}`\r\n      : getUID(\"popconfirm-\");\r\n\r\n    if (element) {\r\n      Data.setData(element, DATA_KEY, this);\r\n    }\r\n\r\n    this._clickHandler = this.open.bind(this);\r\n    EventHandler.on(this._element, \"click\", this._clickHandler);\r\n  }\r\n\r\n  // Getters\r\n\r\n  static get NAME() {\r\n    return NAME;\r\n  }\r\n\r\n  get container() {\r\n    return SelectorEngine.findOne(`#${this._uid}`);\r\n  }\r\n\r\n  get popconfirmBody() {\r\n    return SelectorEngine.findOne(\r\n      SELECTOR_ATTR_POPCONFIRM_BODY,\r\n      this.container\r\n    );\r\n  }\r\n\r\n  // Public\r\n\r\n  dispose() {\r\n    if (this._isOpen || this.container !== null) {\r\n      this.close();\r\n    }\r\n    Data.removeData(this._element, DATA_KEY);\r\n    EventHandler.off(this._element, \"click\", this._clickHandler);\r\n    this._element = null;\r\n  }\r\n\r\n  open() {\r\n    if (this._isOpen) {\r\n      return;\r\n    }\r\n    if (this._options.popconfirmMode === \"inline\") {\r\n      this._openPopover(this._getPopoverTemplate());\r\n    } else {\r\n      this._openModal(this._getModalTemplate());\r\n    }\r\n    this._handleCancelButtonClick();\r\n    this._handleConfirmButtonClick();\r\n    this._listenToEscapeKey();\r\n    this._listenToOutsideClick();\r\n  }\r\n\r\n  close() {\r\n    if (!this._isOpen) {\r\n      return;\r\n    }\r\n    if (\r\n      this._popper !== null ||\r\n      SelectorEngine.findOne(`[${ATTR_POPCONFIRM_POPOVER}]`) !== null\r\n    ) {\r\n      EventHandler.on(\r\n        this.popconfirmBody,\r\n        \"transitionend\",\r\n        this._handlePopconfirmTransitionEnd.bind(this)\r\n      );\r\n      Manipulator.removeClass(this.popconfirmBody, \"opacity-100\");\r\n    } else {\r\n      const tempElement = SelectorEngine.findOne(\r\n        `[${ATTR_POPCONFIRM_BACKDROP}]`\r\n      );\r\n      Manipulator.removeClass(this.popconfirmBody, \"opacity-100\");\r\n      document.body.removeChild(tempElement);\r\n      this._isOpen = false;\r\n    }\r\n\r\n    EventHandler.off(document, \"click\", this._handleOutsideClick.bind(this));\r\n    EventHandler.off(document, \"keydown\", this._handleEscapeKey.bind(this));\r\n  }\r\n\r\n  _handlePopconfirmTransitionEnd(event) {\r\n    if (event.target !== this.popconfirmBody) {\r\n      return;\r\n    }\r\n\r\n    const popoverTemplate = SelectorEngine.findOne(\r\n      `[${ATTR_POPCONFIRM_POPOVER}]`\r\n    );\r\n    EventHandler.off(this.popconfirmBody, \"transitionend\");\r\n\r\n    if (this._isOpen && event && event.propertyName === \"opacity\") {\r\n      this._popper.destroy();\r\n\r\n      if (popoverTemplate) {\r\n        document.body.removeChild(popoverTemplate);\r\n      }\r\n\r\n      this._isOpen = false;\r\n    }\r\n  }\r\n\r\n  // Private\r\n\r\n  _getPopoverTemplate() {\r\n    const popover = element(\"div\");\r\n    const popconfirmTemplate = this._getPopconfirmTemplate();\r\n    popover.setAttribute(ATTR_POPCONFIRM_POPOVER, \"\");\r\n    Manipulator.addClass(popover, this._classes.popover);\r\n    popover.id = this._uid;\r\n    popover.innerHTML = popconfirmTemplate;\r\n    return popover;\r\n  }\r\n\r\n  _getModalTemplate() {\r\n    const modal = element(\"div\");\r\n    const popconfirmTemplate = this._getPopconfirmTemplate();\r\n    modal.setAttribute(ATTR_POPCONFIRM_MODAL, \"\");\r\n    Manipulator.addClass(modal, `${this._classes.modal}`);\r\n    modal.id = this._uid;\r\n    modal.innerHTML = popconfirmTemplate;\r\n    return modal;\r\n  }\r\n\r\n  _getPopconfirmTemplate() {\r\n    return `<div data-te-popconfirm-body class=\"${this._classes.body}\">\r\n      <p class=\"${this._classes.message}\">\r\n      ${\r\n        this._options.popconfirmIconTemplate\r\n          ? `<span class=\"${this._classes.icon}\">${this._options.popconfirmIconTemplate}</span>`\r\n          : \"\"\r\n      }\r\n      <span class=\"${this._classes.messageText}\">${this._options.message}</span>\r\n      </p>\r\n      <div class=\"${this._classes.btnsContainer}\">\r\n      ${\r\n        this._options.cancelText\r\n          ? `<button type=\"button\" data-te-ripple-init data-te-ripple-color=\"light\" id=\"popconfirm-button-cancel\" aria-label=\"${this._options.cancelLabel}\"\r\n        class=\"${this._classes.btnCancel}\">${this._options.cancelText}</button>`\r\n          : \"\"\r\n      }\r\n      <button type=\"button\" data-te-ripple-init data-te-ripple-color=\"light\" id=\"popconfirm-button-confirm\"\r\n      aria-label=\"${this._options.confirmLabel}\"\r\n      class=\"${this._classes.btnConfirm}\">${\r\n      this._options.okText ? this._options.okText : \"Ok\"\r\n    }</button>\r\n      </div>\r\n    </div>`;\r\n  }\r\n\r\n  _getConfig(config) {\r\n    config = {\r\n      ...Default,\r\n      ...Manipulator.getDataAttributes(this._element),\r\n      ...config,\r\n    };\r\n    typeCheckConfig(NAME, config, DefaultType);\r\n    return config;\r\n  }\r\n\r\n  _getClasses(classes) {\r\n    const dataAttributes = Manipulator.getDataClassAttributes(this._element);\r\n\r\n    classes = {\r\n      ...DefaultClasses,\r\n      ...dataAttributes,\r\n      ...classes,\r\n    };\r\n\r\n    typeCheckConfig(NAME, classes, DefaultClassesType);\r\n\r\n    return classes;\r\n  }\r\n\r\n  _openPopover(template) {\r\n    this._popper = createPopper(this._element, template, {\r\n      placement: this._translatePositionValue(),\r\n      modifiers: [\r\n        {\r\n          name: \"offset\",\r\n          options: {\r\n            offset: [0, 5],\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    document.body.appendChild(template);\r\n\r\n    setTimeout(() => {\r\n      Manipulator.addClass(\r\n        this.popconfirmBody,\r\n        `${this._classes.fade} opacity-100`\r\n      );\r\n      this._isOpen = true;\r\n    }, 0);\r\n  }\r\n\r\n  _openModal(template) {\r\n    const backdrop = element(\"div\");\r\n    backdrop.setAttribute(ATTR_POPCONFIRM_BACKDROP, \"\");\r\n    Manipulator.addClass(backdrop, this._classes.backdrop);\r\n    document.body.appendChild(backdrop);\r\n    backdrop.appendChild(template);\r\n    Manipulator.addClass(this.popconfirmBody, \"opacity-100\");\r\n    this._isOpen = true;\r\n  }\r\n\r\n  _handleCancelButtonClick() {\r\n    const container = this.container;\r\n\r\n    this._cancelButton = SelectorEngine.findOne(\r\n      \"#popconfirm-button-cancel\",\r\n      container\r\n    );\r\n\r\n    Ripple.getOrCreateInstance(this._cancelButton, { rippleColor: \"light\" });\r\n    if (this._cancelButton !== null) {\r\n      EventHandler.on(this._cancelButton, \"click\", () => {\r\n        this.close();\r\n        EventHandler.trigger(this._element, EVENT_CANCEL);\r\n      });\r\n    }\r\n  }\r\n\r\n  _handleConfirmButtonClick() {\r\n    const container = this.container;\r\n    this._confirmButton = SelectorEngine.findOne(\r\n      \"#popconfirm-button-confirm\",\r\n      container\r\n    );\r\n\r\n    Ripple.getOrCreateInstance(this._confirmButton, { rippleColor: \"light\" });\r\n    EventHandler.on(this._confirmButton, \"click\", () => {\r\n      this.close();\r\n      EventHandler.trigger(this._element, EVENT_CONFIRM);\r\n    });\r\n  }\r\n\r\n  _listenToEscapeKey() {\r\n    EventHandler.on(document, \"keydown\", this._handleEscapeKey.bind(this));\r\n  }\r\n\r\n  _handleEscapeKey(event) {\r\n    if (event.keyCode === ESCAPE) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  _listenToOutsideClick() {\r\n    EventHandler.on(document, \"click\", this._handleOutsideClick.bind(this));\r\n  }\r\n\r\n  _handleOutsideClick(event) {\r\n    const container = this.container;\r\n    const isContainer = event.target === container;\r\n    const isContainerContent = container && container.contains(event.target);\r\n    const isElement = event.target === this._element;\r\n    const isElementContent =\r\n      this._element && this._element.contains(event.target);\r\n    if (\r\n      !isContainer &&\r\n      !isContainerContent &&\r\n      !isElement &&\r\n      !isElementContent\r\n    ) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  _translatePositionValue() {\r\n    switch (this._options.position) {\r\n      // left, right as default\r\n      case \"top left\":\r\n        return \"top-end\";\r\n      case \"top\":\r\n        return \"top\";\r\n      case \"top right\":\r\n        return \"top-start\";\r\n      case \"bottom left\":\r\n        return \"bottom-end\";\r\n      case \"bottom\":\r\n        return \"bottom\";\r\n      case \"bottom right\":\r\n        return \"bottom-start\";\r\n      case \"left\":\r\n        return \"left\";\r\n      case \"left top\":\r\n        return \"left-end\";\r\n      case \"left bottom\":\r\n        return \"left-start\";\r\n      case \"right\":\r\n        return \"right\";\r\n      case \"right top\":\r\n        return \"right-end\";\r\n      case \"right bottom\":\r\n        return \"right-start\";\r\n      case undefined:\r\n        return \"bottom\";\r\n      default:\r\n        return \"bottom\";\r\n    }\r\n  }\r\n\r\n  // Static\r\n\r\n  static jQueryInterface(config, options) {\r\n    return this.each(function () {\r\n      const data = Data.getData(this, DATA_KEY);\r\n      const _config = typeof config === \"object\" && config;\r\n\r\n      if (!data && /dispose/.test(config)) {\r\n        return;\r\n      }\r\n\r\n      if (!data) {\r\n        // eslint-disable-next-line consistent-return\r\n        return new Popconfirm(this, _config);\r\n      }\r\n\r\n      if (typeof config === \"string\") {\r\n        if (typeof data[config] === \"undefined\") {\r\n          throw new TypeError(`No method named \"${config}\"`);\r\n        }\r\n\r\n        data[config](options);\r\n      }\r\n    });\r\n  }\r\n\r\n  static getInstance(element) {\r\n    return Data.getData(element, DATA_KEY);\r\n  }\r\n\r\n  static getOrCreateInstance(element, config = {}) {\r\n    return (\r\n      this.getInstance(element) ||\r\n      new this(element, typeof config === \"object\" ? config : null)\r\n    );\r\n  }\r\n}\r\n\r\nexport default Popconfirm;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\nimport { element, typeCheckConfig } from \"../util/index\";\r\nimport Data from \"../dom/data\";\r\nimport EventHandler from \"../dom/event-handler\";\r\nimport Manipulator from \"../dom/manipulator\";\r\nimport SelectorEngine from \"../dom/selector-engine\";\r\n\r\n/**\r\n * ------------------------------------------------------------------------\r\n * Constants\r\n * ------------------------------------------------------------------------\r\n */\r\n\r\nconst NAME = \"lightbox\";\r\nconst DATA_KEY = \"te.lightbox\";\r\nconst EVENT_KEY = `.${DATA_KEY}`;\r\nconst DATA_API_KEY = \".data-api\";\r\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;\r\n\r\nconst SELECTOR_ATTR_LIGHTBOX = \"[data-te-lightbox-init]\";\r\nconst SELECTOR_ATTR_TOGGLE = `${SELECTOR_ATTR_LIGHTBOX} img:not([data-te-lightbox-disabled])`;\r\nconst ATTR_LIGHTBOX_CAPTION = `data-te-lightbox-caption`;\r\nconst ATTR_LIGHTBOX_DISABLED = `data-te-lightbox-disabled`;\r\nconst ATTR_STATE_ACTIVE = `data-te-lightbox-active`;\r\n\r\nconst prevIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M19.5 12h-15m0 0l6.75 6.75M4.5 12l6.75-6.75\" />\r\n</svg>\r\n`;\r\nconst nextIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75\" />\r\n</svg>\r\n`;\r\nconst showFullscreenIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3.75 3.75v4.5m0-4.5h4.5m-4.5 0L9 9M3.75 20.25v-4.5m0 4.5h4.5m-4.5 0L9 15M20.25 3.75h-4.5m4.5 0v4.5m0-4.5L15 9m5.25 11.25h-4.5m4.5 0v-4.5m0 4.5L15 15\" />\r\n</svg>\r\n`;\r\nconst hideFullscreenIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M9 9V4.5M9 9H4.5M9 9L3.75 3.75M9 15v4.5M9 15H4.5M9 15l-5.25 5.25M15 9h4.5M15 9V4.5M15 9l5.25-5.25M15 15h4.5M15 15v4.5m0-4.5l5.25 5.25\" />\r\n</svg>\r\n`;\r\nconst zoomInIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM10.5 7.5v6m3-3h-6\" />\r\n</svg>\r\n`;\r\nconst zoomOutIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n<path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM13.5 10.5h-6\" />\r\n</svg>\r\n`;\r\nconst closeIconTemplate = `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"3\" stroke=\"currentColor\" class=\"w-4 h-4\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\r\n</svg>\r\n`;\r\n\r\nconst OPTIONS_TYPE = {\r\n  container: \"string\",\r\n  zoomLevel: \"(number|string)\",\r\n  prevIconTemplate: \"string\",\r\n  nextIconTemplate: \"string\",\r\n  showFullscreenIconTemplate: \"string\",\r\n  hideFullscreenIconTemplate: \"string\",\r\n  zoomInIconTemplate: \"string\",\r\n  closeIconTemplate: \"string\",\r\n  zoomOutIconTemplate: \"string\",\r\n  spinnerContent: \"string\",\r\n};\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  container: \"body\",\r\n  zoomLevel: 1,\r\n  prevIconTemplate: prevIconTemplate,\r\n  nextIconTemplate: nextIconTemplate,\r\n  showFullscreenIconTemplate: showFullscreenIconTemplate,\r\n  hideFullscreenIconTemplate: hideFullscreenIconTemplate,\r\n  zoomInIconTemplate: zoomInIconTemplate,\r\n  zoomOutIconTemplate: zoomOutIconTemplate,\r\n  closeIconTemplate: closeIconTemplate,\r\n  spinnerContent: \"Loading...\",\r\n};\r\n\r\nconst DefaultClasses = {\r\n  caption:\r\n    \"text-white text-ellipsis overflow-hidden whitespace-nowrap mx-[10px] text-center\",\r\n  captionWrapper:\r\n    \"fixed left-0 bottom-0 w-full h-[50px] flex justify-center items-center\",\r\n  closeBtn:\r\n    \"border-none bg-transparent w-[50px] h-[50px] px-4 text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\r\n  fullscreenBtn:\r\n    \"border-none bg-transparent w-[50px] h-[50px] px-4 text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\r\n  gallery:\r\n    \"invisible fixed left-0 top-0 w-full h-full z-[1100] pointer-events-none opacity-0 bg-[#000000e6] transition-all duration-[400ms] motion-reduce:transition-none\",\r\n  galleryContent:\r\n    \"fixed top-[50px] left-[50px] w-[calc(100%-100px)] h-[calc(100%-100px)]\",\r\n  galleryCounter:\r\n    \"flex justify-center items-center px-[10px] mb-0 h-full text-[#b3b3b3]\",\r\n  img: \"absolute left-0 top-0 w-full max-h-full h-auto cursor-pointer pointer-events-auto\",\r\n  imgWrapper:\r\n    \"absolute top-0 left-0 w-full h-full opacity-0 transform scale-[0.25] transition-all duration-[400ms] ease-out pointer-events-none motion-reduce:transition-none motion-reduce:transform-none\",\r\n  leftTools: \"float-left h-full\",\r\n  loader:\r\n    \"fixed left-0 top-0 z-[2] w-full h-full text-neutral-50 opacity-1 flex justify-center items-center pointer-events-none transition-opacity duration-[1000ms] motion-reduce:transition-none\",\r\n  nextBtn:\r\n    \"border-none bg-transparent w-full h-[50px] flex justify-center items-center text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\r\n  nextBtnWrapper:\r\n    \"fixed right-0 top-0 w-[50px] h-full flex justify-center items-center transition-opacity duration-[400ms] motion-reduce:transition-none\",\r\n  prevBtn:\r\n    \"border-none bg-transparent w-full h-[50px] flex justify-center items-center text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\r\n  prevBtnWrapper:\r\n    \"fixed left-0 top-0 w-[50px] h-full flex justify-center items-center transition-opacity duration-[400ms] motion-reduce:transition-none\",\r\n  rightTools: \"float-right\",\r\n  spinner:\r\n    \"inline-block h-8 w-8 animate-[spinner-grow_0.75s_linear_infinite] rounded-full bg-current align-[-0.125em] motion-reduce:animate-[spinner-grow_1.5s_linear_infinite]\",\r\n  spinnerContent:\r\n    \"!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]\",\r\n  toolbar:\r\n    \"absolute top-0 left-0 w-full h-[50px] z-20 transition-opacity duration-[400ms] motion-reduce:transition-none\",\r\n  vertical: \"h-full max-h-full w-auto\",\r\n  zoomBtn:\r\n    \"border-none bg-transparent w-[50px] h-[50px] px-4 text-[#b3b3b3] transition-colors duration-200 ease-in-out hover:text-white focus:text-white motion-reduce:transition-none outline-none\",\r\n};\r\n\r\nconst DefaultClassesType = {\r\n  caption: \"string\",\r\n  captionWrapper: \"string\",\r\n  closeBtn: \"string\",\r\n  fullscreenBtn: \"string\",\r\n  gallery: \"string\",\r\n  galleryContent: \"string\",\r\n  galleryCounter: \"string\",\r\n  img: \"string\",\r\n  imgWrapper: \"string\",\r\n  leftTools: \"string\",\r\n  loader: \"string\",\r\n  nextBtn: \"string\",\r\n  nextBtnWrapper: \"string\",\r\n  prevBtn: \"string\",\r\n  prevBtnWrapper: \"string\",\r\n  rightTools: \"string\",\r\n  spinner: \"string\",\r\n  spinnerContent: \"string\",\r\n  toolbar: \"string\",\r\n  vertical: \"string\",\r\n  zoomBtn: \"string\",\r\n};\r\n\r\n/**\r\n * ------------------------------------------------------------------------\r\n * Class Definition\r\n * ------------------------------------------------------------------------\r\n */\r\n\r\nclass Lightbox {\r\n  constructor(element, options = {}, classes) {\r\n    this._element = element;\r\n    this._options = options;\r\n    this._classes = this._getClasses(classes);\r\n    this._getContainer();\r\n\r\n    this._id = `lightbox-${Math.random().toString(36).substr(2, 9)}`;\r\n    this._activeImg = 0;\r\n    this._images = [];\r\n    this._zoom = 1;\r\n    this._gallery = null;\r\n    this._galleryToolbar = null;\r\n    this._galleryContent = null;\r\n    this._loader = null;\r\n    this._imgCounter = null;\r\n    this._animating = false;\r\n    this._fullscreen = false;\r\n    this._zoomBtn = null;\r\n    this._fullscreenBtn = null;\r\n    this._toolsToggleTimer = 0;\r\n    this._mousedown = false;\r\n    this._mousedownPositionX = 0;\r\n    this._mousedownPositionY = 0;\r\n    this._originalPositionX = 0;\r\n    this._originalPositionY = 0;\r\n    this._positionX = 0;\r\n    this._positionY = 0;\r\n    this._zoomTimer = 0;\r\n    this._tapCounter = 0;\r\n    this._tapTime = 0;\r\n    this._rightArrow = null;\r\n    this._leftArrowWrapper = null;\r\n    this._rightArrowWrapper = null;\r\n    this._initiated = false;\r\n    this._multitouch = false;\r\n    this._touchZoomPosition = [];\r\n\r\n    if (this._element) {\r\n      Data.setData(element, DATA_KEY, this);\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  // Getters\r\n  static get NAME() {\r\n    return NAME;\r\n  }\r\n\r\n  get activeImg() {\r\n    return this._activeImg;\r\n  }\r\n\r\n  get currentImg() {\r\n    return SelectorEngine.findOne(\r\n      `[${ATTR_STATE_ACTIVE}]`,\r\n      this._galleryContent\r\n    );\r\n  }\r\n\r\n  get options() {\r\n    const config = {\r\n      ...DEFAULT_OPTIONS,\r\n      ...Manipulator.getDataAttributes(this._element),\r\n      ...this._options,\r\n    };\r\n\r\n    typeCheckConfig(NAME, config, OPTIONS_TYPE);\r\n\r\n    return config;\r\n  }\r\n\r\n  // Public\r\n  init() {\r\n    if (this._initiated) {\r\n      return;\r\n    }\r\n\r\n    this._appendTemplate();\r\n    this._initiated = true;\r\n  }\r\n\r\n  open(target = 0) {\r\n    this._getImages();\r\n    this._setActiveImg(target);\r\n    this._sortImages();\r\n    this._triggerEvents(\"open\", \"opened\");\r\n\r\n    this._loadImages().then((images) => {\r\n      this._resizeImages(images);\r\n      this._toggleTemplate();\r\n      this._addEvents();\r\n      this._focusFullscreenBtn();\r\n    });\r\n  }\r\n\r\n  close() {\r\n    this.reset();\r\n    this._removeEvents();\r\n    this._toggleTemplate();\r\n    this._triggerEvents(\"close\", \"closed\");\r\n  }\r\n\r\n  slide(target = \"right\") {\r\n    if (this._animating === true || this._images.length <= 1) return;\r\n    this._triggerEvents(\"slide\", \"slided\");\r\n\r\n    this._beforeSlideEvents();\r\n    if (target === \"right\") this._slideHorizontally(target);\r\n    if (target === \"left\") this._slideHorizontally(target);\r\n    if (target === \"first\") this._slideToTarget(target);\r\n    if (target === \"last\") this._slideToTarget(target);\r\n    this._afterSlideEvents();\r\n  }\r\n\r\n  zoomIn() {\r\n    if (this._zoom >= 3) return;\r\n    this._triggerEvents(\"zoomIn\", \"zoomedIn\");\r\n    this._zoom += parseFloat(this.options.zoomLevel);\r\n    Manipulator.style(this.currentImg.parentNode, {\r\n      transform: `scale(${this._zoom})`,\r\n    });\r\n\r\n    this._updateZoomBtn();\r\n  }\r\n\r\n  zoomOut() {\r\n    if (this._zoom <= 1) return;\r\n    this._triggerEvents(\"zoomOut\", \"zoomedOut\");\r\n    this._zoom -= parseFloat(this.options.zoomLevel);\r\n    Manipulator.style(this.currentImg.parentNode, {\r\n      transform: `scale(${this._zoom})`,\r\n    });\r\n\r\n    this._updateZoomBtn();\r\n    this._updateImgPosition();\r\n  }\r\n\r\n  toggleFullscreen() {\r\n    if (this._fullscreen === false) {\r\n      this._fullscreenBtn.setAttribute(ATTR_STATE_ACTIVE, \"\");\r\n      this._fullscreenBtn.innerHTML = this.options.hideFullscreenIconTemplate;\r\n      if (this._gallery.requestFullscreen) {\r\n        this._gallery.requestFullscreen();\r\n      }\r\n\r\n      this._fullscreen = true;\r\n    } else {\r\n      this._fullscreenBtn.removeAttribute(ATTR_STATE_ACTIVE);\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      }\r\n\r\n      this._fullscreen = false;\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this._restoreDefaultFullscreen();\r\n    this._restoreDefaultPosition();\r\n    this._restoreDefaultZoom();\r\n    clearTimeout(this._toolsToggleTimer);\r\n    clearTimeout(this._doubleTapTimer);\r\n  }\r\n\r\n  dispose() {\r\n    EventHandler.off(\r\n      document,\r\n      EVENT_CLICK_DATA_API,\r\n      SELECTOR_ATTR_TOGGLE,\r\n      this.toggle\r\n    );\r\n    if (this._galleryContent) this._removeEvents();\r\n    if (this._gallery) this._gallery.remove();\r\n\r\n    Data.removeData(this._element, DATA_KEY);\r\n    this._element = null;\r\n  }\r\n\r\n  // Private\r\n  _getClasses(classes) {\r\n    const dataAttributes = Manipulator.getDataClassAttributes(this._element);\r\n\r\n    classes = {\r\n      ...DefaultClasses,\r\n      ...dataAttributes,\r\n      ...classes,\r\n    };\r\n\r\n    typeCheckConfig(NAME, classes, DefaultClassesType);\r\n\r\n    return classes;\r\n  }\r\n\r\n  _getImages() {\r\n    const allImages = SelectorEngine.find(\"img\", this._element);\r\n    const lightboxImages = allImages.filter(\r\n      (image) => !image.hasAttribute(ATTR_LIGHTBOX_DISABLED)\r\n    );\r\n    this._images = lightboxImages;\r\n  }\r\n\r\n  _getContainer() {\r\n    this._container = SelectorEngine.findOne(this.options.container);\r\n  }\r\n\r\n  _setActiveImg(target) {\r\n    this._activeImg =\r\n      typeof target === \"number\" ? target : this._images.indexOf(target.target);\r\n  }\r\n\r\n  _appendTemplate() {\r\n    this._gallery = element(\"div\");\r\n    Manipulator.addClass(this._gallery, `${this._classes.gallery}`);\r\n    this._element.dataset.id = this._id;\r\n    this._gallery.id = this._id;\r\n\r\n    this._appendLoader();\r\n    this._appendToolbar();\r\n    this._appendContent();\r\n    this._appendArrows();\r\n    this._appendCaption();\r\n    this._container.append(this._gallery);\r\n  }\r\n\r\n  _appendToolbar() {\r\n    this._galleryToolbar = element(\"div\");\r\n    this._imgCounter = element(\"p\");\r\n    this._fullscreenBtn = element(\"button\");\r\n    this._zoomBtn = element(\"button\");\r\n    const closeBtn = element(\"button\");\r\n    const leftTools = element(\"div\");\r\n    const rightTools = element(\"div\");\r\n\r\n    Manipulator.addClass(this._galleryToolbar, `${this._classes.toolbar}`);\r\n    Manipulator.addClass(this._imgCounter, `${this._classes.galleryCounter}`);\r\n    Manipulator.addClass(this._fullscreenBtn, `${this._classes.fullscreenBtn}`);\r\n    Manipulator.addClass(this._zoomBtn, `${this._classes.zoomInBtn}`);\r\n    Manipulator.addClass(this._zoomBtn, this._classes.zoomBtn);\r\n    Manipulator.addClass(leftTools, `${this._classes.leftTools}`);\r\n    Manipulator.addClass(rightTools, `${this._classes.rightTools}`);\r\n    Manipulator.addClass(closeBtn, `${this._classes.closeBtn}`);\r\n\r\n    this._fullscreenBtn.innerHTML = this.options.showFullscreenIconTemplate;\r\n    closeBtn.innerHTML = this.options.closeIconTemplate;\r\n    this._zoomBtn.innerHTML = this.options.zoomInIconTemplate;\r\n    this._fullscreenBtn.setAttribute(\"aria-label\", \"Toggle fullscreen\");\r\n    this._zoomBtn.setAttribute(\"aria-label\", \"Zoom in\");\r\n    closeBtn.setAttribute(\"aria-label\", \"Close\");\r\n\r\n    EventHandler.on(this._fullscreenBtn, EVENT_CLICK_DATA_API, () =>\r\n      this.toggleFullscreen()\r\n    );\r\n    EventHandler.on(this._zoomBtn, EVENT_CLICK_DATA_API, () =>\r\n      this._toggleZoom()\r\n    );\r\n    EventHandler.on(closeBtn, EVENT_CLICK_DATA_API, () => this.close());\r\n\r\n    leftTools.append(this._imgCounter);\r\n    rightTools.append(this._fullscreenBtn);\r\n    rightTools.append(this._zoomBtn);\r\n    rightTools.append(closeBtn);\r\n\r\n    this._galleryToolbar.append(leftTools);\r\n    this._galleryToolbar.append(rightTools);\r\n    this._gallery.append(this._galleryToolbar);\r\n  }\r\n\r\n  _appendContent() {\r\n    this._galleryContent = element(\"div\");\r\n    Manipulator.addClass(\r\n      this._galleryContent,\r\n      `${this._classes.galleryContent}`\r\n    );\r\n    this._gallery.append(this._galleryContent);\r\n  }\r\n\r\n  _appendLoader() {\r\n    this._loader = element(\"div\");\r\n    const spinner = element(\"div\");\r\n    const spinnerContent = element(\"span\");\r\n\r\n    Manipulator.addClass(this._loader, `${this._classes.loader}`);\r\n    Manipulator.addClass(spinner, `${this._classes.spinner}`);\r\n    Manipulator.addClass(spinnerContent, `${this._classes.spinnerContent}`);\r\n\r\n    spinner.setAttribute(\"role\", \"status\");\r\n    spinnerContent.innerHTML = this.options.spinnerContent;\r\n\r\n    spinner.append(spinnerContent);\r\n    this._loader.append(spinner);\r\n    this._gallery.append(this._loader);\r\n  }\r\n\r\n  _appendArrows() {\r\n    this._leftArrowWrapper = element(\"div\");\r\n    Manipulator.addClass(\r\n      this._leftArrowWrapper,\r\n      `${this._classes.prevBtnWrapper}`\r\n    );\r\n    const leftArrow = element(\"button\");\r\n    leftArrow.setAttribute(\"aria-label\", \"Previous\");\r\n    Manipulator.addClass(leftArrow, `${this._classes.prevBtn}`);\r\n    EventHandler.on(leftArrow, EVENT_CLICK_DATA_API, () => this.slide(\"left\"));\r\n    this._leftArrowWrapper.append(leftArrow);\r\n\r\n    this._rightArrowWrapper = element(\"div\");\r\n    Manipulator.addClass(\r\n      this._rightArrowWrapper,\r\n      `${this._classes.nextBtnWrapper}`\r\n    );\r\n    this._rightArrow = element(\"button\");\r\n    this._rightArrow.setAttribute(\"aria-label\", \"Next\");\r\n    Manipulator.addClass(this._rightArrow, `${this._classes.nextBtn}`);\r\n    EventHandler.on(this._rightArrow, EVENT_CLICK_DATA_API, () => this.slide());\r\n    this._rightArrowWrapper.append(this._rightArrow);\r\n\r\n    this._rightArrow.innerHTML = this.options.nextIconTemplate;\r\n    leftArrow.innerHTML = this.options.prevIconTemplate;\r\n\r\n    this._getImages();\r\n    if (this._images.length <= 1) return;\r\n    this._gallery.append(this._leftArrowWrapper);\r\n    this._gallery.append(this._rightArrowWrapper);\r\n  }\r\n\r\n  _appendCaption() {\r\n    const captionWrapper = element(\"div\");\r\n    const caption = element(\"p\");\r\n\r\n    caption.setAttribute(ATTR_LIGHTBOX_CAPTION, \"\");\r\n    Manipulator.addClass(captionWrapper, `${this._classes.captionWrapper}`);\r\n    Manipulator.addClass(caption, `${this._classes.caption}`);\r\n\r\n    captionWrapper.append(caption);\r\n    this._gallery.append(captionWrapper);\r\n  }\r\n\r\n  _sortImages() {\r\n    for (let i = 0; i < this._activeImg; i++) {\r\n      this._images.push(this._images.shift());\r\n    }\r\n  }\r\n\r\n  async _loadImages() {\r\n    const promiseArray = [];\r\n    const imageArray = [];\r\n\r\n    this._galleryContent.innerHTML = \"\";\r\n    let positionLeft = 0;\r\n\r\n    this._images.forEach((img, key) => {\r\n      promiseArray.push(\r\n        new Promise((resolve) => {\r\n          const newImg = new Image();\r\n          const newImgWrapper = element(\"div\");\r\n          Manipulator.addClass(newImgWrapper, `${this._classes.imgWrapper}`);\r\n          Manipulator.addClass(newImg, `${this._classes.img}`);\r\n\r\n          this._addImgStyles(newImg, newImgWrapper, positionLeft, key, img);\r\n\r\n          newImgWrapper.append(newImg);\r\n          this._galleryContent.append(newImgWrapper);\r\n\r\n          newImg.onload = resolve;\r\n          newImg.src = img.dataset.teImg || img.src;\r\n          imageArray.push(newImg);\r\n\r\n          positionLeft += 100;\r\n        })\r\n      );\r\n    });\r\n\r\n    await Promise.all(promiseArray);\r\n    return imageArray;\r\n  }\r\n\r\n  _addImgStyles(newImg, newImgWrapper, positionLeft, key, img) {\r\n    newImg.alt = img.alt;\r\n    newImg.draggable = false;\r\n\r\n    Manipulator.style(newImgWrapper, {\r\n      position: \"absolute\",\r\n      left: `${positionLeft}%`,\r\n      top: 0,\r\n    });\r\n    if (img.dataset.teCaption || img.dataset.teCaption === \"\") {\r\n      newImg.dataset.caption = img.dataset.teCaption;\r\n    }\r\n\r\n    if (positionLeft === 0) {\r\n      if (img.width < img.height) {\r\n        Manipulator.addClass(newImg, `${this._classes.vertical}`);\r\n      }\r\n      Manipulator.style(newImgWrapper, { opacity: 1 });\r\n      newImg.setAttribute(ATTR_STATE_ACTIVE, \"\");\r\n    } else {\r\n      newImg.removeAttribute(ATTR_STATE_ACTIVE);\r\n    }\r\n\r\n    if (key === this._images.length - 1 && this._images.length > 1) {\r\n      Manipulator.style(newImgWrapper, { left: \"-100%\" });\r\n    }\r\n  }\r\n\r\n  _resizeImages(images) {\r\n    images.forEach((img) => {\r\n      this._calculateImgSize(img);\r\n    });\r\n  }\r\n\r\n  _calculateImgSize(img) {\r\n    if (img.width >= img.height) {\r\n      img.style.width = \"100%\";\r\n      img.style.maxWidth = \"100%\";\r\n      img.style.height = \"auto\";\r\n      img.style.top = `${(img.parentNode.offsetHeight - img.height) / 2}px`;\r\n      img.style.left = 0;\r\n    } else {\r\n      img.style.height = \"100%\";\r\n      img.style.maxHeight = \"100%\";\r\n      img.style.width = \"auto\";\r\n      img.style.left = `${(img.parentNode.offsetWidth - img.width) / 2}px`;\r\n      img.style.top = 0;\r\n    }\r\n\r\n    if (img.width >= img.parentNode.offsetWidth) {\r\n      img.style.width = `${img.parentNode.offsetWidth}px`;\r\n      img.style.height = \"auto\";\r\n      img.style.left = 0;\r\n      img.style.top = `${(img.parentNode.offsetHeight - img.height) / 2}px`;\r\n    }\r\n    if (img.height >= img.parentNode.offsetHeight) {\r\n      img.style.height = `${img.parentNode.offsetHeight}px`;\r\n      img.style.width = \"auto\";\r\n      img.style.top = 0;\r\n      img.style.left = `${(img.parentNode.offsetWidth - img.width) / 2}px`;\r\n    }\r\n\r\n    this._positionX = parseFloat(img.style.left) || 0;\r\n    this._positionY = parseFloat(img.style.top) || 0;\r\n  }\r\n\r\n  _onResize() {\r\n    this._images = SelectorEngine.find(\"img\", this._galleryContent);\r\n    this._images.forEach((img) => {\r\n      this._calculateImgSize(img);\r\n    });\r\n  }\r\n\r\n  _onFullscreenChange() {\r\n    const isFullscreenEnabled =\r\n      document.webkitIsFullScreen ||\r\n      document.mozFullScreen ||\r\n      document.msFullscreenElement;\r\n    if (isFullscreenEnabled === undefined) {\r\n      this._fullscreen = false;\r\n      this._fullscreenBtn.innerHTML = this.options.showFullscreenIconTemplate;\r\n      this._fullscreenBtn.removeAttribute(ATTR_STATE_ACTIVE);\r\n    }\r\n  }\r\n\r\n  _beforeSlideEvents() {\r\n    this._animationStart();\r\n    this._restoreDefaultZoom();\r\n    this._restoreDefaultPosition();\r\n    this._resetDoubleTap();\r\n  }\r\n\r\n  _slideHorizontally(direction) {\r\n    this._images = SelectorEngine.find(\"img\", this._galleryContent);\r\n    this._images.forEach((img) => {\r\n      let newPositionLeft;\r\n\r\n      if (direction === \"right\") {\r\n        newPositionLeft = parseInt(img.parentNode.style.left, 10) - 100;\r\n        if (newPositionLeft < -100)\r\n          newPositionLeft = (this._images.length - 2) * 100;\r\n      } else {\r\n        newPositionLeft = parseInt(img.parentNode.style.left, 10) + 100;\r\n        if (newPositionLeft === (this._images.length - 1) * 100)\r\n          newPositionLeft = -100;\r\n      }\r\n\r\n      this._slideImg(img, newPositionLeft);\r\n    });\r\n\r\n    this._updateActiveImg(direction);\r\n  }\r\n\r\n  _slideImg(img, position) {\r\n    if (position === 0) {\r\n      img.setAttribute(ATTR_STATE_ACTIVE, \"\");\r\n      Manipulator.style(img.parentNode, { opacity: 1, transform: \"scale(1)\" });\r\n    } else {\r\n      img.removeAttribute(ATTR_STATE_ACTIVE);\r\n      Manipulator.style(img.parentNode, {\r\n        opacity: 0,\r\n        transform: \"scale(0.25)\",\r\n      });\r\n    }\r\n    img.parentNode.style.left = `${position}%`;\r\n  }\r\n\r\n  _slideToTarget(target) {\r\n    if (target === \"first\" && this._activeImg === 0) return;\r\n    if (target === \"last\" && this._activeImg === this._images.length - 1)\r\n      return;\r\n\r\n    this.reset();\r\n    this._removeEvents();\r\n    this._showLoader();\r\n\r\n    this._getImages();\r\n    this._activeImg = target === \"first\" ? 0 : this._images.length - 1;\r\n    this._sortImages();\r\n\r\n    Manipulator.style(this.currentImg.parentNode, {\r\n      transform: \"scale(0.25)\",\r\n      opacity: 0,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      this._loadImages().then((images) => {\r\n        this._resizeImages(images);\r\n        this._addEvents();\r\n        this._updateCaption();\r\n        this._hideLoader();\r\n        setTimeout(() => {\r\n          Manipulator.style(this.currentImg.parentNode, {\r\n            transform: \"scale(1)\",\r\n            opacity: 1,\r\n          });\r\n        }, 10);\r\n      });\r\n    }, 400);\r\n  }\r\n\r\n  _updateActiveImg(direction) {\r\n    if (direction === \"right\") {\r\n      if (this._activeImg === this._images.length - 1) {\r\n        this._activeImg = 0;\r\n      } else {\r\n        this._activeImg++;\r\n      }\r\n    }\r\n\r\n    if (direction === \"left\") {\r\n      if (this._activeImg === 0) {\r\n        this._activeImg = this._images.length - 1;\r\n      } else {\r\n        this._activeImg--;\r\n      }\r\n    }\r\n  }\r\n\r\n  _afterSlideEvents() {\r\n    this._updateCounter();\r\n    this._updateCaption();\r\n  }\r\n\r\n  _updateCounter() {\r\n    if (this._images.length <= 1) return;\r\n    setTimeout(() => {\r\n      this._imgCounter.innerHTML = `${this._activeImg + 1} / ${\r\n        this._images.length\r\n      }`;\r\n    }, 200);\r\n  }\r\n\r\n  _updateCaption() {\r\n    setTimeout(() => {\r\n      let caption = this.currentImg.alt;\r\n      if (\r\n        this.currentImg.dataset.caption ||\r\n        this.currentImg.dataset.caption === \"\"\r\n      ) {\r\n        caption = this.currentImg.dataset.caption;\r\n      }\r\n      SelectorEngine.findOne(\r\n        `[${ATTR_LIGHTBOX_CAPTION}]`,\r\n        this._gallery\r\n      ).innerHTML = caption;\r\n    }, 200);\r\n  }\r\n\r\n  _toggleTemplate() {\r\n    if (this._gallery.style.visibility === \"visible\") {\r\n      Manipulator.style(this.currentImg.parentNode, {\r\n        transform: \"scale(0.25)\",\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this._hideGallery();\r\n        this._enableScroll();\r\n        this._showLoader();\r\n      }, 100);\r\n    } else {\r\n      this._showGallery();\r\n      this._disableScroll();\r\n      this._updateCounter();\r\n      this._updateCaption();\r\n      this._setToolsToggleTimout();\r\n      this._hideLoader();\r\n    }\r\n  }\r\n\r\n  _showLoader() {\r\n    Manipulator.style(this._loader, { opacity: 1 });\r\n  }\r\n\r\n  _hideLoader() {\r\n    Manipulator.style(this._loader, { opacity: 0 });\r\n  }\r\n\r\n  _hideGallery() {\r\n    Manipulator.style(this._gallery, {\r\n      opacity: 0,\r\n      pointerEvents: \"none\",\r\n      visibility: \"hidden\",\r\n    });\r\n  }\r\n\r\n  _showGallery() {\r\n    Manipulator.style(this._gallery, {\r\n      opacity: 1,\r\n      pointerEvents: \"initial\",\r\n      visibility: \"visible\",\r\n    });\r\n    setTimeout(() => {\r\n      Manipulator.style(this.currentImg.parentNode, { transform: \"scale(1)\" });\r\n    }, 50);\r\n  }\r\n\r\n  _toggleZoom() {\r\n    if (this._zoom !== 1) {\r\n      this.zoomOut();\r\n    } else {\r\n      this.zoomIn();\r\n    }\r\n  }\r\n\r\n  _updateZoomBtn() {\r\n    if (this._zoom > 1) {\r\n      this._zoomBtn.setAttribute(ATTR_STATE_ACTIVE, \"\");\r\n      this._zoomBtn.setAttribute(\"aria-label\", \"Zoom out\");\r\n      this._zoomBtn.innerHTML = this.options.zoomOutIconTemplate;\r\n    } else {\r\n      this._zoomBtn.removeAttribute(ATTR_STATE_ACTIVE);\r\n      this._zoomBtn.setAttribute(\"aria-label\", \"Zoom in\");\r\n      this._zoomBtn.innerHTML = this.options.zoomInIconTemplate;\r\n    }\r\n  }\r\n\r\n  _updateImgPosition() {\r\n    if (this._zoom === 1) {\r\n      this._restoreDefaultPosition();\r\n    }\r\n  }\r\n\r\n  _addEvents() {\r\n    const images = SelectorEngine.find(\"img\", this._galleryContent);\r\n\r\n    this._onWindowTouchmove = this._onWindowTouchmove.bind(this);\r\n    this._onWindowTouchstart = this._onWindowTouchstart.bind(this);\r\n    this._onImgMousedown = this._onMousedown.bind(this);\r\n    this._onImgMousemove = this._onMousemove.bind(this);\r\n    this._onImgWheel = this._onZoom.bind(this);\r\n    this._onImgMouseup = this._onMouseup.bind(this);\r\n    this._onImgTouchend = this._onTouchend.bind(this);\r\n    this._onImgDoubleClick = this._onDoubleClick.bind(this);\r\n    this._onWindowResize = this._onResize.bind(this);\r\n    this._onWindowFullscreenChange = this._onFullscreenChange.bind(this);\r\n    this._onAnyImgAction = this._resetToolsToggler.bind(this);\r\n    this._onGalleryClick = this._onBackdropClick.bind(this);\r\n    this._onKeyupEvent = this._onKeyup.bind(this);\r\n    this._onRightArrowKeydownEvent = this._onRightArrowKeydown.bind(this);\r\n    this._onFullscreenBtnKeydownEvent = this._onFullscreenBtnKeydown.bind(this);\r\n\r\n    images.forEach((img) => {\r\n      EventHandler.on(img, \"mousedown\", this._onImgMousedown, {\r\n        passive: true,\r\n      });\r\n      EventHandler.on(img, \"touchstart\", this._onImgMousedown, {\r\n        passive: true,\r\n      });\r\n      EventHandler.on(img, \"mousemove\", this._onImgMousemove, {\r\n        passive: true,\r\n      });\r\n      EventHandler.on(img, \"touchmove\", this._onImgMousemove, {\r\n        passive: true,\r\n      });\r\n      EventHandler.on(img, \"wheel\", this._onImgWheel, { passive: true });\r\n      EventHandler.on(img, \"dblclick\", this._onImgDoubleClick, {\r\n        passive: true,\r\n      });\r\n    });\r\n\r\n    document.addEventListener(\"touchmove\", this._onWindowTouchmove, {\r\n      passive: false,\r\n    });\r\n    EventHandler.on(window, \"touchstart\", this._onWindowTouchstart);\r\n    EventHandler.on(window, \"mouseup\", this._onImgMouseup);\r\n    EventHandler.on(window, \"touchend\", this._onImgTouchend);\r\n    EventHandler.on(window, \"resize\", this._onWindowResize);\r\n    EventHandler.on(window, \"orientationchange\", this._onWindowResize);\r\n    EventHandler.on(window, \"keyup\", this._onKeyupEvent);\r\n    EventHandler.on(window, \"fullscreenchange\", this._onWindowFullscreenChange);\r\n    EventHandler.on(this._gallery, \"mousemove\", this._onAnyImgAction);\r\n    EventHandler.on(this._gallery, \"click\", this._onGalleryClick);\r\n    EventHandler.on(\r\n      this._rightArrow,\r\n      \"keydown\",\r\n      this._onRightArrowKeydownEvent\r\n    );\r\n    EventHandler.on(\r\n      this._fullscreenBtn,\r\n      \"keydown\",\r\n      this._onFullscreenBtnKeydownEvent\r\n    );\r\n  }\r\n\r\n  _removeEvents() {\r\n    const images = SelectorEngine.find(\"img\", this._galleryContent);\r\n\r\n    images.forEach((img) => {\r\n      EventHandler.off(img, \"mousedown\", this._onImgMousedown);\r\n      EventHandler.off(img, \"touchstart\", this._onImgMousedown);\r\n      EventHandler.off(img, \"mousemove\", this._onImgMousemove);\r\n      EventHandler.off(img, \"touchmove\", this._onImgMousemove);\r\n      EventHandler.off(img, \"wheel\", this._onImgWheel);\r\n      EventHandler.off(img, \"dblclick\", this._onImgDoubleClick);\r\n    });\r\n\r\n    document.removeEventListener(\"touchmove\", this._onWindowTouchmove, {\r\n      passive: false,\r\n    });\r\n    EventHandler.off(window, \"touchstart\", this._onWindowTouchstart);\r\n    EventHandler.off(window, \"mouseup\", this._onImgMouseup);\r\n    EventHandler.off(window, \"touchend\", this._onImgTouchend);\r\n    EventHandler.off(window, \"resize\", this._onWindowResize);\r\n    EventHandler.off(window, \"orientationchange\", this._onWindowResize);\r\n    EventHandler.off(window, \"keyup\", this._onKeyupEvent);\r\n    EventHandler.off(\r\n      window,\r\n      \"fullscreenchange\",\r\n      this._onWindowFullscreenChange\r\n    );\r\n    EventHandler.off(this._gallery, \"mousemove\", this._onAnyImgAction);\r\n    EventHandler.off(this._gallery, \"click\", this._onGalleryClick);\r\n    EventHandler.off(\r\n      this._rightArrow,\r\n      \"keydown\",\r\n      this._onRightArrowKeydownEvent\r\n    );\r\n    EventHandler.off(\r\n      this._fullscreenBtn,\r\n      \"keydown\",\r\n      this._onFullscreenBtnKeydownEvent\r\n    );\r\n  }\r\n\r\n  _onMousedown(e) {\r\n    const touch = e.touches;\r\n    const x = touch ? touch[0].clientX : e.clientX;\r\n    const y = touch ? touch[0].clientY : e.clientY;\r\n\r\n    this._originalPositionX = parseFloat(this.currentImg.style.left) || 0;\r\n    this._originalPositionY = parseFloat(this.currentImg.style.top) || 0;\r\n    this._positionX = this._originalPositionX;\r\n    this._positionY = this._originalPositionY;\r\n    this._mousedownPositionX = x * (1 / this._zoom) - this._positionX;\r\n    this._mousedownPositionY = y * (1 / this._zoom) - this._positionY;\r\n    this._mousedown = true;\r\n\r\n    if (e.type === \"touchstart\") {\r\n      if (e.touches.length > 1) {\r\n        this._multitouch = true;\r\n        this._touchZoomPosition = e.touches;\r\n      }\r\n    }\r\n  }\r\n\r\n  _onMousemove(e) {\r\n    if (!this._mousedown) return;\r\n\r\n    const touch = e.touches;\r\n    const x = touch ? touch[0].clientX : e.clientX;\r\n    const y = touch ? touch[0].clientY : e.clientY;\r\n\r\n    if (touch) this._resetToolsToggler();\r\n\r\n    if (!this._multitouch) {\r\n      if (this._zoom !== 1) {\r\n        this._positionX = x * (1 / this._zoom) - this._mousedownPositionX;\r\n        this._positionY = y * (1 / this._zoom) - this._mousedownPositionY;\r\n        Manipulator.style(this.currentImg, {\r\n          left: `${this._positionX}px`,\r\n          top: `${this._positionY}px`,\r\n        });\r\n      } else {\r\n        if (this._images.length <= 1) return;\r\n        this._positionX = x * (1 / this._zoom) - this._mousedownPositionX;\r\n        Manipulator.style(this.currentImg, { left: `${this._positionX}px` });\r\n      }\r\n    }\r\n  }\r\n\r\n  _onMouseup(e) {\r\n    this._mousedown = false;\r\n    this._moveImg(e.target);\r\n  }\r\n\r\n  _onTouchend(e) {\r\n    this._mousedown = false;\r\n\r\n    if (this._multitouch) {\r\n      if (e.targetTouches.length === 0) {\r\n        this._multitouch = false;\r\n        this._touchZoomPosition = [];\r\n      }\r\n    } else if (!this._multitouch) {\r\n      this._checkDoubleTap(e);\r\n      this._moveImg(e.target);\r\n    }\r\n  }\r\n\r\n  _calculateTouchZoom(e) {\r\n    const initialDistance = Math.hypot(\r\n      this._touchZoomPosition[1].pageX - this._touchZoomPosition[0].pageX,\r\n      this._touchZoomPosition[1].pageY - this._touchZoomPosition[0].pageY\r\n    );\r\n    const finalDistance = Math.hypot(\r\n      e.touches[1].pageX - e.touches[0].pageX,\r\n      e.touches[1].pageY - e.touches[0].pageY\r\n    );\r\n    const distanceChange = Math.abs(initialDistance - finalDistance);\r\n    const screenWidth = e.view.screen.width;\r\n    if (distanceChange > screenWidth * 0.03) {\r\n      if (initialDistance <= finalDistance) {\r\n        this.zoomIn();\r\n      } else {\r\n        this.zoomOut();\r\n      }\r\n      this._touchZoomPosition = e.touches;\r\n    }\r\n  }\r\n\r\n  _onWindowTouchstart(e) {\r\n    if (e.touches.length > 1) {\r\n      this._multitouch = true;\r\n      this._touchZoomPosition = e.touches;\r\n    }\r\n  }\r\n\r\n  _onWindowTouchmove(e) {\r\n    e.preventDefault();\r\n    if (e.type === \"touchmove\" && e.targetTouches.length > 1) {\r\n      this._calculateTouchZoom(e);\r\n    }\r\n  }\r\n\r\n  _onRightArrowKeydown(e) {\r\n    switch (e.keyCode) {\r\n      case 9:\r\n        if (e.shiftKey) break;\r\n        e.preventDefault();\r\n        this._focusFullscreenBtn();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  _onFullscreenBtnKeydown(e) {\r\n    switch (e.keyCode) {\r\n      case 9:\r\n        if (!e.shiftKey) break;\r\n        e.preventDefault();\r\n        this._focusRightArrow();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  _onKeyup(e) {\r\n    this._resetToolsToggler();\r\n    switch (e.keyCode) {\r\n      case 39:\r\n        this.slide();\r\n        break;\r\n      case 37:\r\n        this.slide(\"left\");\r\n        break;\r\n      case 27:\r\n        this.close();\r\n        break;\r\n      case 36:\r\n        this.slide(\"first\");\r\n        break;\r\n      case 35:\r\n        this.slide(\"last\");\r\n        break;\r\n      case 38:\r\n        this.zoomIn();\r\n        break;\r\n      case 40:\r\n        this.zoomOut();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  _focusFullscreenBtn() {\r\n    setTimeout(() => {\r\n      this._fullscreenBtn.focus();\r\n    }, 100);\r\n  }\r\n\r\n  _focusRightArrow() {\r\n    this._rightArrow.focus();\r\n  }\r\n\r\n  _moveImg(target) {\r\n    if (this._multitouch) return;\r\n    if (\r\n      this._zoom !== 1 ||\r\n      target !== this.currentImg ||\r\n      this._images.length <= 1\r\n    )\r\n      return;\r\n\r\n    const movement = this._positionX - this._originalPositionX;\r\n    if (movement > 0) {\r\n      this.slide(\"left\");\r\n    } else if (movement < 0) {\r\n      this.slide();\r\n    }\r\n  }\r\n\r\n  _checkDoubleTap(e) {\r\n    clearTimeout(this._doubleTapTimer);\r\n    const currentTime = new Date().getTime();\r\n    const tapLength = currentTime - this._tapTime;\r\n\r\n    if (this._tapCounter > 0 && tapLength < 500) {\r\n      this._onDoubleClick(e);\r\n      this._doubleTapTimer = setTimeout(() => {\r\n        this._tapTime = new Date().getTime();\r\n        this._tapCounter = 0;\r\n      }, 300);\r\n    } else {\r\n      this._tapCounter++;\r\n      this._tapTime = new Date().getTime();\r\n    }\r\n  }\r\n\r\n  _resetDoubleTap() {\r\n    this._tapTime = 0;\r\n    this._tapCounter = 0;\r\n    clearTimeout(this._doubleTapTimer);\r\n  }\r\n\r\n  _onDoubleClick(e) {\r\n    if (this._multitouch) return;\r\n\r\n    if (!e.touches) this._setNewPositionOnZoomIn(e);\r\n    if (this._zoom !== 1) {\r\n      this._restoreDefaultZoom();\r\n    } else {\r\n      this.zoomIn();\r\n    }\r\n  }\r\n\r\n  _onZoom(e) {\r\n    if (e.deltaY > 0) {\r\n      this.zoomOut();\r\n    } else {\r\n      if (this._zoom >= 3) return;\r\n      this._setNewPositionOnZoomIn(e);\r\n      this.zoomIn();\r\n    }\r\n  }\r\n\r\n  _onBackdropClick(e) {\r\n    this._resetToolsToggler();\r\n\r\n    if (e.target.tagName !== \"DIV\") return;\r\n    this.close();\r\n  }\r\n\r\n  _setNewPositionOnZoomIn(e) {\r\n    clearTimeout(this._zoomTimer);\r\n    this._positionX = window.innerWidth / 2 - e.offsetX - 50;\r\n    this._positionY = window.innerHeight / 2 - e.offsetY - 50;\r\n    this.currentImg.style.transition = \"all 0.5s ease-out\";\r\n    this.currentImg.style.left = `${this._positionX}px`;\r\n    this.currentImg.style.top = `${this._positionY}px`;\r\n\r\n    this._zoomTimer = setTimeout(() => {\r\n      this.currentImg.style.transition = \"none\";\r\n    }, 500);\r\n  }\r\n\r\n  _resetToolsToggler() {\r\n    this._showTools();\r\n    clearTimeout(this._toolsToggleTimer);\r\n    this._setToolsToggleTimout();\r\n  }\r\n\r\n  _setToolsToggleTimout() {\r\n    this._toolsToggleTimer = setTimeout(() => {\r\n      this._hideTools();\r\n      clearTimeout(this._toolsToggleTimer);\r\n    }, 4000);\r\n  }\r\n\r\n  _hideTools() {\r\n    Manipulator.style(this._galleryToolbar, { opacity: 0 });\r\n    Manipulator.style(this._leftArrowWrapper, { opacity: 0 });\r\n    Manipulator.style(this._rightArrowWrapper, { opacity: 0 });\r\n  }\r\n\r\n  _showTools() {\r\n    Manipulator.style(this._galleryToolbar, { opacity: 1 });\r\n    Manipulator.style(this._leftArrowWrapper, { opacity: 1 });\r\n    Manipulator.style(this._rightArrowWrapper, { opacity: 1 });\r\n  }\r\n\r\n  _disableScroll() {\r\n    Manipulator.addClass(document.body, `overflow-y-hidden relative`);\r\n\r\n    if (\r\n      document.documentElement.scrollHeight >\r\n      document.documentElement.clientHeight\r\n    ) {\r\n      Manipulator.addClass(document.body, `md:pr-[17px]`);\r\n    }\r\n  }\r\n\r\n  _enableScroll() {\r\n    setTimeout(() => {\r\n      Manipulator.removeClass(document.body, `overflow-y-hidden relative`);\r\n      Manipulator.removeClass(document.body, `md:pr-[17px]`);\r\n    }, 300);\r\n  }\r\n\r\n  _animationStart() {\r\n    this._animating = true;\r\n    setTimeout(() => {\r\n      this._animating = false;\r\n    }, 400);\r\n  }\r\n\r\n  _restoreDefaultZoom() {\r\n    if (this._zoom !== 1) {\r\n      this._zoom = 1;\r\n      Manipulator.style(this.currentImg.parentNode, {\r\n        transform: `scale(${this._zoom})`,\r\n      });\r\n\r\n      this._updateZoomBtn();\r\n      this._updateImgPosition();\r\n    }\r\n  }\r\n\r\n  _restoreDefaultFullscreen() {\r\n    if (this._fullscreen) this.toggleFullscreen();\r\n  }\r\n\r\n  _restoreDefaultPosition() {\r\n    clearTimeout(this._zoomTimer);\r\n    const currentImg = this.currentImg;\r\n\r\n    Manipulator.style(this.currentImg.parentNode, { left: 0, top: 0 });\r\n    Manipulator.style(this.currentImg, {\r\n      transition: \"all 0.5s ease-out\",\r\n      left: 0,\r\n      top: 0,\r\n    });\r\n\r\n    this._calculateImgSize(currentImg);\r\n\r\n    setTimeout(() => {\r\n      Manipulator.style(this.currentImg, { transition: \"none\" });\r\n    }, 500);\r\n  }\r\n\r\n  async _triggerEvents(startEvent, completeEvent) {\r\n    EventHandler.trigger(this._element, `${startEvent}.te.lightbox`);\r\n\r\n    if (completeEvent) {\r\n      await setTimeout(() => {\r\n        EventHandler.trigger(this._element, `${completeEvent}.te.lightbox`);\r\n      }, 505);\r\n    }\r\n  }\r\n\r\n  static getInstance(element) {\r\n    return Data.getData(element, DATA_KEY);\r\n  }\r\n\r\n  static getOrCreateInstance(element, config = {}) {\r\n    return (\r\n      this.getInstance(element) ||\r\n      new this(element, typeof config === \"object\" ? config : null)\r\n    );\r\n  }\r\n\r\n  static toggle() {\r\n    return function (event) {\r\n      const lightbox = SelectorEngine.closest(\r\n        event.target,\r\n        `${SELECTOR_ATTR_LIGHTBOX}`\r\n      );\r\n      const instance = Lightbox.getInstance(lightbox) || new Lightbox(lightbox);\r\n      instance.open(event);\r\n    };\r\n  }\r\n\r\n  static jQueryInterface(config, options) {\r\n    return this.each(function () {\r\n      let data = Data.getData(this, DATA_KEY);\r\n      const _config = typeof config === \"object\" && config;\r\n      if (!data && /dispose/.test(config)) {\r\n        return;\r\n      }\r\n      if (!data) {\r\n        data = new Lightbox(this, _config);\r\n      }\r\n      if (typeof config === \"string\") {\r\n        if (typeof data[config] === \"undefined\") {\r\n          throw new TypeError(`No method named \"${config}\"`);\r\n        }\r\n        data[config](options);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default Lightbox;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\nimport { element, getUID, typeCheckConfig } from \"../../util/index\";\r\nimport {\r\n  getDelimeters,\r\n  parseDate,\r\n  getMonth,\r\n  getYear,\r\n  isValidDate,\r\n  isValidTime,\r\n} from \"./utils\";\r\nimport { getIconButtonsTemplate, getToggleButtonTemplate } from \"./templates\";\r\nimport ScrollBarHelper from \"../../util/scrollbar\";\r\nimport Data from \"../../dom/data\";\r\nimport EventHandler from \"../../dom/event-handler\";\r\nimport Manipulator from \"../../dom/manipulator\";\r\nimport SelectorEngine from \"../../dom/selector-engine\";\r\nimport Datepicker from \"../datepicker\";\r\nimport Timepicker from \"../timepicker\";\r\n\r\nconst NAME = \"datetimepicker\";\r\nconst DATA_KEY = `te.${NAME}`;\r\nconst EVENT_KEY = `.${DATA_KEY}`;\r\n\r\nconst ATTR_DATEPICKER = \"data-te-datepicker-init\";\r\nconst ATTR_TIMEPICKER = \"data-te-timepicker-init\";\r\n\r\nconst ATTR_DATEPICKER_HEADER = \"data-te-datepicker-header\";\r\nconst ATTR_DATEPICKER_CANCEL_BTN_REF = \"data-te-datepicker-cancel-button-ref\";\r\nconst ATTR_DATEPICKER_OK_BTN_REF = \"data-te-datepicker-ok-button-ref\";\r\n\r\nconst ATTR_TIMEPICKER_WRAPPER = \"data-te-timepicker-wrapper\";\r\nconst ATTR_TIMEPICKER_CANCEL_BTN = \"data-te-timepicker-cancel\";\r\nconst ATTR_TIMEPICKER_SUBMIT = \"data-te-timepicker-submit\";\r\nconst ATTR_TIMEPICKER_CLEAR = \"data-te-timepicker-clear\";\r\n\r\nconst ATTR_BUTTON_TIMEPICKER = \"data-te-buttons-timepicker\";\r\nconst ATTR_TOGGLE_BUTTON = `data-te-date-timepicker-toggle-ref`;\r\nconst ATTR_DATEPICKER_TOGGLE_BTN = \"data-te-datepicker-toggle-button-ref\";\r\nconst ATTR_TIMEPICKER_TOGGLE_BTN = \"data-te-timepicker-toggle-button-ref\";\r\n\r\nconst SELECTOR_TIMEPICKER = `[${ATTR_TIMEPICKER}]`;\r\nconst SELECTOR_DATEPICKER = `[${ATTR_DATEPICKER}]`;\r\nconst SELECTOR_TOGGLE_BUTTON = `[${ATTR_TOGGLE_BUTTON}]`;\r\nconst SELECTOR_TIMEPICKER_TOGGLE = `[${ATTR_TIMEPICKER_TOGGLE_BTN}]`;\r\n\r\nconst SELECTOR_INPUT_NOTCH = \"[data-te-input-notch-ref]\";\r\nconst SELECTOR_DATA_TOGGLE = `[data-te-date-timepicker-toggle-ref]`;\r\nconst SELECTOR_TIMEPICKER_ELEMENTS = \"[data-te-timepicker-elements-wrapper]\";\r\nconst SELECTOR_TIMEPICKER_CLOCK = \"[data-te-timepicker-clock-wrapper]\";\r\n\r\nconst EVENT_OPEN = `open${EVENT_KEY}`;\r\nconst EVENT_CLOSE = `close${EVENT_KEY}`;\r\nconst EVENT_DATETIME_CHANGE = `datetimeChange${EVENT_KEY}`;\r\n\r\nconst EVENT_CLOSE_DATEPICKER = \"close.te.datepicker\";\r\nconst EVENT_INPUT_TIMEPICKER = \"input.te.timepicker\";\r\nconst BUTTONS_WRAPPER = element(\"div\");\r\n\r\nconst Default = {\r\n  inline: false,\r\n  toggleButton: true,\r\n  container: \"body\",\r\n  disabled: false,\r\n  disablePast: false,\r\n  disableFuture: false,\r\n  defaultTime: \"\",\r\n  defaultDate: \"\",\r\n  timepicker: {},\r\n  datepicker: {},\r\n  showFormat: false,\r\n  dateTimepickerToggleIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n  <path fill-rule=\"evenodd\" d=\"M6.75 2.25A.75.75 0 017.5 3v1.5h9V3A.75.75 0 0118 3v1.5h.75a3 3 0 013 3v11.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V7.5a3 3 0 013-3H6V3a.75.75 0 01.75-.75zm13.5 9a1.5 1.5 0 00-1.5-1.5H5.25a1.5 1.5 0 00-1.5 1.5v7.5a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5v-7.5z\" clip-rule=\"evenodd\" />\r\n  </svg>`,\r\n  datepickerToggleIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\r\n  <path fill-rule=\"evenodd\" d=\"M6.75 2.25A.75.75 0 017.5 3v1.5h9V3A.75.75 0 0118 3v1.5h.75a3 3 0 013 3v11.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V7.5a3 3 0 013-3H6V3a.75.75 0 01.75-.75zm13.5 9a1.5 1.5 0 00-1.5-1.5H5.25a1.5 1.5 0 00-1.5 1.5v7.5a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5v-7.5z\" clip-rule=\"evenodd\" />\r\n  </svg>`,\r\n  timepickerToggleIconTemplate: `<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\r\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n  </svg>`,\r\n};\r\n\r\nconst DefaultType = {\r\n  inline: \"boolean\",\r\n  toggleButton: \"boolean\",\r\n  container: \"string\",\r\n  disabled: \"boolean\",\r\n  disablePast: \"boolean\",\r\n  disableFuture: \"boolean\",\r\n  defaultTime: \"(string|date|number)\",\r\n  defaultDate: \"(string|date|number)\",\r\n  timepicker: \"object\",\r\n  datepicker: \"object\",\r\n  showFormat: \"boolean\",\r\n  dateTimepickerToggleIconTemplate: \"string\",\r\n  datepickerToggleIconTemplate: \"string\",\r\n  timepickerToggleIconTemplate: \"string\",\r\n};\r\n\r\nconst DefaultClasses = {\r\n  toggleButton:\r\n    \"flex items-center justify-content-center [&>svg]:w-5 [&>svg]:h-5 absolute outline-none border-none bg-transparent right-0.5 top-1/2 -translate-x-1/2 -translate-y-1/2 hover:text-primary focus:text-primary dark:hover:text-primary-400 dark:focus:text-primary-400 dark:text-neutral-200\",\r\n  pickerIcon:\r\n    \"[&>svg]:w-6 [&>svg]:h-6 [&>svg]:mx-auto [&>svg]:pointer-events-none w-1/2 px-1.5 py-[1px] rounded-[10px] min-h-[40px] cursor-pointer outline-none border-none text-white hover:bg-primary-600 dark:hover:bg-neutral-600\",\r\n  buttonsContainer:\r\n    \"flex justify-evenly items-end bg-primary dark:bg-zinc-800 dark:data-[te-buttons-timepicker]:bg-zinc-700\",\r\n  timepicker: {},\r\n  datepicker: {},\r\n};\r\n\r\nconst DefaultClassesType = {\r\n  toggleButton: \"string\",\r\n  pickerIcon: \"string\",\r\n  buttonsContainer: \"string\",\r\n  timepicker: \"object\",\r\n  datepicker: \"object\",\r\n};\r\n\r\nclass Datetimepicker {\r\n  constructor(element, options, classes) {\r\n    this._element = element;\r\n\r\n    this._input = SelectorEngine.findOne(\"input\", this._element);\r\n    this._options = this._getConfig(options);\r\n    this._classes = this._getClasses(classes);\r\n\r\n    this._timepicker = null;\r\n    this._datepicker = null;\r\n    this._dateValue = this._options.defaultDate\r\n      ? this._options.defaultDate\r\n      : \"\";\r\n    this._timeValue = this._options.defaultTime\r\n      ? this._options.defaultTime\r\n      : \"\";\r\n    this._isInvalidTimeFormat = false;\r\n    this._format = this._options.datepicker.format\r\n      ? this._options.datepicker.format\r\n      : \"dd/mm/yyyy\";\r\n    this._cancel = false;\r\n\r\n    this._scrollBar = new ScrollBarHelper();\r\n\r\n    if (this._element) {\r\n      Data.setData(element, DATA_KEY, this);\r\n    }\r\n\r\n    this._init();\r\n  }\r\n\r\n  // Getters\r\n\r\n  static get NAME() {\r\n    return NAME;\r\n  }\r\n\r\n  get toggleButton() {\r\n    return SelectorEngine.findOne(SELECTOR_TOGGLE_BUTTON, this._element);\r\n  }\r\n\r\n  get notch() {\r\n    return SelectorEngine.findOne(SELECTOR_INPUT_NOTCH, this._element);\r\n  }\r\n\r\n  dispose() {\r\n    EventHandler.off(this._element, \"click\", this._openDatePicker);\r\n    EventHandler.off(this._input, \"input\", this._handleInput);\r\n    EventHandler.off(this._element, \"click\");\r\n    Data.removeData(this._element, DATA_KEY);\r\n\r\n    this._removeTimePicker();\r\n    this._removeDatepicker();\r\n    this.toggleButton.remove();\r\n\r\n    this._options = Default;\r\n    this._timepicker = null;\r\n    this._datepicker = null;\r\n    this._dateValue = null;\r\n    this._timeValue = null;\r\n    this._isInvalidTimeFormat = null;\r\n  }\r\n\r\n  update(options = {}) {\r\n    const tempOptions = this._getConfig({ ...this._options, ...options });\r\n    this.dispose();\r\n    this._options = tempOptions;\r\n\r\n    this._init();\r\n  }\r\n\r\n  // Private\r\n\r\n  _init() {\r\n    this._addDatepicker();\r\n    this._addTimePicker();\r\n    this._appendToggleButton();\r\n    this._listenToToggleClick();\r\n    this._listenToUserInput();\r\n    this._disableInput();\r\n    this._setInitialDefaultInput();\r\n    this._applyFormatPlaceholder();\r\n\r\n    if (this._options.disablePast) {\r\n      this._handleTimepickerDisablePast();\r\n    }\r\n    if (this._options.disableFuture) {\r\n      this._handleTimepickerDisableFuture();\r\n    }\r\n  }\r\n\r\n  _removeDatepicker() {\r\n    const datepicker = this._element.querySelector(SELECTOR_DATEPICKER);\r\n    if (datepicker) {\r\n      datepicker.remove();\r\n    }\r\n  }\r\n\r\n  _addDatepicker() {\r\n    const DATEPICKER_WRAPPER = element(\"div\");\r\n    DATEPICKER_WRAPPER.id = this._element.id\r\n      ? `datepicker-${this._element.id}`\r\n      : getUID(\"datepicker-\");\r\n\r\n    const DATEPICKER_INPUT = '<input type=\"text\">';\r\n    DATEPICKER_WRAPPER.innerHTML = DATEPICKER_INPUT;\r\n\r\n    DATEPICKER_WRAPPER.setAttribute(ATTR_DATEPICKER, \"\");\r\n    this._element.appendChild(DATEPICKER_WRAPPER);\r\n    Manipulator.addClass(DATEPICKER_WRAPPER, \"hidden\");\r\n\r\n    let datepickerOptions = {\r\n      ...this._options.datepicker,\r\n      ...{\r\n        container: this._options.container,\r\n        disablePast: this._options.disablePast,\r\n        disableFuture: this._options.disableFuture,\r\n      },\r\n    };\r\n\r\n    if (this._options.inline || this._options.datepicker.inline) {\r\n      datepickerOptions = { ...datepickerOptions, ...{ inline: true } };\r\n    }\r\n    this._datepicker = new Datepicker(DATEPICKER_WRAPPER, datepickerOptions, {\r\n      ...this._classes.datepicker,\r\n    });\r\n    this._datepicker._input.value = this._dateValue;\r\n  }\r\n\r\n  _removeTimePicker() {\r\n    const timepicker = this._element.querySelector(SELECTOR_TIMEPICKER);\r\n    if (timepicker) {\r\n      timepicker.remove();\r\n      this._scrollBar.reset();\r\n    }\r\n  }\r\n\r\n  _addTimePicker() {\r\n    const TIMEPICKER_WRAPPER = element(\"div\");\r\n    TIMEPICKER_WRAPPER.id = this._element.id\r\n      ? `timepicker-${this._element.id}`\r\n      : getUID(\"timepicker-\");\r\n\r\n    const TIMEPICKER_INPUT = '<input type=\"text\">';\r\n    TIMEPICKER_WRAPPER.innerHTML = TIMEPICKER_INPUT;\r\n\r\n    TIMEPICKER_WRAPPER.setAttribute(ATTR_TIMEPICKER, \"\");\r\n    this._element.appendChild(TIMEPICKER_WRAPPER);\r\n    Manipulator.addClass(TIMEPICKER_WRAPPER, \"hidden\");\r\n\r\n    let timepickerOptions = {\r\n      ...this._options.timepicker,\r\n      ...{ container: this._options.container },\r\n    };\r\n\r\n    if (this._options.inline || this._options.timepicker.inline) {\r\n      timepickerOptions = { timepickerOptions, ...{ inline: true } };\r\n    }\r\n\r\n    this._timepicker = new Timepicker(TIMEPICKER_WRAPPER, timepickerOptions, {\r\n      ...this._classes.timepicker,\r\n    });\r\n    this._timepicker.input.value = this._timeValue;\r\n  }\r\n\r\n  _addIconButtons() {\r\n    Manipulator.addClass(BUTTONS_WRAPPER, this._classes.buttonsContainer);\r\n\r\n    BUTTONS_WRAPPER.innerHTML = getIconButtonsTemplate(\r\n      this._options.datepickerToggleIconTemplate,\r\n      this._options.timepickerToggleIconTemplate,\r\n      this._classes\r\n    );\r\n    BUTTONS_WRAPPER.removeAttribute(ATTR_BUTTON_TIMEPICKER);\r\n\r\n    if (this._options.inline || this._options.datepicker.inline) {\r\n      return;\r\n    }\r\n\r\n    this._scrollBar.hide();\r\n\r\n    if (this._datepicker._isOpen) {\r\n      const headerDate = SelectorEngine.findOne(\r\n        `[${ATTR_DATEPICKER_HEADER}]`,\r\n        document.body\r\n      );\r\n\r\n      headerDate.appendChild(BUTTONS_WRAPPER);\r\n    } else if (this._timepicker._modal && !this._options.timepicker.inline) {\r\n      const header = SelectorEngine.findOne(\r\n        SELECTOR_TIMEPICKER_ELEMENTS,\r\n        document.body\r\n      );\r\n      const headerTime = SelectorEngine.findOne(\r\n        SELECTOR_TIMEPICKER_CLOCK,\r\n        document.body\r\n      );\r\n\r\n      BUTTONS_WRAPPER.setAttribute(ATTR_BUTTON_TIMEPICKER, \"\");\r\n\r\n      header.insertBefore(BUTTONS_WRAPPER, headerTime);\r\n    }\r\n  }\r\n\r\n  _enableOrDisableToggleButton() {\r\n    if (this._options.disabled) {\r\n      this.toggleButton.disabled = true;\r\n      Manipulator.addClass(this.toggleButton, \"pointer-events-none\");\r\n    } else {\r\n      this.toggleButton.disabled = false;\r\n      Manipulator.removeClass(this.toggleButton, \"pointer-events-none\");\r\n    }\r\n  }\r\n\r\n  _appendToggleButton() {\r\n    if (!this._options.toggleButton) {\r\n      return;\r\n    }\r\n    this._element.insertAdjacentHTML(\r\n      \"beforeend\",\r\n      getToggleButtonTemplate(\r\n        this._options.dateTimepickerToggleIconTemplate,\r\n        this._classes\r\n      )\r\n    );\r\n\r\n    this._enableOrDisableToggleButton();\r\n  }\r\n\r\n  _applyFormatPlaceholder() {\r\n    if (this._options.showFormat) {\r\n      this._input.placeholder = this._format;\r\n    }\r\n  }\r\n\r\n  _listenToCancelClick() {\r\n    const DATEPICKER_CANCEL_BTN = SelectorEngine.findOne(\r\n      `[${ATTR_DATEPICKER_CANCEL_BTN_REF}]`,\r\n      document.body\r\n    );\r\n\r\n    EventHandler.one(DATEPICKER_CANCEL_BTN, \"mousedown\", () => {\r\n      this._cancel = true;\r\n      this._scrollBar.reset();\r\n      EventHandler.off(DATEPICKER_CANCEL_BTN, \"mousedown\");\r\n    });\r\n  }\r\n\r\n  _listenToToggleClick() {\r\n    EventHandler.on(this._element, \"click\", SELECTOR_DATA_TOGGLE, (event) => {\r\n      event.preventDefault();\r\n      this._openDatePicker();\r\n    });\r\n  }\r\n\r\n  _listenToUserInput() {\r\n    EventHandler.on(this._input, \"input\", (event) => {\r\n      this._handleInput(event.target.value);\r\n    });\r\n  }\r\n\r\n  _disableInput() {\r\n    if (this._options.disabled) {\r\n      this._input.disabled = \"true\";\r\n    }\r\n  }\r\n\r\n  _getConfig(config) {\r\n    const dataAttributes = Manipulator.getDataAttributes(this._element);\r\n\r\n    config = {\r\n      ...Default,\r\n      ...dataAttributes,\r\n      ...config,\r\n    };\r\n\r\n    typeCheckConfig(NAME, config, DefaultType);\r\n    return config;\r\n  }\r\n\r\n  _getClasses(classes) {\r\n    const dataAttributes = Manipulator.getDataClassAttributes(this._element);\r\n\r\n    classes = {\r\n      ...DefaultClasses,\r\n      ...dataAttributes,\r\n      ...classes,\r\n    };\r\n\r\n    typeCheckConfig(NAME, classes, DefaultClassesType);\r\n\r\n    return classes;\r\n  }\r\n\r\n  _handleInput(input) {\r\n    const dateTimeSplited = input.split(\", \");\r\n    const dateDelimeters = getDelimeters(this._format);\r\n\r\n    const inputFirstValue = dateTimeSplited[0];\r\n    const inputSecondValue = dateTimeSplited[1] || \"\";\r\n\r\n    const date = parseDate(\r\n      inputFirstValue,\r\n      this._format,\r\n      dateDelimeters,\r\n      this._datepicker._options\r\n    );\r\n\r\n    if (dateTimeSplited.length === 2) {\r\n      const isInputValid = isValidDate(date) && isValidTime(inputSecondValue);\r\n\r\n      if (isInputValid) {\r\n        this._dateValue = inputFirstValue;\r\n        this._timeValue = inputSecondValue;\r\n        this._datepicker._input.value = this._dateValue;\r\n        this._datepicker._activeDate = this._dateValue;\r\n        this._datepicker._selectedYear = getYear(date);\r\n        this._datepicker._selectedMonth = getMonth(date);\r\n        this._datepicker._headerDate = date;\r\n        this._timepicker.input.value = this._timeValue;\r\n        this._timepicker._isInvalidTimeFormat = false;\r\n      } else {\r\n        this._datepicker._activeDate = new Date();\r\n        this._datepicker._selectedDate = null;\r\n        this._datepicker._selectedMonth = null;\r\n        this._datepicker._selectedYear = null;\r\n        this._datepicker._headerDate = null;\r\n        this._datepicker._headerMonth = null;\r\n        this._datepicker._headerYear = null;\r\n        this._timepicker._isInvalidTimeFormat = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  _openDatePicker() {\r\n    const openEvent = EventHandler.trigger(this._element, EVENT_OPEN);\r\n\r\n    if (openEvent.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this._datepicker.open();\r\n\r\n    if (!this._options.inline) {\r\n      this._scrollBar.hide();\r\n    }\r\n\r\n    if (this._options.inline || this._options.datepicker.inline) {\r\n      this._openDropdownDate();\r\n    }\r\n    this._addIconButtons();\r\n\r\n    this._listenToCancelClick();\r\n\r\n    if (this._options.inline && this._datepicker._isOpen) {\r\n      Manipulator.addClass(this.toggleButton, \"pointer-events-none\");\r\n    }\r\n\r\n    EventHandler.one(this._datepicker._element, EVENT_CLOSE_DATEPICKER, () => {\r\n      this._dateValue = this._datepicker._input.value;\r\n\r\n      this._updateInputValue();\r\n\r\n      if (this._cancel) {\r\n        this._cancel = false;\r\n        return;\r\n      }\r\n\r\n      EventHandler.on(this._datepicker.container, \"click\", (e) => {\r\n        if (\r\n          !this._datepicker._selectedDate &&\r\n          e.target.hasAttribute(ATTR_DATEPICKER_OK_BTN_REF)\r\n        ) {\r\n          return;\r\n        }\r\n        this._openTimePicker();\r\n      });\r\n      setTimeout(() => {\r\n        const timepicker = SelectorEngine.findOne(\r\n          `[${ATTR_TIMEPICKER_WRAPPER}]`,\r\n          document.body\r\n        );\r\n        if (!timepicker) {\r\n          this._scrollBar.reset();\r\n        }\r\n      }, 10);\r\n      if (this._options.inline) {\r\n        Manipulator.removeClass(this.toggleButton, \"pointer-events-none\");\r\n      }\r\n    });\r\n\r\n    const CLOCK_BTN = SelectorEngine.findOne(\r\n      SELECTOR_TIMEPICKER_TOGGLE,\r\n      document.body\r\n    );\r\n\r\n    EventHandler.on(CLOCK_BTN, \"click\", () => {\r\n      this._datepicker.close();\r\n      this._scrollBar.hide();\r\n      EventHandler.trigger(this._datepicker._element, EVENT_CLOSE_DATEPICKER);\r\n    });\r\n  }\r\n\r\n  _handleTimepickerDisablePast() {\r\n    const currentDate = new Date();\r\n    currentDate.setHours(0, 0, 0, 0);\r\n\r\n    EventHandler.on(\r\n      this._datepicker._element,\r\n      \"dateChange.te.datepicker\",\r\n      () => {\r\n        if (\r\n          this._datepicker._selectedDate.getTime() === currentDate.getTime()\r\n        ) {\r\n          this._timepicker.update({ disablePast: true });\r\n        } else {\r\n          this._timepicker.update({ disablePast: false });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleTimepickerDisableFuture() {\r\n    const currentDate = new Date();\r\n    currentDate.setHours(0, 0, 0, 0);\r\n\r\n    EventHandler.on(\r\n      this._datepicker._element,\r\n      \"dateChange.te.datepicker\",\r\n      () => {\r\n        if (\r\n          this._datepicker._selectedDate.getTime() === currentDate.getTime()\r\n        ) {\r\n          this._timepicker.update({ disableFuture: true });\r\n        } else {\r\n          this._timepicker.update({ disableFuture: false });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  _handleEscapeKey() {\r\n    EventHandler.one(document.body, \"keyup\", () => {\r\n      setTimeout(() => {\r\n        const timepicker = SelectorEngine.findOne(\r\n          `[${ATTR_TIMEPICKER_WRAPPER}]`,\r\n          document.body\r\n        );\r\n        if (!timepicker) {\r\n          this._scrollBar.reset();\r\n        }\r\n      }, 250);\r\n    });\r\n  }\r\n\r\n  _handleCancelButton() {\r\n    const CANCEL_BTN = SelectorEngine.findOne(\r\n      `[${ATTR_TIMEPICKER_CANCEL_BTN}]`,\r\n      document.body\r\n    );\r\n    EventHandler.one(CANCEL_BTN, \"mousedown\", () => {\r\n      this._scrollBar.reset();\r\n    });\r\n  }\r\n\r\n  _openDropdownDate() {\r\n    const datePopper = this._datepicker._popper;\r\n    datePopper.state.elements.reference = this._input;\r\n    this._scrollBar.reset();\r\n  }\r\n\r\n  _openTimePicker() {\r\n    EventHandler.trigger(this._timepicker.elementToggle, \"click\");\r\n    setTimeout(() => {\r\n      this._addIconButtons();\r\n\r\n      if (this._options.inline || this._options.timepicker.inline) {\r\n        this._openDropdownTime();\r\n      }\r\n      if (this._timepicker._modal) {\r\n        const CANCEL_BTN = SelectorEngine.findOne(\r\n          `[${ATTR_TIMEPICKER_CANCEL_BTN}]`,\r\n          document.body\r\n        );\r\n        this._handleEscapeKey();\r\n        this._handleCancelButton();\r\n        EventHandler.on(this._timepicker._modal, \"click\", (e) => {\r\n          if (\r\n            e.target.hasAttribute(ATTR_TIMEPICKER_WRAPPER) ||\r\n            e.target.hasAttribute(ATTR_TIMEPICKER_SUBMIT)\r\n          ) {\r\n            setTimeout(() => {\r\n              this._scrollBar.reset();\r\n            }, 200);\r\n          }\r\n          if (e.target.hasAttribute(ATTR_TIMEPICKER_CLEAR)) {\r\n            EventHandler.trigger(\r\n              this._timepicker._element,\r\n              EVENT_INPUT_TIMEPICKER\r\n            );\r\n          }\r\n          if (e.target.hasAttribute(ATTR_DATEPICKER_TOGGLE_BTN)) {\r\n            EventHandler.trigger(CANCEL_BTN, \"click\");\r\n            setTimeout(() => {\r\n              this._openDatePicker();\r\n              this._scrollBar.hide();\r\n            }, 200);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    EventHandler.one(this._timepicker._element, EVENT_INPUT_TIMEPICKER, () => {\r\n      this._timeValue = this._timepicker.input.value;\r\n      this._updateInputValue();\r\n      EventHandler.trigger(this._element, EVENT_CLOSE);\r\n    });\r\n  }\r\n\r\n  _openDropdownTime() {\r\n    const timePopper = this._timepicker._popper;\r\n    timePopper.state.elements.reference = this._input;\r\n    timePopper.update();\r\n    this._scrollBar.reset();\r\n  }\r\n\r\n  _setInitialDefaultInput() {\r\n    const shouldUpdate = this._options.defaultDate || this._options.defaultTime;\r\n\r\n    if (shouldUpdate) {\r\n      this._updateInputValue();\r\n    }\r\n  }\r\n\r\n  _updateInputValue() {\r\n    const isDateTimeFilled = this._timeValue && this._dateValue;\r\n\r\n    if (isDateTimeFilled) {\r\n      this._input.value = `${this._dateValue}, ${this._timeValue}`;\r\n\r\n      const changeEvent = EventHandler.trigger(\r\n        this._element,\r\n        EVENT_DATETIME_CHANGE\r\n      );\r\n\r\n      if (changeEvent.defaultPrevented) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    EventHandler.trigger(this._input, \"focus\");\r\n    this.notch && this.notch.removeAttribute(\"data-te-input-focused\");\r\n  }\r\n\r\n  // static\r\n\r\n  static jQueryInterface(config, options) {\r\n    return this.each(function () {\r\n      let data = Data.getData(this, DATA_KEY);\r\n      const _config = typeof config === \"object\" && config;\r\n\r\n      if (!data && /dispose/.test(config)) {\r\n        return;\r\n      }\r\n\r\n      if (!data) {\r\n        data = new Datetimepicker(this, _config);\r\n      }\r\n\r\n      if (typeof config === \"string\") {\r\n        if (typeof data[config] === \"undefined\") {\r\n          throw new TypeError(`No method named \"${config}\"`);\r\n        }\r\n\r\n        data[config](options);\r\n      }\r\n    });\r\n  }\r\n\r\n  static getInstance(element) {\r\n    return Data.getData(element, DATA_KEY);\r\n  }\r\n\r\n  static getOrCreateInstance(element, config = {}) {\r\n    return (\r\n      this.getInstance(element) ||\r\n      new this(element, typeof config === \"object\" ? config : null)\r\n    );\r\n  }\r\n}\r\n\r\nexport default Datetimepicker;\r\n","/*\r\n--------------------------------------------------------------------------\r\nTailwind Elements is an open-source UI kit of advanced components for TailwindCSS.\r\nCopyright © 2023 MDBootstrap.com\r\n\r\nUnless a custom, individually assigned license has been granted, this program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\nIn addition, a custom license may be available upon request, subject to the terms and conditions of that license. Please contact tailwind@mdbootstrap.com for more information on obtaining a custom license.\r\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n--------------------------------------------------------------------------\r\n*/\r\n\r\nexport const getIconButtonsTemplate = (\r\n  datepickerIconTemplate,\r\n  timepickerIconTemplate,\r\n  classes\r\n) => `\r\n  <button type=\"button\" class=\"${classes.pickerIcon}\" data-te-datepicker-toggle-button-ref>\r\n    ${datepickerIconTemplate}\r\n  </button>\r\n  <button type=\"button\" class=\"${classes.pickerIcon}\" data-te-timepicker-toggle-button-ref>\r\n    ${timepickerIconTemplate}\r\n  </button>\r\n`;\r\n\r\nexport const getToggleButtonTemplate = (toggleButtonTemplate, classes) => `\r\n  <button type=\"button\" class=\"${classes.toggleButton}\" data-te-date-timepicker-toggle-ref>\r\n    ${toggleButtonTemplate} \r\n  </button>\r\n`;\r\n","/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nfunction noop() {}\nconst uid = (function() {\n  let id = 0;\n  return function() {\n    return id++;\n  };\n}());\nfunction isNullOrUndef(value) {\n  return value === null || typeof value === 'undefined';\n}\nfunction isArray(value) {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n  const type = Object.prototype.toString.call(value);\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n    return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\nconst isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);\nfunction finiteOrDefault(value, defaultValue) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\nfunction valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100\n    : value / dimension;\nconst toDimension = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100 * dimension\n    : +value;\nfunction callback(fn, args, thisArg) {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n  let i, len, keys;\n  if (isArray(loopable)) {\n    len = loopable.length;\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\nfunction _elementsEqual(a0, a1) {\n  let i, ilen, v0, v1;\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction clone$1(source) {\n  if (isArray(source)) {\n    return source.map(clone$1);\n  }\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone$1(source[keys[k]]);\n    }\n    return target;\n  }\n  return source;\n}\nfunction isValidKey(key) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\nfunction _merger(key, target, source, options) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone$1(sval);\n  }\n}\nfunction merge(target, source, options) {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n  if (!isObject(target)) {\n    return target;\n  }\n  options = options || {};\n  const merger = options.merger || _merger;\n  for (let i = 0; i < ilen; ++i) {\n    source = sources[i];\n    if (!isObject(source)) {\n      continue;\n    }\n    const keys = Object.keys(source);\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, source, options);\n    }\n  }\n  return target;\n}\nfunction mergeIf(target, source) {\n  return merge(target, source, {merger: _mergerIf});\n}\nfunction _mergerIf(key, target, source) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone$1(sval);\n  }\n}\nfunction _deprecated(scope, value, previous, current) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous +\n\t\t\t'\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\nconst keyResolvers = {\n  '': v => v,\n  x: o => o.x,\n  y: o => o.y\n};\nfunction resolveObjectKey(obj, key) {\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n  return resolver(obj);\n}\nfunction _getKeyResolver(key) {\n  const keys = _splitKey(key);\n  return obj => {\n    for (const k of keys) {\n      if (k === '') {\n        break;\n      }\n      obj = obj && obj[k];\n    }\n    return obj;\n  };\n}\nfunction _splitKey(key) {\n  const parts = key.split('.');\n  const keys = [];\n  let tmp = '';\n  for (const part of parts) {\n    tmp += part;\n    if (tmp.endsWith('\\\\')) {\n      tmp = tmp.slice(0, -1) + '.';\n    } else {\n      keys.push(tmp);\n      tmp = '';\n    }\n  }\n  return keys;\n}\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value) => typeof value !== 'undefined';\nconst isFunction = (value) => typeof value === 'function';\nconst setsEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n  return true;\n};\nfunction _isClickEvent(e) {\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\nconst PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction niceNum(range) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\nfunction _factorize(value) {\n  const result = [];\n  const sqrt = Math.sqrt(value);\n  let i;\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n  if (sqrt === (sqrt | 0)) {\n    result.push(sqrt);\n  }\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostEquals(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\nfunction almostWhole(x, epsilon) {\n  const rounded = Math.round(x);\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n}\nfunction _setMinAndMaxByKey(array, target, property) {\n  let i, ilen, value;\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\nfunction toRadians(degrees) {\n  return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n  return radians * (180 / PI);\n}\nfunction _decimalPlaces(x) {\n  if (!isNumberFinite(x)) {\n    return;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n  if (angle < (-0.5 * PI)) {\n    angle += TAU;\n  }\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\nfunction _angleDiff(a, b) {\n  return (a - b + PITAU) % TAU - PI;\n}\nfunction _normalizeAngle(a) {\n  return (a % TAU + TAU) % TAU;\n}\nfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n  const a = _normalizeAngle(angle);\n  const s = _normalizeAngle(start);\n  const e = _normalizeAngle(end);\n  const angleToStart = _normalizeAngle(s - a);\n  const angleToEnd = _normalizeAngle(e - a);\n  const startToAngle = _normalizeAngle(a - s);\n  const endToAngle = _normalizeAngle(a - e);\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\n}\nfunction _limitValue(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nfunction _int16Range(value) {\n  return _limitValue(value, -32768, 32767);\n}\nfunction _isBetween(value, start, end, epsilon = 1e-6) {\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n  cmp = cmp || ((index) => table[index] < value);\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid;\n  while (hi - lo > 1) {\n    mid = (lo + hi) >> 1;\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  return {lo, hi};\n}\nconst _lookupByKey = (table, key, value, last) =>\n  _lookup(table, value, last\n    ? index => table[index][key] <= value\n    : index => table[index][key] < value);\nconst _rlookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] >= value);\nfunction _filterBetween(values, min, max) {\n  let start = 0;\n  let end = values.length;\n  while (start < end && values[start] < min) {\n    start++;\n  }\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n  return start > 0 || end < values.length\n    ? values.slice(start, end)\n    : values;\n}\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\nfunction listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n    return;\n  }\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n  arrayEvents.forEach((key) => {\n    const method = '_onData' + _capitalize(key);\n    const base = array[key];\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value(...args) {\n        const res = base.apply(this, args);\n        array._chartjs.listeners.forEach((object) => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n        return res;\n      }\n    });\n  });\n}\nfunction unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n  if (!stub) {\n    return;\n  }\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n  if (listeners.length > 0) {\n    return;\n  }\n  arrayEvents.forEach((key) => {\n    delete array[key];\n  });\n  delete array._chartjs;\n}\nfunction _arrayUnique(items) {\n  const set = new Set();\n  let i, ilen;\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\n    set.add(items[i]);\n  }\n  if (set.size === ilen) {\n    return items;\n  }\n  return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\nconst requestAnimFrame = (function() {\n  if (typeof window === 'undefined') {\n    return function(callback) {\n      return callback();\n    };\n  }\n  return window.requestAnimationFrame;\n}());\nfunction throttled(fn, thisArg, updateFn) {\n  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));\n  let ticking = false;\n  let args = [];\n  return function(...rest) {\n    args = updateArgs(rest);\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, args);\n      });\n    }\n  };\n}\nfunction debounce(fn, delay) {\n  let timeout;\n  return function(...args) {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay, args);\n    } else {\n      fn.apply(this, args);\n    }\n    return delay;\n  };\n}\nconst _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\nconst _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\nconst _textX = (align, left, right, rtl) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\nfunction _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n  const pointCount = points.length;\n  let start = 0;\n  let count = pointCount;\n  if (meta._sorted) {\n    const {iScale, _parsed} = meta;\n    const axis = iScale.axis;\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n    if (minDefined) {\n      start = _limitValue(Math.min(\n        _lookupByKey(_parsed, iScale.axis, min).lo,\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n      0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(Math.max(\n        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),\n      start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n  return {start, count};\n}\nfunction _scaleRangesChanged(meta) {\n  const {xScale, yScale, _scaleRanges} = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n  const changed = _scaleRanges.xmin !== xScale.min\n\t\t|| _scaleRanges.xmax !== xScale.max\n\t\t|| _scaleRanges.ymin !== yScale.min\n\t\t|| _scaleRanges.ymax !== yScale.max;\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n\nconst atEdge = (t) => t === 0 || t === 1;\nconst elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\nconst effects = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => -t * (t - 2),\n  easeInOutQuad: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t\n    : -0.5 * ((--t) * (t - 2) - 1),\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => (t -= 1) * t * t + 1,\n  easeInOutCubic: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t\n    : 0.5 * ((t -= 2) * t * t + 2),\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n  easeInOutQuart: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t\n    : -0.5 * ((t -= 2) * t * t * t - 2),\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n  easeInOutQuint: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t * t\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\n  easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n  easeOutSine: t => Math.sin(t * HALF_PI),\n  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n  easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n  easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n  easeInOutExpo: t => atEdge(t) ? t : t < 0.5\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n  easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n  easeInOutCirc: t => ((t /= 0.5) < 1)\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n  easeInOutElastic(t) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t :\n      t < 0.5\n        ? 0.5 * elasticIn(t * 2, s, p)\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n  easeInBack(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n  easeOutBack(t) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n  easeInOutBack(t) {\n    let s = 1.70158;\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n    }\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n  },\n  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n  easeOutBounce(t) {\n    const m = 7.5625;\n    const d = 2.75;\n    if (t < (1 / d)) {\n      return m * t * t;\n    }\n    if (t < (2 / d)) {\n      return m * (t -= (1.5 / d)) * t + 0.75;\n    }\n    if (t < (2.5 / d)) {\n      return m * (t -= (2.25 / d)) * t + 0.9375;\n    }\n    return m * (t -= (2.625 / d)) * t + 0.984375;\n  },\n  easeInOutBounce: t => (t < 0.5)\n    ? effects.easeInBounce(t * 2) * 0.5\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n};\n\n/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nfunction isPatternOrGradient(value) {\n  if (value && typeof value === 'object') {\n    const type = value.toString();\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n  }\n  return false;\n}\nfunction color(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value);\n}\nfunction getHoverColor(value) {\n  return isPatternOrGradient(value)\n    ? value\n    : index_esm(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\nfunction getScope$1(node, key) {\n  if (!key) {\n    return node;\n  }\n  const keys = key.split('.');\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n  return node;\n}\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope$1(root, scope), values);\n  }\n  return merge(getScope$1(root, ''), scope);\n}\nclass Defaults {\n  constructor(_descriptors) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n    this.elements = {};\n    this.events = [\n      'mousemove',\n      'mouseout',\n      'click',\n      'touchstart',\n      'touchmove'\n    ];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true,\n      includeInvisible: false\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.drawActiveElementsOnTop = true;\n    this.describe(_descriptors);\n  }\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n  get(scope) {\n    return getScope$1(this, scope);\n  }\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope$1(this, scope);\n    const targetScopeObject = getScope$1(this, targetScope);\n    const privateName = '_' + name;\n    Object.defineProperties(scopeObject, {\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      [name]: {\n        enumerable: true,\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n          return valueOrDefault(local, target);\n        },\n        set(value) {\n          this[privateName] = value;\n        }\n      }\n    });\n  }\n}\nvar defaults = new Defaults({\n  _scriptable: (name) => !name.startsWith('on'),\n  _indexable: (name) => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false,\n  }\n});\n\nfunction toFontString(font) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n  return (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\nfunction _measureText(ctx, data, gc, longest, string) {\n  let textWidth = data[string];\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n  return longest;\n}\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n  ctx.save();\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i, j, jlen, thing, nestedThing;\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n  ctx.restore();\n  const gcLen = gc.length / 2;\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n    gc.splice(0, gcLen);\n  }\n  return longest;\n}\nfunction _alignPixel(chart, pixel, width) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\nfunction clearCanvas(canvas, ctx) {\n  ctx = ctx || canvas.getContext('2d');\n  ctx.save();\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n  drawPointLegend(ctx, options, x, y, null);\n}\nfunction drawPointLegend(ctx, options, x, y, w) {\n  let type, xOffset, yOffset, size, cornerRadius, width;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n  if (style && typeof style === 'object') {\n    type = style.toString();\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n  ctx.beginPath();\n  switch (style) {\n  default:\n    if (w) {\n      ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n    } else {\n      ctx.arc(x, y, radius, 0, TAU);\n    }\n    ctx.closePath();\n    break;\n  case 'triangle':\n    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    ctx.closePath();\n    break;\n  case 'rectRounded':\n    cornerRadius = radius * 0.516;\n    size = radius - cornerRadius;\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\n    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n    ctx.closePath();\n    break;\n  case 'rect':\n    if (!rotation) {\n      size = Math.SQRT1_2 * radius;\n      width = w ? w / 2 : size;\n      ctx.rect(x - width, y - size, 2 * width, 2 * size);\n      break;\n    }\n    rad += QUARTER_PI;\n  case 'rectRot':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    ctx.closePath();\n    break;\n  case 'crossRot':\n    rad += QUARTER_PI;\n  case 'cross':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'star':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    rad += QUARTER_PI;\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'line':\n    xOffset = w ? w / 2 : Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    break;\n  case 'dash':\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n    break;\n  }\n  ctx.fill();\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\nfunction _isPointInArea(point, area, margin) {\n  margin = margin || 0.5;\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\n}\nfunction clipArea(ctx, area) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\nfunction unclipArea(ctx) {\n  ctx.restore();\n}\nfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n  ctx.lineTo(target.x, target.y);\n}\nfunction _bezierCurveTo(ctx, previous, target, flip) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  ctx.bezierCurveTo(\n    flip ? previous.cp1x : previous.cp2x,\n    flip ? previous.cp1y : previous.cp2y,\n    flip ? target.cp2x : target.cp1x,\n    flip ? target.cp2y : target.cp1y,\n    target.x,\n    target.y);\n}\nfunction renderText(ctx, text, x, y, font, opts = {}) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i, line;\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n    y += font.lineHeight;\n  }\n  ctx.restore();\n}\nfunction setRenderOpts(ctx, opts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n  if (opts.strikethrough || opts.underline) {\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\nfunction addRoundedRectPath(ctx, rect) {\n  const {x, y, w, h, radius} = rect;\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n  ctx.lineTo(x + w, y + radius.topRight);\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n  ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\nfunction toLineHeight(value, size) {\n  const matches = ('' + value).match(LINE_HEIGHT);\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n  value = +matches[2];\n  switch (matches[3]) {\n  case 'px':\n    return value;\n  case '%':\n    value /= 100;\n    break;\n  }\n  return size * value;\n}\nconst numberOrZero = v => +v || 0;\nfunction _readValueToProps(value, props) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value)\n    ? objProps\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\n      : prop => value[prop]\n    : () => value;\n  for (const prop of keys) {\n    ret[prop] = numberOrZero(read(prop));\n  }\n  return ret;\n}\nfunction toTRBL(value) {\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\n}\nfunction toTRBLCorners(value) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\nfunction toPadding(value) {\n  const obj = toTRBL(value);\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n  return obj;\n}\nfunction toFont(options, fallback) {\n  options = options || {};\n  fallback = fallback || defaults.font;\n  let size = valueOrDefault(options.size, fallback.size);\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n  let style = valueOrDefault(options.style, fallback.style);\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = '';\n  }\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n  font.string = toFontString(font);\n  return font;\n}\nfunction resolve(inputs, context, index, info) {\n  let cacheable = true;\n  let i, ilen, value;\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n    if (value === undefined) {\n      continue;\n    }\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n      return value;\n    }\n  }\n}\nfunction _addGrace(minmax, grace, beginAtZero) {\n  const {min, max} = minmax;\n  const change = toDimension(grace, (max - min) / 2);\n  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\n  return {\n    min: keepZero(min, -Math.abs(change)),\n    max: keepZero(max, change)\n  };\n}\nfunction createContext(parentContext, context) {\n  return Object.assign(Object.create(parentContext), context);\n}\n\nfunction _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\n  if (!defined(fallback)) {\n    fallback = _resolve('_fallback', scopes);\n  }\n  const cache = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: rootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete target._keys;\n      delete scopes[0][prop];\n      return true;\n    },\n    get(target, prop) {\n      return _cached(target, prop,\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n    has(target, prop) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n    set(target, prop, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      target[prop] = storage[prop] = value;\n      delete target._keys;\n      return true;\n    }\n  });\n}\nfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n  const cache = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete proxy[prop];\n      return true;\n    },\n    get(target, prop, receiver) {\n      return _cached(target, prop,\n        () => _resolveWithContext(target, prop, receiver));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n    set(target, prop, value) {\n      proxy[prop] = value;\n      delete target[prop];\n      return true;\n    }\n  });\n}\nfunction _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\n    return target[prop];\n  }\n  const value = resolve();\n  target[prop] = value;\n  return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  let value = _proxy[prop];\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n  if (needsSubResolver(prop, value)) {\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n  return value;\n}\nfunction _resolveScriptable(prop, value, target, receiver) {\n  const {_proxy, _context, _subProxy, _stack} = target;\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n  _stack.add(prop);\n  value = value(_context, _subProxy || receiver);\n  _stack.delete(prop);\n  if (needsSubResolver(prop, value)) {\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n  return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  if (defined(_context.index) && isIndexable(prop)) {\n    value = value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    const arr = value;\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n    value = [];\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n  return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent) => key === true ? parent\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, value);\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n        return fallback;\n      }\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n      return null;\n    }\n  }\n  return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n  if (key === null) {\n    return false;\n  }\n  if (defined(fallback) && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\n    if (key === null) {\n      return false;\n    }\n  }\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\n    () => subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback, item);\n  }\n  return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n  const parent = resolver._getTarget();\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n  const target = parent[prop];\n  if (isArray(target) && isObject(value)) {\n    return value;\n  }\n  return target;\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n  let value;\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n    if (defined(value)) {\n      return needsSubResolver(prop, value)\n        ? createSubResolver(scopes, proxy, prop, value)\n        : value;\n    }\n  }\n}\nfunction _resolve(key, scopes) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n    const value = scope[key];\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\nfunction getKeysFromAllScopes(target) {\n  let keys = target._keys;\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n  return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n  const set = new Set();\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n  return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n  const {iScale} = meta;\n  const {key = 'r'} = this._parsing;\n  const parsed = new Array(count);\n  let i, ilen, index, item;\n  for (i = 0, ilen = count; i < ilen; ++i) {\n    index = i + start;\n    item = data[index];\n    parsed[i] = {\n      r: iScale.parse(resolveObjectKey(item, key), index)\n    };\n  }\n  return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n  const fa = t * s01;\n  const fb = t * s12;\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\nfunction monotoneAdjust(points, deltaK, mK) {\n  const pointsLen = points.length;\n  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\nfunction splineCurveMonotone(points, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK = Array(pointsLen).fill(0);\n  const mK = Array(pointsLen);\n  let i, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n    mK[i] = !pointBefore ? deltaK[i]\n      : !pointAfter ? deltaK[i - 1]\n      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n      : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n  monotoneAdjust(points, deltaK, mK);\n  monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n  return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n  let i, ilen, point, inArea, inAreaPrev;\n  let inAreaNext = _isPointInArea(points[0], area);\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n    if (!inArea) {\n      continue;\n    }\n    point = points[i];\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\nfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n  let i, ilen, point, controlPoints;\n  if (options.spanGaps) {\n    points = points.filter((pt) => !pt.skip);\n  }\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(\n        prev,\n        point,\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n        options.tension\n      );\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n\nfunction _isDomSupported() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\nfunction _getParentNode(domNode) {\n  let parent = domNode.parentNode;\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = parent.host;\n  }\n  return parent;\n}\nfunction parseMaxStyle(styleValue, node, parentProperty) {\n  let valueInPixels;\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n    if (styleValue.indexOf('%') !== -1) {\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n  return valueInPixels;\n}\nconst getComputedStyle = (element) => window.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n  return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = ['top', 'right', 'bottom', 'left'];\nfunction getPositionedStyle(styles, style, suffix) {\n  const result = {};\n  suffix = suffix ? '-' + suffix : '';\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\nconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\nfunction getCanvasPosition(e, canvas) {\n  const touches = e.touches;\n  const source = touches && touches.length ? touches[0] : e;\n  const {offsetX, offsetY} = source;\n  let box = false;\n  let x, y;\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n  return {x, y, box};\n}\nfunction getRelativePosition(evt, chart) {\n  if ('native' in evt) {\n    return evt;\n  }\n  const {canvas, currentDevicePixelRatio} = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {x, y, box} = getCanvasPosition(evt, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n  let {width, height} = chart;\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\nfunction getContainerSize(canvas, width, height) {\n  let maxWidth, maxHeight;\n  if (width === undefined || height === undefined) {\n    const container = _getParentNode(canvas);\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect();\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\nconst round1 = v => Math.round(v * 10) / 10;\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {width, height} = containerSize;\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n  if (width && !height) {\n    height = round1(width / 2);\n  }\n  return {\n    width,\n    height\n  };\n}\nfunction retinaScale(chart, forceRatio, forceStyle) {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n  chart.height = deviceHeight / pixelRatio;\n  chart.width = deviceWidth / pixelRatio;\n  const canvas = chart.canvas;\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n  if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n  return false;\n}\nconst supportsEventListenerOptions = (function() {\n  let passiveSupported = false;\n  try {\n    const options = {\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n    };\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {\n  }\n  return passiveSupported;\n}());\nfunction readUsedSize(element, property) {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n\nfunction _pointInLine(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\nfunction _steppedInterpolation(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n    : mode === 'after' ? t < 1 ? p1.y : p2.y\n    : t > 0 ? p2.y : p1.y\n  };\n}\nfunction _bezierInterpolation(p1, p2, t, mode) {\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\n  const a = _pointInLine(p1, cp1, t);\n  const b = _pointInLine(cp1, cp2, t);\n  const c = _pointInLine(cp2, p2, t);\n  const d = _pointInLine(a, b, t);\n  const e = _pointInLine(b, c, t);\n  return _pointInLine(d, e, t);\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n  return formatter;\n}\nfunction formatNumber(num, locale, options) {\n  return getNumberFormat(locale, options).format(num);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n    setWidth(w) {\n      width = w;\n    },\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    },\n  };\n};\nconst getLeftToRightAdapter = function() {\n  return {\n    x(x) {\n      return x;\n    },\n    setWidth(w) {\n    },\n    textAlign(align) {\n      return align;\n    },\n    xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr(x, _itemWidth) {\n      return x;\n    },\n  };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n  let style, original;\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [\n      style.getPropertyValue('direction'),\n      style.getPropertyPriority('direction'),\n    ];\n    style.setProperty('direction', direction, 'important');\n    ctx.prevTextDirection = original;\n  }\n}\nfunction restoreTextDirection(ctx, original) {\n  if (original !== undefined) {\n    delete ctx.prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle,\n    };\n  }\n  return {\n    between: _isBetween,\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\nfunction normalizeSegment({start, end, count, loop, style}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\nfunction getSegment(segment, points, bounds) {\n  const {property, start: startBound, end: endBound} = bounds;\n  const {between, normalize} = propertyFn(property);\n  const count = points.length;\n  let {start, end, loop} = segment;\n  let i, ilen;\n  if (loop) {\n    start += count;\n    end += count;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n      start--;\n      end--;\n    }\n    start %= count;\n    end %= count;\n  }\n  if (end < start) {\n    end += count;\n  }\n  return {start, end, loop, style: segment.style};\n}\nfunction _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n  const {property, start: startBound, end: endBound} = bounds;\n  const count = points.length;\n  const {compare, between, normalize} = propertyFn(property);\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  const shouldStart = () => inside || startIsBefore();\n  const shouldStop = () => !inside || endIsBefore();\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n    if (point.skip) {\n      continue;\n    }\n    value = normalize(point[property]);\n    if (value === prevValue) {\n      continue;\n    }\n    inside = between(value, startBound, endBound);\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\n      subStart = null;\n    }\n    prev = i;\n    prevValue = value;\n  }\n  if (subStart !== null) {\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\n  }\n  return result;\n}\nfunction _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n  return result;\n}\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n  if (loop && !spanGaps) {\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n  while (start < count && points[start].skip) {\n    start++;\n  }\n  start %= count;\n  if (loop) {\n    end += start;\n  }\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n  end %= count;\n  return {start, end};\n}\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({start: start % count, end: (end - 1) % count, loop});\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n      if (prev.skip) {\n        start = end;\n      }\n    }\n    prev = cur;\n  }\n  if (last !== null) {\n    result.push({start: start % count, end: last % count, loop});\n  }\n  return result;\n}\nfunction _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n  if (!count) {\n    return [];\n  }\n  const loop = !!line._loop;\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n  if (spanGaps === true) {\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\n  }\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const chartContext = line._chart.getContext();\n  const baseStyle = readStyle(line.options);\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\n  const count = points.length;\n  const result = [];\n  let prevStyle = baseStyle;\n  let start = segments[0].start;\n  let i = start;\n  function addStyle(s, e, l, st) {\n    const dir = spanGaps ? -1 : 1;\n    if (s === e) {\n      return;\n    }\n    s += count;\n    while (points[s % count].skip) {\n      s -= dir;\n    }\n    while (points[e % count].skip) {\n      e += dir;\n    }\n    if (s % count !== e % count) {\n      result.push({start: s % count, end: e % count, loop: l, style: st});\n      prevStyle = st;\n      start = e % count;\n    }\n  }\n  for (const segment of segments) {\n    start = spanGaps ? start : segment.start;\n    let prev = points[start % count];\n    let style;\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex\n      })));\n      if (styleChanged(style, prevStyle)) {\n        addStyle(start, i - 1, segment.loop, prevStyle);\n      }\n      prev = pt;\n      prevStyle = style;\n    }\n    if (start < i - 1) {\n      addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n  }\n  return result;\n}\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\nfunction styleChanged(style, prevStyle) {\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n}\n\nexport { _isPointInArea as $, _factorize as A, finiteOrDefault as B, callback as C, _addGrace as D, _limitValue as E, toDegrees as F, _measureText as G, HALF_PI as H, _int16Range as I, _alignPixel as J, toPadding as K, clipArea as L, renderText as M, unclipArea as N, toFont as O, PI as P, each as Q, _toLeftRightCenter as R, _alignStartEnd as S, TAU as T, overrides as U, merge as V, _capitalize as W, getRelativePosition as X, _rlookupByKey as Y, _lookupByKey as Z, _arrayUnique as _, resolve as a, toLineHeight as a$, getAngleFromPoint as a0, getMaximumSize as a1, _getParentNode as a2, readUsedSize as a3, throttled as a4, supportsEventListenerOptions as a5, _isDomSupported as a6, descriptors as a7, isFunction as a8, _attachContext as a9, getRtlAdapter as aA, overrideTextDirection as aB, _textX as aC, restoreTextDirection as aD, drawPointLegend as aE, noop as aF, distanceBetweenPoints as aG, _setMinAndMaxByKey as aH, niceNum as aI, almostWhole as aJ, almostEquals as aK, _decimalPlaces as aL, _longestText as aM, _filterBetween as aN, _lookup as aO, isPatternOrGradient as aP, getHoverColor as aQ, clone$1 as aR, _merger as aS, _mergerIf as aT, _deprecated as aU, _splitKey as aV, toFontString as aW, splineCurve as aX, splineCurveMonotone as aY, getStyle as aZ, fontString as a_, _createResolver as aa, _descriptors as ab, mergeIf as ac, uid as ad, debounce as ae, retinaScale as af, clearCanvas as ag, setsEqual as ah, _elementsEqual as ai, _isClickEvent as aj, _isBetween as ak, _readValueToProps as al, _updateBezierControlPoints as am, _computeSegments as an, _boundSegments as ao, _steppedInterpolation as ap, _bezierInterpolation as aq, _pointInLine as ar, _steppedLineTo as as, _bezierCurveTo as at, drawPoint as au, addRoundedRectPath as av, toTRBL as aw, toTRBLCorners as ax, _boundSegment as ay, _normalizeAngle as az, isArray as b, PITAU as b0, INFINITY as b1, RAD_PER_DEG as b2, QUARTER_PI as b3, TWO_THIRDS_PI as b4, _angleDiff as b5, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, createContext as h, isObject as i, defined as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, log10 as z };\n","/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, d as defaults, i as isObject, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as createContext, j as defined, s as sign, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as log10, A as _factorize, B as finiteOrDefault, C as callback, D as _addGrace, E as _limitValue, F as toDegrees, G as _measureText, I as _int16Range, J as _alignPixel, K as toPadding, L as clipArea, M as renderText, N as unclipArea, O as toFont, Q as each, R as _toLeftRightCenter, S as _alignStartEnd, U as overrides, V as merge, W as _capitalize, X as getRelativePosition, Y as _rlookupByKey, Z as _lookupByKey, $ as _isPointInArea, a0 as getAngleFromPoint, a1 as getMaximumSize, a2 as _getParentNode, a3 as readUsedSize, a4 as throttled, a5 as supportsEventListenerOptions, a6 as _isDomSupported, a7 as descriptors, a8 as isFunction, a9 as _attachContext, aa as _createResolver, ab as _descriptors, ac as mergeIf, ad as uid, ae as debounce, af as retinaScale, ag as clearCanvas, ah as setsEqual, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _readValueToProps, am as _updateBezierControlPoints, an as _computeSegments, ao as _boundSegments, ap as _steppedInterpolation, aq as _bezierInterpolation, ar as _pointInLine, as as _steppedLineTo, at as _bezierCurveTo, au as drawPoint, av as addRoundedRectPath, aw as toTRBL, ax as toTRBLCorners, ay as _boundSegment, az as _normalizeAngle, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as noop, aG as distanceBetweenPoints, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as _longestText, aN as _filterBetween, aO as _lookup } from './chunks/helpers.segment.mjs';\nexport { d as defaults } from './chunks/helpers.segment.mjs';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || (elapsed < duration));\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n\nconst numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\ndefaults.set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined,\n});\nconst animationOptions = Object.keys(defaults.animation);\ndefaults.describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n});\ndefaults.set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  },\n});\ndefaults.describe('animations', {\n  _fallback: 'animation',\n});\ndefaults.set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      },\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: v => v | 0\n      },\n    }\n  }\n});\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n      });\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n  }\n}\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1;\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true,\n    }\n  }\n};\n\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: meta.label,\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        }\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    },\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r',\n};\nDoughnutController.descriptors = {\n  _scriptable: (name) => name !== 'spacing',\n  _indexable: (name) => name !== 'spacing',\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(tooltipItem) {\n          let dataLabel = tooltipItem.label;\n          const value = ': ' + tooltipItem.formattedValue;\n          if (isArray(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n          return dataLabel;\n        }\n      }\n    }\n  }\n};\n\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false,\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n    },\n    _value_: {\n      type: 'linear',\n    },\n  }\n};\n\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    },\n  },\n  indexAxis: 'r',\n  startAngle: 0,\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nclass PieController extends DoughnutController {\n}\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  },\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear',\n    }\n  }\n};\n\nclass Element {\n  constructor() {\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n  tooltipPosition(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nElement.defaults = {};\nElement.defaultRoutes = undefined;\n\nconst formatters = {\n  values(value) {\n    return isArray(value) ? value : '' + value;\n  },\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue;\n    if (ticks.length > 1) {\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n      delta = calculateDelta(tickValue, ticks);\n    }\n    const logDelta = log10(Math.abs(delta));\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n    return formatNumber(tickValue, locale, options);\n  },\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n};\nfunction calculateDelta(tickValue, ticks) {\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\nvar Ticks = {formatters};\n\ndefaults.set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: (_ctx, options) => options.lineWidth,\n    tickColor: (_ctx, options) => options.color,\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2,\n  }\n});\ndefaults.route('scale.ticks', 'color', '', 'color');\ndefaults.route('scale.grid', 'color', '', 'borderColor');\ndefaults.route('scale.grid', 'borderColor', '', 'borderColor');\ndefaults.route('scale.title', 'color', '', 'color');\ndefaults.describe('scale', {\n  _fallback: false,\n  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',\n});\ndefaults.describe('scales', {\n  _fallback: 'scale',\n});\ndefaults.describe('scale.ticks', {\n  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n  _indexable: (name) => name !== 'backdropPadding',\n});\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return (lines * font.lineHeight) + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {min, max} = this;\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const optsAtIndex = grid.setContext(this.getContext(i));\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndex.borderDash || [];\n      const borderDashOffset = optsAtIndex.borderDashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = y + textOffset - labelPadding.top;\n        let left = x - labelPadding.left;\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        }\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor,\n        };\n      }\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign: tickTextAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop,\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {textAlign, x};\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {chart, ctx, options: {grid}} = this;\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.borderWidth;\n    ctx.strokeStyle = borderOpts.borderColor;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    let i, ilen;\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n      if (item.backdrop) {\n        ctx.fillStyle = item.backdrop.color;\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n      }\n      let y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, item);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: gz + 1,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = new Registry();\n\nclass ScatterController extends DatasetController {\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {dataset: line, _dataset} = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {showLine} = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\nclass DateAdapter {\n  constructor(options) {\n    this.options = options || {};\n  }\n  init(chartOptions) {}\n  formats() {\n    return abstract();\n  }\n  parse(value, format) {\n    return abstract();\n  }\n  format(timestamp, format) {\n    return abstract();\n  }\n  add(timestamp, amount, unit) {\n    return abstract();\n  }\n  diff(a, b, unit) {\n    return abstract();\n  }\n  startOf(timestamp, unit, weekday) {\n    return abstract();\n  }\n  endOf(timestamp, unit) {\n    return abstract();\n  }\n}\nDateAdapter.override = function(members) {\n  Object.assign(DateAdapter.prototype, members);\n};\nvar adapters = {\n  _date: DateAdapter\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  return {lo: 0, hi: data.length - 1};\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\ndefaults.set('layout', {\n  autoPadding: true,\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {\n  }\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, (args) => {\n    const event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {plugins, localIds};\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const firstIDs = Object.create(null);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {options, type} = this;\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {},\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvar version = \"3.9.1\";\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {size: newSize});\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass.prototype, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {mode});\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    this.notifyPlugins('destroy');\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, (type) => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nconst invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());\nconst enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable,\n    value: defaults\n  },\n  instances: {\n    enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable,\n    value: overrides\n  },\n  registry: {\n    enumerable,\n    value: registry\n  },\n  version: {\n    enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable,\n    value: (...items) => {\n      registry.add(...items);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable,\n    value: (...items) => {\n      registry.remove(...items);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, startAngle + TAU, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % TAU;\n      if (circumference % TAU === 0) {\n        endAngle += TAU;\n      }\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawFullCircleBorders(ctx, element, inner) {\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  const innerRadius = element.innerRadius + pixelMargin;\n  let i;\n  if (inner) {\n    clipArc(ctx, element, startAngle + TAU);\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\nfunction drawBorder(ctx, element, offset, spacing, endAngle, circular) {\n  const {options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.stroke();\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return (betweenAngles && withinRadius);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 2;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    let radiusOffset = 0;\n    if (offset) {\n      radiusOffset = offset / 2;\n      const halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n      if (this.circumference >= PI) {\n        radiusOffset = offset;\n      }\n    }\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);\n    ctx.restore();\n  }\n}\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true,\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || (this.points.length - start);\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0,\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    return options.radius + options.hitRadius;\n  }\n}\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {left, top, right, bottom};\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {start, count};\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n\nfunction _getTarget(source) {\n  const {chart, fill, line} = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {options, ctx} = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight});\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight});\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {color: fontColor, padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor || fontColor;\n      ctx.fillStyle = legendItem.fontColor || fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {width, height};\n}\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart || config._chart;\n    this._chart = this.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {callbacks} = options;\n    const beforeTitle = callbacks.beforeTitle.apply(this, [context]);\n    const title = callbacks.title.apply(this, [context]);\n    const afterTitle = callbacks.afterTitle.apply(this, [context]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n  }\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));\n      pushOrConcat(bodyItem.lines, scoped.label.call(this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n  }\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n    const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);\n    const footer = callbacks.footer.apply(this, [tooltipItems]);\n    const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(scoped.labelColor.call(this, context));\n      labelPointStyles.push(scoped.labelPointStyle.call(this, context));\n      labelTextColors.push(scoped.labelTextColor.call(this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: noop,\n      title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          const item = tooltipItems[0];\n          const labels = item.chart.data.labels;\n          const labelCount = labels ? labels.length : 0;\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n        return '';\n      },\n      afterTitle: noop,\n      beforeBody: noop,\n      beforeLabel: noop,\n      label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n          label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n          label += value;\n        }\n        return label;\n      },\n      labelColor(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0,\n        };\n      },\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation,\n        };\n      },\n      afterLabel: noop,\n      afterBody: noop,\n      beforeFooter: noop,\n      footer: noop,\n      afterFooter: noop\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n      return labels[value];\n    }\n    return value;\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = 1;\n      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {\n        offset = Math.abs(max * 0.05);\n      }\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));\n  return remain === 1;\n}\nfunction generateTicks(generationOptions, dataRange) {\n  const endExp = Math.floor(log10(dataRange.max));\n  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  const ticks = [];\n  let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n  let exp = Math.floor(log10(tickVal));\n  let significand = Math.floor(tickVal / Math.pow(10, exp));\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  do {\n    ticks.push({value: tickVal, major: isMajor(tickVal)});\n    ++significand;\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || (exp === endExp && significand < endSignificand));\n  const lastTick = finiteOrDefault(generationOptions.max, tickVal);\n  ticks.push({value: lastTick, major: isMajor(tickVal)});\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(exp(min, -1));\n        setMax(exp(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(exp(max, -1));\n    }\n    if (max <= 0) {\n      setMax(exp(min, +1));\n    }\n    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {\n      setMin(exp(min, -1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {color, lineWidth} = gridLineOpts;\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid} = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const optsAtIndex = grid.setContext(this.getContext(index - 1));\n          drawRadiusLine(this, optsAtIndex, offset, labelCount);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\n\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\nconst UNITS = (Object.keys(INTERVALS));\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(timeOpts.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    const formatter = options.ticks.callback;\n    return formatter ? callback(formatter, [label, index, ticks], this) : label;\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return (this._cache.data = this.normalize(timestamps));\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };\n","/*!\n * chartjs-plugin-datalabels v2.2.0\n * https://chartjs-plugin-datalabels.netlify.app\n * (c) 2017-2022 chartjs-plugin-datalabels contributors\n * Released under the MIT license\n */\nimport { isNullOrUndef, merge, toFont, resolve, toPadding, valueOrDefault, callback, isObject, each } from 'chart.js/helpers';\nimport { defaults as defaults$1, ArcElement, PointElement, BarElement } from 'chart.js';\n\nvar devicePixelRatio = (function() {\n  if (typeof window !== 'undefined') {\n    if (window.devicePixelRatio) {\n      return window.devicePixelRatio;\n    }\n\n    // devicePixelRatio is undefined on IE10\n    // https://stackoverflow.com/a/20204180/8837887\n    // https://github.com/chartjs/chartjs-plugin-datalabels/issues/85\n    var screen = window.screen;\n    if (screen) {\n      return (screen.deviceXDPI || 1) / (screen.logicalXDPI || 1);\n    }\n  }\n\n  return 1;\n}());\n\nvar utils = {\n  // @todo move this in Chart.helpers.toTextLines\n  toTextLines: function(inputs) {\n    var lines = [];\n    var input;\n\n    inputs = [].concat(inputs);\n    while (inputs.length) {\n      input = inputs.pop();\n      if (typeof input === 'string') {\n        lines.unshift.apply(lines, input.split('\\n'));\n      } else if (Array.isArray(input)) {\n        inputs.push.apply(inputs, input);\n      } else if (!isNullOrUndef(inputs)) {\n        lines.unshift('' + input);\n      }\n    }\n\n    return lines;\n  },\n\n  // @todo move this in Chart.helpers.canvas.textSize\n  // @todo cache calls of measureText if font doesn't change?!\n  textSize: function(ctx, lines, font) {\n    var items = [].concat(lines);\n    var ilen = items.length;\n    var prev = ctx.font;\n    var width = 0;\n    var i;\n\n    ctx.font = font.string;\n\n    for (i = 0; i < ilen; ++i) {\n      width = Math.max(ctx.measureText(items[i]).width, width);\n    }\n\n    ctx.font = prev;\n\n    return {\n      height: ilen * font.lineHeight,\n      width: width\n    };\n  },\n\n  /**\n   * Returns value bounded by min and max. This is equivalent to max(min, min(value, max)).\n   * @todo move this method in Chart.helpers.bound\n   * https://doc.qt.io/qt-5/qtglobal.html#qBound\n   */\n  bound: function(min, value, max) {\n    return Math.max(min, Math.min(value, max));\n  },\n\n  /**\n   * Returns an array of pair [value, state] where state is:\n   * * -1: value is only in a0 (removed)\n   * *  1: value is only in a1 (added)\n   */\n  arrayDiff: function(a0, a1) {\n    var prev = a0.slice();\n    var updates = [];\n    var i, j, ilen, v;\n\n    for (i = 0, ilen = a1.length; i < ilen; ++i) {\n      v = a1[i];\n      j = prev.indexOf(v);\n\n      if (j === -1) {\n        updates.push([v, 1]);\n      } else {\n        prev.splice(j, 1);\n      }\n    }\n\n    for (i = 0, ilen = prev.length; i < ilen; ++i) {\n      updates.push([prev[i], -1]);\n    }\n\n    return updates;\n  },\n\n  /**\n   * https://github.com/chartjs/chartjs-plugin-datalabels/issues/70\n   */\n  rasterize: function(v) {\n    return Math.round(v * devicePixelRatio) / devicePixelRatio;\n  }\n};\n\nfunction orient(point, origin) {\n  var x0 = origin.x;\n  var y0 = origin.y;\n\n  if (x0 === null) {\n    return {x: 0, y: -1};\n  }\n  if (y0 === null) {\n    return {x: 1, y: 0};\n  }\n\n  var dx = point.x - x0;\n  var dy = point.y - y0;\n  var ln = Math.sqrt(dx * dx + dy * dy);\n\n  return {\n    x: ln ? dx / ln : 0,\n    y: ln ? dy / ln : -1\n  };\n}\n\nfunction aligned(x, y, vx, vy, align) {\n  switch (align) {\n  case 'center':\n    vx = vy = 0;\n    break;\n  case 'bottom':\n    vx = 0;\n    vy = 1;\n    break;\n  case 'right':\n    vx = 1;\n    vy = 0;\n    break;\n  case 'left':\n    vx = -1;\n    vy = 0;\n    break;\n  case 'top':\n    vx = 0;\n    vy = -1;\n    break;\n  case 'start':\n    vx = -vx;\n    vy = -vy;\n    break;\n  case 'end':\n    // keep natural orientation\n    break;\n  default:\n    // clockwise rotation (in degree)\n    align *= (Math.PI / 180);\n    vx = Math.cos(align);\n    vy = Math.sin(align);\n    break;\n  }\n\n  return {\n    x: x,\n    y: y,\n    vx: vx,\n    vy: vy\n  };\n}\n\n// Line clipping (Cohen–Sutherland algorithm)\n// https://en.wikipedia.org/wiki/Cohen–Sutherland_algorithm\n\nvar R_INSIDE = 0;\nvar R_LEFT = 1;\nvar R_RIGHT = 2;\nvar R_BOTTOM = 4;\nvar R_TOP = 8;\n\nfunction region(x, y, rect) {\n  var res = R_INSIDE;\n\n  if (x < rect.left) {\n    res |= R_LEFT;\n  } else if (x > rect.right) {\n    res |= R_RIGHT;\n  }\n  if (y < rect.top) {\n    res |= R_TOP;\n  } else if (y > rect.bottom) {\n    res |= R_BOTTOM;\n  }\n\n  return res;\n}\n\nfunction clipped(segment, area) {\n  var x0 = segment.x0;\n  var y0 = segment.y0;\n  var x1 = segment.x1;\n  var y1 = segment.y1;\n  var r0 = region(x0, y0, area);\n  var r1 = region(x1, y1, area);\n  var r, x, y;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (!(r0 | r1) || (r0 & r1)) {\n      // both points inside or on the same side: no clipping\n      break;\n    }\n\n    // at least one point is outside\n    r = r0 || r1;\n\n    if (r & R_TOP) {\n      x = x0 + (x1 - x0) * (area.top - y0) / (y1 - y0);\n      y = area.top;\n    } else if (r & R_BOTTOM) {\n      x = x0 + (x1 - x0) * (area.bottom - y0) / (y1 - y0);\n      y = area.bottom;\n    } else if (r & R_RIGHT) {\n      y = y0 + (y1 - y0) * (area.right - x0) / (x1 - x0);\n      x = area.right;\n    } else if (r & R_LEFT) {\n      y = y0 + (y1 - y0) * (area.left - x0) / (x1 - x0);\n      x = area.left;\n    }\n\n    if (r === r0) {\n      x0 = x;\n      y0 = y;\n      r0 = region(x0, y0, area);\n    } else {\n      x1 = x;\n      y1 = y;\n      r1 = region(x1, y1, area);\n    }\n  }\n\n  return {\n    x0: x0,\n    x1: x1,\n    y0: y0,\n    y1: y1\n  };\n}\n\nfunction compute$1(range, config) {\n  var anchor = config.anchor;\n  var segment = range;\n  var x, y;\n\n  if (config.clamp) {\n    segment = clipped(segment, config.area);\n  }\n\n  if (anchor === 'start') {\n    x = segment.x0;\n    y = segment.y0;\n  } else if (anchor === 'end') {\n    x = segment.x1;\n    y = segment.y1;\n  } else {\n    x = (segment.x0 + segment.x1) / 2;\n    y = (segment.y0 + segment.y1) / 2;\n  }\n\n  return aligned(x, y, range.vx, range.vy, config.align);\n}\n\nvar positioners = {\n  arc: function(el, config) {\n    var angle = (el.startAngle + el.endAngle) / 2;\n    var vx = Math.cos(angle);\n    var vy = Math.sin(angle);\n    var r0 = el.innerRadius;\n    var r1 = el.outerRadius;\n\n    return compute$1({\n      x0: el.x + vx * r0,\n      y0: el.y + vy * r0,\n      x1: el.x + vx * r1,\n      y1: el.y + vy * r1,\n      vx: vx,\n      vy: vy\n    }, config);\n  },\n\n  point: function(el, config) {\n    var v = orient(el, config.origin);\n    var rx = v.x * el.options.radius;\n    var ry = v.y * el.options.radius;\n\n    return compute$1({\n      x0: el.x - rx,\n      y0: el.y - ry,\n      x1: el.x + rx,\n      y1: el.y + ry,\n      vx: v.x,\n      vy: v.y\n    }, config);\n  },\n\n  bar: function(el, config) {\n    var v = orient(el, config.origin);\n    var x = el.x;\n    var y = el.y;\n    var sx = 0;\n    var sy = 0;\n\n    if (el.horizontal) {\n      x = Math.min(el.x, el.base);\n      sx = Math.abs(el.base - el.x);\n    } else {\n      y = Math.min(el.y, el.base);\n      sy = Math.abs(el.base - el.y);\n    }\n\n    return compute$1({\n      x0: x,\n      y0: y + sy,\n      x1: x + sx,\n      y1: y,\n      vx: v.x,\n      vy: v.y\n    }, config);\n  },\n\n  fallback: function(el, config) {\n    var v = orient(el, config.origin);\n\n    return compute$1({\n      x0: el.x,\n      y0: el.y,\n      x1: el.x + (el.width || 0),\n      y1: el.y + (el.height || 0),\n      vx: v.x,\n      vy: v.y\n    }, config);\n  }\n};\n\nvar rasterize = utils.rasterize;\n\nfunction boundingRects(model) {\n  var borderWidth = model.borderWidth || 0;\n  var padding = model.padding;\n  var th = model.size.height;\n  var tw = model.size.width;\n  var tx = -tw / 2;\n  var ty = -th / 2;\n\n  return {\n    frame: {\n      x: tx - padding.left - borderWidth,\n      y: ty - padding.top - borderWidth,\n      w: tw + padding.width + borderWidth * 2,\n      h: th + padding.height + borderWidth * 2\n    },\n    text: {\n      x: tx,\n      y: ty,\n      w: tw,\n      h: th\n    }\n  };\n}\n\nfunction getScaleOrigin(el, context) {\n  var scale = context.chart.getDatasetMeta(context.datasetIndex).vScale;\n\n  if (!scale) {\n    return null;\n  }\n\n  if (scale.xCenter !== undefined && scale.yCenter !== undefined) {\n    return {x: scale.xCenter, y: scale.yCenter};\n  }\n\n  var pixel = scale.getBasePixel();\n  return el.horizontal ?\n    {x: pixel, y: null} :\n    {x: null, y: pixel};\n}\n\nfunction getPositioner(el) {\n  if (el instanceof ArcElement) {\n    return positioners.arc;\n  }\n  if (el instanceof PointElement) {\n    return positioners.point;\n  }\n  if (el instanceof BarElement) {\n    return positioners.bar;\n  }\n  return positioners.fallback;\n}\n\nfunction drawRoundedRect(ctx, x, y, w, h, radius) {\n  var HALF_PI = Math.PI / 2;\n\n  if (radius) {\n    var r = Math.min(radius, h / 2, w / 2);\n    var left = x + r;\n    var top = y + r;\n    var right = x + w - r;\n    var bottom = y + h - r;\n\n    ctx.moveTo(x, top);\n    if (left < right && top < bottom) {\n      ctx.arc(left, top, r, -Math.PI, -HALF_PI);\n      ctx.arc(right, top, r, -HALF_PI, 0);\n      ctx.arc(right, bottom, r, 0, HALF_PI);\n      ctx.arc(left, bottom, r, HALF_PI, Math.PI);\n    } else if (left < right) {\n      ctx.moveTo(left, y);\n      ctx.arc(right, top, r, -HALF_PI, HALF_PI);\n      ctx.arc(left, top, r, HALF_PI, Math.PI + HALF_PI);\n    } else if (top < bottom) {\n      ctx.arc(left, top, r, -Math.PI, 0);\n      ctx.arc(left, bottom, r, 0, Math.PI);\n    } else {\n      ctx.arc(left, top, r, -Math.PI, Math.PI);\n    }\n    ctx.closePath();\n    ctx.moveTo(x, y);\n  } else {\n    ctx.rect(x, y, w, h);\n  }\n}\n\nfunction drawFrame(ctx, rect, model) {\n  var bgColor = model.backgroundColor;\n  var borderColor = model.borderColor;\n  var borderWidth = model.borderWidth;\n\n  if (!bgColor && (!borderColor || !borderWidth)) {\n    return;\n  }\n\n  ctx.beginPath();\n\n  drawRoundedRect(\n    ctx,\n    rasterize(rect.x) + borderWidth / 2,\n    rasterize(rect.y) + borderWidth / 2,\n    rasterize(rect.w) - borderWidth,\n    rasterize(rect.h) - borderWidth,\n    model.borderRadius);\n\n  ctx.closePath();\n\n  if (bgColor) {\n    ctx.fillStyle = bgColor;\n    ctx.fill();\n  }\n\n  if (borderColor && borderWidth) {\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = 'miter';\n    ctx.stroke();\n  }\n}\n\nfunction textGeometry(rect, align, font) {\n  var h = font.lineHeight;\n  var w = rect.w;\n  var x = rect.x;\n  var y = rect.y + h / 2;\n\n  if (align === 'center') {\n    x += w / 2;\n  } else if (align === 'end' || align === 'right') {\n    x += w;\n  }\n\n  return {\n    h: h,\n    w: w,\n    x: x,\n    y: y\n  };\n}\n\nfunction drawTextLine(ctx, text, cfg) {\n  var shadow = ctx.shadowBlur;\n  var stroked = cfg.stroked;\n  var x = rasterize(cfg.x);\n  var y = rasterize(cfg.y);\n  var w = rasterize(cfg.w);\n\n  if (stroked) {\n    ctx.strokeText(text, x, y, w);\n  }\n\n  if (cfg.filled) {\n    if (shadow && stroked) {\n      // Prevent drawing shadow on both the text stroke and fill, so\n      // if the text is stroked, remove the shadow for the text fill.\n      ctx.shadowBlur = 0;\n    }\n\n    ctx.fillText(text, x, y, w);\n\n    if (shadow && stroked) {\n      ctx.shadowBlur = shadow;\n    }\n  }\n}\n\nfunction drawText(ctx, lines, rect, model) {\n  var align = model.textAlign;\n  var color = model.color;\n  var filled = !!color;\n  var font = model.font;\n  var ilen = lines.length;\n  var strokeColor = model.textStrokeColor;\n  var strokeWidth = model.textStrokeWidth;\n  var stroked = strokeColor && strokeWidth;\n  var i;\n\n  if (!ilen || (!filled && !stroked)) {\n    return;\n  }\n\n  // Adjust coordinates based on text alignment and line height\n  rect = textGeometry(rect, align, font);\n\n  ctx.font = font.string;\n  ctx.textAlign = align;\n  ctx.textBaseline = 'middle';\n  ctx.shadowBlur = model.textShadowBlur;\n  ctx.shadowColor = model.textShadowColor;\n\n  if (filled) {\n    ctx.fillStyle = color;\n  }\n  if (stroked) {\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = strokeWidth;\n    ctx.strokeStyle = strokeColor;\n  }\n\n  for (i = 0, ilen = lines.length; i < ilen; ++i) {\n    drawTextLine(ctx, lines[i], {\n      stroked: stroked,\n      filled: filled,\n      w: rect.w,\n      x: rect.x,\n      y: rect.y + rect.h * i\n    });\n  }\n}\n\nvar Label = function(config, ctx, el, index) {\n  var me = this;\n\n  me._config = config;\n  me._index = index;\n  me._model = null;\n  me._rects = null;\n  me._ctx = ctx;\n  me._el = el;\n};\n\nmerge(Label.prototype, {\n  /**\n   * @private\n   */\n  _modelize: function(display, lines, config, context) {\n    var me = this;\n    var index = me._index;\n    var font = toFont(resolve([config.font, {}], context, index));\n    var color = resolve([config.color, defaults$1.color], context, index);\n\n    return {\n      align: resolve([config.align, 'center'], context, index),\n      anchor: resolve([config.anchor, 'center'], context, index),\n      area: context.chart.chartArea,\n      backgroundColor: resolve([config.backgroundColor, null], context, index),\n      borderColor: resolve([config.borderColor, null], context, index),\n      borderRadius: resolve([config.borderRadius, 0], context, index),\n      borderWidth: resolve([config.borderWidth, 0], context, index),\n      clamp: resolve([config.clamp, false], context, index),\n      clip: resolve([config.clip, false], context, index),\n      color: color,\n      display: display,\n      font: font,\n      lines: lines,\n      offset: resolve([config.offset, 4], context, index),\n      opacity: resolve([config.opacity, 1], context, index),\n      origin: getScaleOrigin(me._el, context),\n      padding: toPadding(resolve([config.padding, 4], context, index)),\n      positioner: getPositioner(me._el),\n      rotation: resolve([config.rotation, 0], context, index) * (Math.PI / 180),\n      size: utils.textSize(me._ctx, lines, font),\n      textAlign: resolve([config.textAlign, 'start'], context, index),\n      textShadowBlur: resolve([config.textShadowBlur, 0], context, index),\n      textShadowColor: resolve([config.textShadowColor, color], context, index),\n      textStrokeColor: resolve([config.textStrokeColor, color], context, index),\n      textStrokeWidth: resolve([config.textStrokeWidth, 0], context, index)\n    };\n  },\n\n  update: function(context) {\n    var me = this;\n    var model = null;\n    var rects = null;\n    var index = me._index;\n    var config = me._config;\n    var value, label, lines;\n\n    // We first resolve the display option (separately) to avoid computing\n    // other options in case the label is hidden (i.e. display: false).\n    var display = resolve([config.display, true], context, index);\n\n    if (display) {\n      value = context.dataset.data[index];\n      label = valueOrDefault(callback(config.formatter, [value, context]), value);\n      lines = isNullOrUndef(label) ? [] : utils.toTextLines(label);\n\n      if (lines.length) {\n        model = me._modelize(display, lines, config, context);\n        rects = boundingRects(model);\n      }\n    }\n\n    me._model = model;\n    me._rects = rects;\n  },\n\n  geometry: function() {\n    return this._rects ? this._rects.frame : {};\n  },\n\n  rotation: function() {\n    return this._model ? this._model.rotation : 0;\n  },\n\n  visible: function() {\n    return this._model && this._model.opacity;\n  },\n\n  model: function() {\n    return this._model;\n  },\n\n  draw: function(chart, center) {\n    var me = this;\n    var ctx = chart.ctx;\n    var model = me._model;\n    var rects = me._rects;\n    var area;\n\n    if (!this.visible()) {\n      return;\n    }\n\n    ctx.save();\n\n    if (model.clip) {\n      area = model.area;\n      ctx.beginPath();\n      ctx.rect(\n        area.left,\n        area.top,\n        area.right - area.left,\n        area.bottom - area.top);\n      ctx.clip();\n    }\n\n    ctx.globalAlpha = utils.bound(0, model.opacity, 1);\n    ctx.translate(rasterize(center.x), rasterize(center.y));\n    ctx.rotate(model.rotation);\n\n    drawFrame(ctx, rects.frame, model);\n    drawText(ctx, model.lines, rects.text, model);\n\n    ctx.restore();\n  }\n});\n\nvar MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991; // eslint-disable-line es/no-number-minsafeinteger\nvar MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;  // eslint-disable-line es/no-number-maxsafeinteger\n\nfunction rotated(point, center, angle) {\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var cx = center.x;\n  var cy = center.y;\n\n  return {\n    x: cx + cos * (point.x - cx) - sin * (point.y - cy),\n    y: cy + sin * (point.x - cx) + cos * (point.y - cy)\n  };\n}\n\nfunction projected(points, axis) {\n  var min = MAX_INTEGER;\n  var max = MIN_INTEGER;\n  var origin = axis.origin;\n  var i, pt, vx, vy, dp;\n\n  for (i = 0; i < points.length; ++i) {\n    pt = points[i];\n    vx = pt.x - origin.x;\n    vy = pt.y - origin.y;\n    dp = axis.vx * vx + axis.vy * vy;\n    min = Math.min(min, dp);\n    max = Math.max(max, dp);\n  }\n\n  return {\n    min: min,\n    max: max\n  };\n}\n\nfunction toAxis(p0, p1) {\n  var vx = p1.x - p0.x;\n  var vy = p1.y - p0.y;\n  var ln = Math.sqrt(vx * vx + vy * vy);\n\n  return {\n    vx: (p1.x - p0.x) / ln,\n    vy: (p1.y - p0.y) / ln,\n    origin: p0,\n    ln: ln\n  };\n}\n\nvar HitBox = function() {\n  this._rotation = 0;\n  this._rect = {\n    x: 0,\n    y: 0,\n    w: 0,\n    h: 0\n  };\n};\n\nmerge(HitBox.prototype, {\n  center: function() {\n    var r = this._rect;\n    return {\n      x: r.x + r.w / 2,\n      y: r.y + r.h / 2\n    };\n  },\n\n  update: function(center, rect, rotation) {\n    this._rotation = rotation;\n    this._rect = {\n      x: rect.x + center.x,\n      y: rect.y + center.y,\n      w: rect.w,\n      h: rect.h\n    };\n  },\n\n  contains: function(point) {\n    var me = this;\n    var margin = 1;\n    var rect = me._rect;\n\n    point = rotated(point, me.center(), -me._rotation);\n\n    return !(point.x < rect.x - margin\n      || point.y < rect.y - margin\n      || point.x > rect.x + rect.w + margin * 2\n      || point.y > rect.y + rect.h + margin * 2);\n  },\n\n  // Separating Axis Theorem\n  // https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\n  intersects: function(other) {\n    var r0 = this._points();\n    var r1 = other._points();\n    var axes = [\n      toAxis(r0[0], r0[1]),\n      toAxis(r0[0], r0[3])\n    ];\n    var i, pr0, pr1;\n\n    if (this._rotation !== other._rotation) {\n      // Only separate with r1 axis if the rotation is different,\n      // else it's enough to separate r0 and r1 with r0 axis only!\n      axes.push(\n        toAxis(r1[0], r1[1]),\n        toAxis(r1[0], r1[3])\n      );\n    }\n\n    for (i = 0; i < axes.length; ++i) {\n      pr0 = projected(r0, axes[i]);\n      pr1 = projected(r1, axes[i]);\n\n      if (pr0.max < pr1.min || pr1.max < pr0.min) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * @private\n   */\n  _points: function() {\n    var me = this;\n    var rect = me._rect;\n    var angle = me._rotation;\n    var center = me.center();\n\n    return [\n      rotated({x: rect.x, y: rect.y}, center, angle),\n      rotated({x: rect.x + rect.w, y: rect.y}, center, angle),\n      rotated({x: rect.x + rect.w, y: rect.y + rect.h}, center, angle),\n      rotated({x: rect.x, y: rect.y + rect.h}, center, angle)\n    ];\n  }\n});\n\nfunction coordinates(el, model, geometry) {\n  var point = model.positioner(el, model);\n  var vx = point.vx;\n  var vy = point.vy;\n\n  if (!vx && !vy) {\n    // if aligned center, we don't want to offset the center point\n    return {x: point.x, y: point.y};\n  }\n\n  var w = geometry.w;\n  var h = geometry.h;\n\n  // take in account the label rotation\n  var rotation = model.rotation;\n  var dx = Math.abs(w / 2 * Math.cos(rotation)) + Math.abs(h / 2 * Math.sin(rotation));\n  var dy = Math.abs(w / 2 * Math.sin(rotation)) + Math.abs(h / 2 * Math.cos(rotation));\n\n  // scale the unit vector (vx, vy) to get at least dx or dy equal to\n  // w or h respectively (else we would calculate the distance to the\n  // ellipse inscribed in the bounding rect)\n  var vs = 1 / Math.max(Math.abs(vx), Math.abs(vy));\n  dx *= vx * vs;\n  dy *= vy * vs;\n\n  // finally, include the explicit offset\n  dx += model.offset * vx;\n  dy += model.offset * vy;\n\n  return {\n    x: point.x + dx,\n    y: point.y + dy\n  };\n}\n\nfunction collide(labels, collider) {\n  var i, j, s0, s1;\n\n  // IMPORTANT Iterate in the reverse order since items at the end of the\n  // list have an higher weight/priority and thus should be less impacted\n  // by the overlapping strategy.\n\n  for (i = labels.length - 1; i >= 0; --i) {\n    s0 = labels[i].$layout;\n\n    for (j = i - 1; j >= 0 && s0._visible; --j) {\n      s1 = labels[j].$layout;\n\n      if (s1._visible && s0._box.intersects(s1._box)) {\n        collider(s0, s1);\n      }\n    }\n  }\n\n  return labels;\n}\n\nfunction compute(labels) {\n  var i, ilen, label, state, geometry, center, proxy;\n\n  // Initialize labels for overlap detection\n  for (i = 0, ilen = labels.length; i < ilen; ++i) {\n    label = labels[i];\n    state = label.$layout;\n\n    if (state._visible) {\n      // Chart.js 3 removed el._model in favor of getProps(), making harder to\n      // abstract reading values in positioners. Also, using string arrays to\n      // read values (i.e. var {a,b,c} = el.getProps([\"a\",\"b\",\"c\"])) would make\n      // positioners inefficient in the normal case (i.e. not the final values)\n      // and the code a bit ugly, so let's use a Proxy instead.\n      proxy = new Proxy(label._el, {get: (el, p) => el.getProps([p], true)[p]});\n\n      geometry = label.geometry();\n      center = coordinates(proxy, label.model(), geometry);\n      state._box.update(center, geometry, label.rotation());\n    }\n  }\n\n  // Auto hide overlapping labels\n  return collide(labels, function(s0, s1) {\n    var h0 = s0._hidable;\n    var h1 = s1._hidable;\n\n    if ((h0 && h1) || h1) {\n      s1._visible = false;\n    } else if (h0) {\n      s0._visible = false;\n    }\n  });\n}\n\nvar layout = {\n  prepare: function(datasets) {\n    var labels = [];\n    var i, j, ilen, jlen, label;\n\n    for (i = 0, ilen = datasets.length; i < ilen; ++i) {\n      for (j = 0, jlen = datasets[i].length; j < jlen; ++j) {\n        label = datasets[i][j];\n        labels.push(label);\n        label.$layout = {\n          _box: new HitBox(),\n          _hidable: false,\n          _visible: true,\n          _set: i,\n          _idx: label._index\n        };\n      }\n    }\n\n    // TODO New `z` option: labels with a higher z-index are drawn\n    // of top of the ones with a lower index. Lowest z-index labels\n    // are also discarded first when hiding overlapping labels.\n    labels.sort(function(a, b) {\n      var sa = a.$layout;\n      var sb = b.$layout;\n\n      return sa._idx === sb._idx\n        ? sb._set - sa._set\n        : sb._idx - sa._idx;\n    });\n\n    this.update(labels);\n\n    return labels;\n  },\n\n  update: function(labels) {\n    var dirty = false;\n    var i, ilen, label, model, state;\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      label = labels[i];\n      model = label.model();\n      state = label.$layout;\n      state._hidable = model && model.display === 'auto';\n      state._visible = label.visible();\n      dirty |= state._hidable;\n    }\n\n    if (dirty) {\n      compute(labels);\n    }\n  },\n\n  lookup: function(labels, point) {\n    var i, state;\n\n    // IMPORTANT Iterate in the reverse order since items at the end of\n    // the list have an higher z-index, thus should be picked first.\n\n    for (i = labels.length - 1; i >= 0; --i) {\n      state = labels[i].$layout;\n\n      if (state && state._visible && state._box.contains(point)) {\n        return labels[i];\n      }\n    }\n\n    return null;\n  },\n\n  draw: function(chart, labels) {\n    var i, ilen, label, state, geometry, center;\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      label = labels[i];\n      state = label.$layout;\n\n      if (state._visible) {\n        geometry = label.geometry();\n        center = coordinates(label._el, label.model(), geometry);\n        state._box.update(center, geometry, label.rotation());\n        label.draw(chart, center);\n      }\n    }\n  }\n};\n\nvar formatter = function(value) {\n  if (isNullOrUndef(value)) {\n    return null;\n  }\n\n  var label = value;\n  var keys, klen, k;\n  if (isObject(value)) {\n    if (!isNullOrUndef(value.label)) {\n      label = value.label;\n    } else if (!isNullOrUndef(value.r)) {\n      label = value.r;\n    } else {\n      label = '';\n      keys = Object.keys(value);\n      for (k = 0, klen = keys.length; k < klen; ++k) {\n        label += (k !== 0 ? ', ' : '') + keys[k] + ': ' + value[keys[k]];\n      }\n    }\n  }\n\n  return '' + label;\n};\n\n/**\n * IMPORTANT: make sure to also update tests and TypeScript definition\n * files (`/test/specs/defaults.spec.js` and `/types/options.d.ts`)\n */\n\nvar defaults = {\n  align: 'center',\n  anchor: 'center',\n  backgroundColor: null,\n  borderColor: null,\n  borderRadius: 0,\n  borderWidth: 0,\n  clamp: false,\n  clip: false,\n  color: undefined,\n  display: true,\n  font: {\n    family: undefined,\n    lineHeight: 1.2,\n    size: undefined,\n    style: undefined,\n    weight: null\n  },\n  formatter: formatter,\n  labels: undefined,\n  listeners: {},\n  offset: 4,\n  opacity: 1,\n  padding: {\n    top: 4,\n    right: 4,\n    bottom: 4,\n    left: 4\n  },\n  rotation: 0,\n  textAlign: 'start',\n  textStrokeColor: undefined,\n  textStrokeWidth: 0,\n  textShadowBlur: 0,\n  textShadowColor: undefined\n};\n\n/**\n * @see https://github.com/chartjs/Chart.js/issues/4176\n */\n\nvar EXPANDO_KEY = '$datalabels';\nvar DEFAULT_KEY = '$default';\n\nfunction configure(dataset, options) {\n  var override = dataset.datalabels;\n  var listeners = {};\n  var configs = [];\n  var labels, keys;\n\n  if (override === false) {\n    return null;\n  }\n  if (override === true) {\n    override = {};\n  }\n\n  options = merge({}, [options, override]);\n  labels = options.labels || {};\n  keys = Object.keys(labels);\n  delete options.labels;\n\n  if (keys.length) {\n    keys.forEach(function(key) {\n      if (labels[key]) {\n        configs.push(merge({}, [\n          options,\n          labels[key],\n          {_key: key}\n        ]));\n      }\n    });\n  } else {\n    // Default label if no \"named\" label defined.\n    configs.push(options);\n  }\n\n  // listeners: {<event-type>: {<label-key>: <fn>}}\n  listeners = configs.reduce(function(target, config) {\n    each(config.listeners || {}, function(fn, event) {\n      target[event] = target[event] || {};\n      target[event][config._key || DEFAULT_KEY] = fn;\n    });\n\n    delete config.listeners;\n    return target;\n  }, {});\n\n  return {\n    labels: configs,\n    listeners: listeners\n  };\n}\n\nfunction dispatchEvent(chart, listeners, label, event) {\n  if (!listeners) {\n    return;\n  }\n\n  var context = label.$context;\n  var groups = label.$groups;\n  var callback$1;\n\n  if (!listeners[groups._set]) {\n    return;\n  }\n\n  callback$1 = listeners[groups._set][groups._key];\n  if (!callback$1) {\n    return;\n  }\n\n  if (callback(callback$1, [context, event]) === true) {\n    // Users are allowed to tweak the given context by injecting values that can be\n    // used in scriptable options to display labels differently based on the current\n    // event (e.g. highlight an hovered label). That's why we update the label with\n    // the output context and schedule a new chart render by setting it dirty.\n    chart[EXPANDO_KEY]._dirty = true;\n    label.update(context);\n  }\n}\n\nfunction dispatchMoveEvents(chart, listeners, previous, label, event) {\n  var enter, leave;\n\n  if (!previous && !label) {\n    return;\n  }\n\n  if (!previous) {\n    enter = true;\n  } else if (!label) {\n    leave = true;\n  } else if (previous !== label) {\n    leave = enter = true;\n  }\n\n  if (leave) {\n    dispatchEvent(chart, listeners.leave, previous, event);\n  }\n  if (enter) {\n    dispatchEvent(chart, listeners.enter, label, event);\n  }\n}\n\nfunction handleMoveEvents(chart, event) {\n  var expando = chart[EXPANDO_KEY];\n  var listeners = expando._listeners;\n  var previous, label;\n\n  if (!listeners.enter && !listeners.leave) {\n    return;\n  }\n\n  if (event.type === 'mousemove') {\n    label = layout.lookup(expando._labels, event);\n  } else if (event.type !== 'mouseout') {\n    return;\n  }\n\n  previous = expando._hovered;\n  expando._hovered = label;\n  dispatchMoveEvents(chart, listeners, previous, label, event);\n}\n\nfunction handleClickEvents(chart, event) {\n  var expando = chart[EXPANDO_KEY];\n  var handlers = expando._listeners.click;\n  var label = handlers && layout.lookup(expando._labels, event);\n  if (label) {\n    dispatchEvent(chart, handlers, label, event);\n  }\n}\n\nvar plugin = {\n  id: 'datalabels',\n\n  defaults: defaults,\n\n  beforeInit: function(chart) {\n    chart[EXPANDO_KEY] = {\n      _actives: []\n    };\n  },\n\n  beforeUpdate: function(chart) {\n    var expando = chart[EXPANDO_KEY];\n    expando._listened = false;\n    expando._listeners = {};     // {<event-type>: {<dataset-index>: {<label-key>: <fn>}}}\n    expando._datasets = [];      // per dataset labels: [Label[]]\n    expando._labels = [];        // layouted labels: Label[]\n  },\n\n  afterDatasetUpdate: function(chart, args, options) {\n    var datasetIndex = args.index;\n    var expando = chart[EXPANDO_KEY];\n    var labels = expando._datasets[datasetIndex] = [];\n    var visible = chart.isDatasetVisible(datasetIndex);\n    var dataset = chart.data.datasets[datasetIndex];\n    var config = configure(dataset, options);\n    var elements = args.meta.data || [];\n    var ctx = chart.ctx;\n    var i, j, ilen, jlen, cfg, key, el, label;\n\n    ctx.save();\n\n    for (i = 0, ilen = elements.length; i < ilen; ++i) {\n      el = elements[i];\n      el[EXPANDO_KEY] = [];\n\n      if (visible && el && chart.getDataVisibility(i) && !el.skip) {\n        for (j = 0, jlen = config.labels.length; j < jlen; ++j) {\n          cfg = config.labels[j];\n          key = cfg._key;\n\n          label = new Label(cfg, ctx, el, i);\n          label.$groups = {\n            _set: datasetIndex,\n            _key: key || DEFAULT_KEY\n          };\n          label.$context = {\n            active: false,\n            chart: chart,\n            dataIndex: i,\n            dataset: dataset,\n            datasetIndex: datasetIndex\n          };\n\n          label.update(label.$context);\n          el[EXPANDO_KEY].push(label);\n          labels.push(label);\n        }\n      }\n    }\n\n    ctx.restore();\n\n    // Store listeners at the chart level and per event type to optimize\n    // cases where no listeners are registered for a specific event.\n    merge(expando._listeners, config.listeners, {\n      merger: function(event, target, source) {\n        target[event] = target[event] || {};\n        target[event][args.index] = source[event];\n        expando._listened = true;\n      }\n    });\n  },\n\n  afterUpdate: function(chart) {\n    chart[EXPANDO_KEY]._labels = layout.prepare(chart[EXPANDO_KEY]._datasets);\n  },\n\n  // Draw labels on top of all dataset elements\n  // https://github.com/chartjs/chartjs-plugin-datalabels/issues/29\n  // https://github.com/chartjs/chartjs-plugin-datalabels/issues/32\n  afterDatasetsDraw: function(chart) {\n    layout.draw(chart, chart[EXPANDO_KEY]._labels);\n  },\n\n  beforeEvent: function(chart, args) {\n    // If there is no listener registered for this chart, `listened` will be false,\n    // meaning we can immediately ignore the incoming event and avoid useless extra\n    // computation for users who don't implement label interactions.\n    if (chart[EXPANDO_KEY]._listened) {\n      var event = args.event;\n      switch (event.type) {\n      case 'mousemove':\n      case 'mouseout':\n        handleMoveEvents(chart, event);\n        break;\n      case 'click':\n        handleClickEvents(chart, event);\n        break;\n      }\n    }\n  },\n\n  afterEvent: function(chart) {\n    var expando = chart[EXPANDO_KEY];\n    var previous = expando._actives;\n    var actives = expando._actives = chart.getActiveElements();\n    var updates = utils.arrayDiff(previous, actives);\n    var i, ilen, j, jlen, update, label, labels;\n\n    for (i = 0, ilen = updates.length; i < ilen; ++i) {\n      update = updates[i];\n      if (update[1]) {\n        labels = update[0].element[EXPANDO_KEY] || [];\n        for (j = 0, jlen = labels.length; j < jlen; ++j) {\n          label = labels[j];\n          label.$context.active = (update[1] === 1);\n          label.update(label.$context);\n        }\n      }\n    }\n\n    if (expando._dirty || updates.length) {\n      layout.update(expando._labels);\n      chart.render();\n    }\n\n    delete expando._dirty;\n  }\n};\n\nexport { plugin as default };\n"],"names":["N","_t","Manipulator","module","exports","define","amd","classes","globalThis","modalContent","self","getBackdropTemplate","backdropClasses","this","element","AM","backdrop","defineProperty","we","D","createHeader","day","month","enumerable","configurable","writable","value","wM","s","t","set","e","i","n","key","id","get","delete","setData","getData","removeData","da","Et","Math","floor","random","document","getElementById","Gc","getAttribute","includes","startsWith","split","trim","ua","querySelector","Re","qc","dispatchEvent","Event","Bi","jquery","nodeType","Ne","length","L","Object","keys","forEach","o","r","toString","call","match","toLowerCase","Hg","RegExp","test","Error","toUpperCase","re","getClientRects","style","parentNode","getComputedStyle","getPropertyValue","display","visibility","ai","Node","ELEMENT_NODE","classList","contains","disabled","hasAttribute","Zc","documentElement","attachShadow","getRootNode","ShadowRoot","eo","Hi","offsetHeight","Qc","jQuery","window","body","pa","Jc","readyState","addEventListener","push","st","dir","$","createElement","li","th","transitionDuration","transitionDelay","Number","parseFloat","Vg","target","a","removeEventListener","setTimeout","eh","indexOf","max","min","Wg","zg","jg","fa","ih","Yg","mouseenter","mouseleave","Kg","sh","Set","nh","uidEvent","oh","rh","originalHandler","delegationSelector","ah","ch","has","lh","p","f","b","relatedTarget","delegateTarget","l","c","h","oneOff","d","replace","u","querySelectorAll","_","off","type","apply","Xg","Ug","_a","on","one","Gg","slice","trigger","isPropagationStopped","isImmediatePropagationStopped","isDefaultPrevented","createEvent","initEvent","CustomEvent","bubbles","cancelable","preventDefault","defaultPrevented","ci","Ht","dispose","_element","constructor","DATA_KEY","EVENT_KEY","getOwnPropertyNames","_queueCallback","static","getInstance","VERSION","NAME","io","toggle","setAttribute","each","getOrCreateInstance","gt","Dt","It","mt","Is","Vi","hi","Fi","hh","ga","Wi","dh","ma","reduce","concat","ba","uh","ph","fh","_h","gh","mh","bh","vh","yh","so","ae","nodeName","Mt","ownerDocument","defaultView","di","Element","Lt","HTMLElement","va","ya","name","enabled","phase","fn","state","elements","styles","attributes","assign","removeAttribute","effect","popper","position","options","strategy","left","top","margin","arrow","reference","hasOwnProperty","requires","Zt","ui","no","zi","round","Ta","navigator","userAgentData","brands","Array","isArray","map","brand","version","join","userAgent","Th","ji","getBoundingClientRect","offsetWidth","width","height","visualViewport","offsetLeft","offsetTop","right","bottom","x","y","Ea","abs","Eh","isSameNode","host","Qt","em","Be","oo","assignedSlot","xh","offsetParent","Ms","transform","perspective","contain","willChange","filter","im","xa","Ls","Ah","wh","nm","rects","placement","kh","modifiersData","popperOffsets","padding","v","T","clientHeight","clientWidth","E","C","A","w","S","centerOffset","NODE_ENV","console","error","requiresIfExists","Yi","am","Sh","popperRect","variation","offsets","gpuAcceleration","adaptive","roundOffsets","isFixed","R","O","M","devicePixelRatio","lm","Ca","transitionProperty","some","warn","data","ro","passive","Aa","instance","scroll","resize","scrollParents","update","dm","ao","um","start","end","Oh","wa","scrollLeft","pageXOffset","scrollTop","pageYOffset","ka","Sa","overflow","overflowX","overflowY","Dh","$s","Oa","Ih","pm","clientTop","clientLeft","_m","scrollWidth","scrollHeight","direction","fm","mm","gm","Mh","Ki","boundary","rootBoundary","elementContext","altBoundary","contextElement","k","I","offset","X","P","Lh","_skip","mainAxis","altAxis","fallbackPlacements","flipVariations","allowedAutoPlacements","vm","Ae","qt","sort","bm","Map","z","Y","Xt","ne","every","ri","Pe","find","ca","Ri","Kc","Gt","reset","$h","Ph","Rh","preventOverflow","referenceClippingOffsets","popperEscapeOffsets","isReferenceHidden","hasPopperEscaped","Nh","Em","Da","Bh","tether","tetherOffset","Am","oe","Ce","vM","Uc","yM","wg","EM","kg","Sg","xM","CM","Ni","ha","Og","Dg","Xc","Ig","Mg","Lg","$g","sm","Dm","Om","km","Sm","Im","add","Lm","Promise","resolve","then","He","arguments","pi","$m","Hh","Vh","Bm","Fh","modifiers","Wh","lo","defaultModifiers","defaultOptions","orderedModifiers","setOptions","Mm","Nm","Rm","String","Pm","marginTop","marginRight","marginBottom","marginLeft","forceUpdate","destroy","onFirstUpdate","Hm","Fm","fi","zh","freeze","__proto__","afterMain","afterRead","afterWrite","applyStyles","auto","basePlacements","beforeMain","beforeRead","beforeWrite","clippingParents","computeStyles","createPopper","createPopperBase","createPopperLite","detectOverflow","eventListeners","flip","hide","main","modifierPhases","placements","popperGenerator","read","variationPlacements","viewport","write","Symbol","toStringTag","Ia","Ma","g","setDataAttribute","removeDataAttribute","getDataAttributes","dataset","charAt","getDataClassAttributes","getDataAttribute","toggleClass","La","remove","addClass","addStyle","removeClass","hasClass","maxOffset","scrollY","scrollX","m","closest","matches","prototype","findOne","children","parents","prev","previousElementSibling","next","nextElementSibling","focusableChildren","$a","_i","Pa","co","jh","Ra","ho","Ym","Km","Um","Xm","Gm","qm","Kh","Zm","Ve","uo","Na","nb","ob","rb","ab","lb","cb","hb","opacity","db","po","duration","iterations","easing","fill","ub","popperConfig","autoClose","dropdownAnimation","pb","Vt","Default","DefaultType","_isShown","show","_menu","getParentFromElement","_inNavbar","_createPopper","focus","_animationCanPlay","animate","_completeHide","_popper","super","_detectNavbar","_init","_didInit","dataApiKeydownHandler","clearMenus","_fadeOutAnimate","playState","_getConfig","TypeError","_config","_getPopperConfig","_getMenuElement","_getPlacement","teDropdownPosition","teDropdownAlignment","_getOffset","parseInt","_selectMenuItem","button","composedPath","tagName","clickEvent","stopPropagation","matchMedia","Ba","Uh","fo","Xh","parent","fb","_b","gb","mb","bb","Ha","Gh","_o","Ui","qh","Zh","xb","visible","hidden","baseTransition","collapsing","collapsingHorizontal","Cb","le","_isTransitioning","_selector","_getDimension","_classes","_addAriaAndCollapsedClass","_triggerArray","_getClasses","_initializeChildren","Qh","Jh","Xi","getWidth","innerWidth","_disableOverFlow","_setElementAttributes","_saveInitialAttribute","_applyManipulationCallback","_resetElementAttributes","removeProperty","isOverflowing","Ab","isVisible","isAnimated","rootElement","clickCallback","wb","td","ed","Va","_append","_getElement","_emulateAnimation","className","_isAppended","append","Ps","trap","_setElements","_setFocusTrap","disable","_focusableElements","_event","handler","_toggler","_firstElement","_filterVisible","_onlyVisible","_lastElement","event","_condition","condition","selector","onlyVisible","shiftKey","go","sd","Gi","kb","nd","keyboard","Ob","od","Ib","Mb","Lb","$b","Pb","qi","_backdrop","_focustrap","blur","_initializeBackDrop","_initializeFocusTrap","_addEventListeners","Fa","rd","Rb","Nb","Rs","Bb","animation","autohide","delay","ad","Hb","fadeIn","fadeOut","Vb","Ns","close","_destroyElement","_setupAutohide","_timeout","clearTimeout","Wa","$t","ld","cd","interval","ride","pause","wrap","touch","Yb","Kb","pointer","block","invisible","slideRight","slideLeft","Ub","gi","mi","bi","Bs","Xb","ArrowLeft","ArrowRight","Gb","za","qb","Zb","Qb","Jb","tv","ev","iv","sv","nv","ov","rv","hd","vi","ja","dd","Ya","Zi","uv","ce","_slide","nextWhenVisible","_isPaused","cycle","clearInterval","_interval","_updateInterval","setInterval","visibilityState","bind","to","_activeElement","_getItemIndex","_items","_isSliding","dataApiClickHandler","carouselInterface","_enableCycle","_applyInitialClasses","_setActiveIndicatorElement","_handleSwipe","touchDeltaX","_setActiveElementClass","_keydown","_touchSupported","_addTouchEventListeners","_pointerEvent","pointerType","touchStartX","clientX","touches","touchTimeout","_getItemByOrder","_triggerSlideEvent","from","_indicatorsElement","defaultInterval","_directionToOrder","_orderToDirection","slide","maxTouchPoints","PointerEvent","Ka","Jt","ud","pd","modalNonInvasive","vv","yv","staticProperties","Tv","Ev","xv","Cv","Av","wv","fd","_d","gd","kv","md","bd","vd","Hs","Vs","_isAnimated","_scrollBar","_adjustDialog","_setEscapeEvent","_setResizeEvent","_dialog","_ignoreBackdropClick","_showElement","_showBackdrop","_hideModal","handleUpdate","_triggerBackdropTransition","_resetAdjustments","currentTarget","paddingLeft","paddingRight","Ov","Iv","Mv","Lv","nodeValue","$v","area","br","col","code","div","hr","h1","h2","h3","h4","h5","h6","img","ol","pre","small","span","sub","sup","strong","ul","yd","DOMParser","parseFromString","innerHTML","Td","he","Rv","Nv","template","title","html","container","customClass","sanitize","sanitizeFn","allowList","Bv","AUTO","TOP","RIGHT","BOTTOM","LEFT","Hv","Vv","HIDE","HIDDEN","SHOW","SHOWN","INSERTED","CLICK","FOCUSIN","FOCUSOUT","MOUSEENTER","MOUSELEAVE","Ua","Fs","Xa","Ed","xd","Cd","Ws","Ga","Qi","Pg","enable","_isEnabled","toggleEnabled","_initializeOnDelegatedTarget","_activeTrigger","click","_isWithActiveTrigger","_enter","_leave","getTipElement","_hideModalHandler","tip","_disposePopper","isWithContent","getTitle","_getAttachment","_addAttachmentClass","_resolvePossibleFunction","_hoverState","_cleanTipClass","setContent","_sanitizeAndSetContent","setElementContent","textContent","updateAttachment","_getDelegateConfig","_handlePopperPlacementChange","_getBasicClassPrefix","_setListeners","_fixTitle","content","de","Uv","Xv","Gv","mo","_getContent","qa","Za","Ad","method","Qv","Jv","active","t0","e0","i0","Qa","wd","Ja","kd","tl","Sd","bo","refresh","_scrollElement","_getScrollTop","_offsets","_targets","_scrollHeight","_getScrollHeight","_getOffsetHeight","innerHeight","_process","_activeTarget","_activate","_clear","vo","l0","c0","h0","d0","Ji","yo","Dd","_0","Id","b0","v0","To","_transitionComplete","el","Fe","y0","T0","E0","x0","C0","A0","w0","k0","Md","il","Eo","S0","Ld","O0","D0","zs","_clearTimeout","_maybeScheduleHide","teToastShow","_hasMouseInteraction","_hasKeyboardInteraction","_onInteraction","Z","initCustomEvent","detail","HTMLIFrameElement","contentDocument","head","identifier","base","css","media","sourceMap","references","updater","nonce","nc","insert","appendChild","Boolean","styleSheet","cssText","createTextNode","childNodes","removeChild","insertBefore","btoa","DATE_TEXT_REF","unescape","dayNumber","JSON","stringify","firstChild","singleton","all","atob","splice","__esModule","default","locals","animationName","inputType","sl","xo","$d","Pd","Rd","Nd","We","Bd","Hd","yi","Ti","ts","Vd","Fd","P0","inputFormWhite","R0","Wd","notch","notchLeading","notchLeadingNormal","notchLeadingWhite","notchMiddle","notchMiddleNormal","notchMiddleWhite","notchTrailing","notchTrailingNormal","notchTrailingWhite","counter","N0","input","init","_initiated","_getLabelData","_applyDivs","_applyNotch","_getHelper","_getCounter","_getEvents","_getNotchData","forceActive","forceInactive","_removeBorder","_label","_showPlaceholder","_getLabelWidth","_getLabelPositionInInputGroup","_toggleDefaultDatePlaceholder","_helper","_counter","_maxLength","maxLength","_showCounter","activate","deactivate","href","_counterElement","_bindCounter","activeElement","_notchMiddle","_notchLeading","_labelWidth","_labelMarginLeft","_notchTrailing","_getElements","_deactivate","_leadingIcon","zd","nl","B0","animationStart","animationShowOnLoad","onStart","onEnd","onHide","onShow","animationOnScroll","animationWindowHeight","animationOffset","animationDelay","animationReverse","animationInterval","animationRepeat","animationReset","H0","js","startAnimation","_startAnimation","stopAnimation","_clearAnimationClass","changeAnimationType","_options","_animateElement","_isFirstScroll","_repeatAnimateOnScroll","_bindHoverEvents","_bindScrollEvents","_bindClickEvents","_bindTriggerOnEndCallback","_bindResetAnimationAfterFinish","_getAnimateElement","_animateOnScroll","_hideAnimateElement","_callback","_showAnimateElement","_addAnimatedClass","_setAnimationRepeat","_setAnimationReverse","_setAnimationDelay","animationDuration","_setAnimationDuration","_setAnimationInterval","animationIterationCount","animationDirection","Function","Co","F0","Ao","W0","gradientColor","z0","rippleCentered","rippleColor","rippleColorDark","rippleDuration","rippleRadius","rippleUnbound","j0","Y0","ripple","rippleWave","unbound","K0","ze","_addClickEvent","_clickHandler","_autoInit","minWidth","_isMinWidthSet","_initialClasses","_createRipple","layerX","layerY","offsetX","offsetY","_durationToMsNumber","_getDiameter","_createHTMLRipple","wrapper","_removeHTMLRipple","_addColor","_toggleUnbound","_appendRipple","_rippleTimer","_addedNewRippleClasses","findIndex","sqrt","topLeft","topRight","bottomLeft","bottomRight","localStorage","theme","_colorToRGB","backgroundImage","substr","color","bt","getDate","wo","getDay","ot","getMonth","K","getFullYear","rl","te","X0","es","Date","xt","Ct","setDate","is","setFullYear","Yd","ss","Ei","setHours","getTime","ko","Z0","q0","So","Kd","al","Ys","ty","ey","iy","sy","Ud","ny","oy","ry","ay","ly","cy","hy","Xd","datepickerHeader","selectedMonth","datepickerTitleText","datepickerDate","datepickerDateText","weekdaysShort","monthsShort","uy","createMainContent","date","year","datepickerDropdownContainer","modalContainer","selectedDate","selectedYear","monthsInRow","yearsInView","yearsInRow","inline","datepickerMain","createFooter","datepickerView","Gd","createViewTemplate","qd","week","datepickerFooterBtn","okBtnLabel","okBtnText","cancelBtnLabel","cancelBtnText","datepickerClearBtn","clearBtnLabel","clearBtnText","datepickerFooter","removeClearBtn","removeCancelBtn","removeOkBtn","py","view","Oo","Do","Io","datepickerDateControls","datepickerViewChangeButton","switchToMultiYearViewLabel","monthsFull","ue","datepickerArrowControls","datepickerPreviousButton","prevMonthLabel","changeMonthIconTemplate","datepickerNextButton","nextMonthLabel","createDayViewTemplate","headerDate","datepickerViewChangeIcon","viewChangeIconTemplate","startDay","U0","currentMonth","isSelected","isToday","disablePast","disableFuture","fy","weekdaysNarrow","datepickerDayHeading","weekdaysFull","datepickerCell","datepickerCellSmall","datepickerCellContent","datepickerCellContentSmall","getDatesArray","datepickerTable","_y","datepickerCellLarge","datepickerCellContentLarge","gy","years","yearsOffset","RIGHT_ARROW","ns","At","os","ut","rs","as","Pt","ee","hl","Po","Ro","Ty","Ey","xy","No","Zd","Qd","Bo","Cy","Ay","fT","nextYearLabel","prevYearLabel","nextMultiYearLabel","prevMultiYearLabel","switchToMonthViewLabel","switchToDayViewLabel","startDate","format","toggleButton","disableToggleButton","disableInput","animations","confirmDateOnSelect","_T","gT","fadeInShort","fadeOutShort","datepickerBackdrop","datepickerTitle","datepickerToggleButton","mT","dl","_toggleButtonId","activeCell","_view","_getActiveDayCell","_getActiveMonthCell","_getActiveYearCell","activeDay","_activeDate","activeMonth","activeYear","firstYearInView","lastYearInView","viewChangeButton","previousButton","nextButton","okButton","cancelButton","clearButton","datesContainer","_getNewDaysOrderArray","_getContainer","_appendToggleButton","_input","readOnly","pointerEvents","_listenToUserInput","_listenToToggleClick","_listenToToggleKeydown","my","insertAdjacentHTML","open","_isOpen","_setInitialDate","dy","_selectedDate","_selectedYear","_selectedMonth","_openDropdown","_openModal","_animations","_listenToDateSelection","_addControlsListeners","_updateControlsDisabledState","_listenToEscapeClick","_listenToKeyboardNavigation","_listenToDatesContainerFocus","_listenToDatesContainerBlur","_asyncFocusDatesContainer","_updateViewControlsAndAttributes","_listenToOutsideClick","_focusTrap","_handleUserInput","keyCode","_handleDateSelection","teDate","_pickDay","teMonth","teYear","_pickMonth","_pickYear","_updateHeaderDate","nextMonth","nextYears","nextYear","previousMonth","previousYears","previousYear","_changeView","_listenToFooterButtonsClick","handleOk","handleCancel","handleClear","_handleKeydown","_focusActiveCell","_removeCurrentFocusStyles","_handleDaysViewKeydown","_handleMonthsViewKeydown","_handleYearsViewKeydown","_selectDate","_removeHighlightFromCell","_selectMonth","_selectYear","_removeDatepickerListeners","_closeDropdown","_closeModal","_removeFocusTrap","_removePicker","_removeInputAndToggleListeners","_headerDate","_headerYear","_headerMonth","_confirmSelection","_removeCurrentSelectionStyles","_addSelectedStyles","_asyncChangeView","_removeSelectedStyles","formatDate","_addLeadingZero","Q0","J0","_getDelimeters","_parseDate","isNaN","getMonthNumberByMonthName","disableToggle","Ho","Vo","xi","Jd","getHours","getMinutes","j","hours","minutes","amOrPm","tu","eu","clientY","Fo","platform","iu","su","je","Ye","nu","tipsDisabled","ou","ru","Xs","W","au","Wo","pe","fe","lu","zo","cu","hu","du","uu","pu","fu","_u","gu","AT","wT","kT","jo","Yo","ST","mu","pl","OT","fl","_l","DT","IT","bu","MT","$T","gl","Ke","J","PT","Ci","Gs","ml","vu","Ko","bl","Uo","pt","vt","Rt","Xo","yu","vl","yl","Tu","RT","appendValidationInfo","bodyID","cancelLabel","clearLabel","closeModalOnBackdropClick","closeModalOnMinutesClick","defaultTime","enableValidation","focusInputAfterApprove","footerID","format12","format24","headID","increment","invalidLabel","maxTime","minTime","modalID","okLabel","overflowHidden","pickerID","showClearBtn","switchHoursToMinutesOnClick","iconSVG","withIcon","inputID","pmLabel","amLabel","NT","BT","tips","tipsActive","modal","clockAnimation","timepickerWrapper","timepickerContainer","timepickerElements","timepickerHead","timepickerHeadContent","timepickerCurrentWrapper","timepickerCurrentButtonWrapper","timepickerCurrentButton","timepickerDot","timepickerModeWrapper","timepickerModeAm","timepickerModePm","timepickerClockWrapper","timepickerClock","timepickerMiddleDot","timepickerHandPointer","timepickerPointerCircle","timepickerClockInner","timepickerFooterWrapper","timepickerFooter","timepickerFooterButton","timepickerInlineWrapper","timepickerInlineContainer","timepickerInlineElements","timepickerInlineHead","timepickerInlineHeadContent","timepickerInlineHourWrapper","timepickerCurrentMinuteWrapper","timepickerInlineIconUp","timepickerInlineIconSvg","timepickerInlineCurrentButton","timepickerInlineIconDown","timepickerInlineDot","timepickerInlineModeWrapper","timepickerInlineModeAm","timepickerInlineModePm","timepickerInlineSubmitButton","timepickerToggleButton","HT","Tl","_currentTime","_getValidate","_handleOpen","_removeModal","_document","toggleElement","_checkToggleButton","customIcon","dataWithIcon","vT","_getDomElements","_hour","_minutes","_AM","_PM","_wrapper","_modal","_hand","_circle","_clock","_clockInner","_handlerMaxMinHoursOptions","_isAmEnabled","_isPmEnabled","innerText","parentElement","_handleKeyboard","_makeHourDegrees","hour","degrees","addDegrees","minute","_makeMinutesDegrees","_makeInnerHoursDegrees","_isInner","_setHourOrMinute","_toggleClassActive","hoursArray","innerHours","minutesArray","_toggleBackgroundColorCircle","_setActiveClassToTipsOnOpen","_isInvalidTimeFormat","_addActiveClassToTip","_setTipsAndTimesDependOnInputValue","backgroundColor","elementToggle","bT","_toggleBackdropAnimation","_appendTimes","_handleSwitchTimeMode","_handleOkButton","_handleClose","_handleHoverInlineBtn","_handleDocumentClickInline","_handleInlineClicks","_handleSwitchHourMinute","_handleClockClick","_timeoutInterval","_toggleAmPm","showValueInput","TT","_getAppendClock","_handleDisablingTipsMaxTime","ET","_handleDisablingTipsMinTime","xT","atan2","_hasTargetInnerClass","_isMouseMove","elementFromPoint","trunc","PI","_handlerMaxMinMinutesOptions","_objWithDataOnChange","degreesMinutes","_handleMoveHand","degreesHours","_removeModalElements","sin","cos","dataToggle","inputFormatShow","inputFormat","values","_inputValue","_isHours","_isMinutes","VT","threshold","El","Go","qo","qs","Zs","_e","zT","stepperType","stepperLinear","stepperNoEditable","stepperActive","stepperCompleted","stepperInvalid","stepperDisabled","stepperVerticalBreakpoint","stepperMobileBreakpoint","stepperMobileBarBreakpoint","jT","Eu","xu","YT","Cu","Ue","yt","Au","Zo","wt","wu","activeStep","_steps","_activeStepIndex","activeStepIndex","changeStep","_toggleStep","nextStep","previousStep","_toggleStepClass","_bindMouseDown","_bindKeysNavigation","_toggleVertical","_toggleHorizontal","_toggleStepperView","_bindResize","_currentView","_setSingleStepHeight","_setHeight","_resetStepperHeight","_toggleDisabled","_toggleActive","_toggleCompleted","_animateHorizontalStep","_animateVerticalStep","_toggleStepTabIndex","_setStepsHeight","_verticalStepperStyles","paddingTop","paddingBottom","_hideInactiveSteps","_toggleStepperClass","_toggleOutlineStyles","outline","_hideElement","_elementHeight","ku","Qo","Su","Ou","Du","select","multiple","_selectMultiple","_selectSingle","selected","node","nativeOption","checked","deselect","_deselectMultiple","_deselectSingle","setNode","setActiveStyles","removeActiveStyles","label","secondaryText","groupId","icon","KT","_multiple","_selections","clear","selection","selections","labels","xl","UT","XT","GT","qT","ZT","QT","JT","tE","eE","Iu","iE","sE","nE","oE","rE","Mu","aE","lE","Jo","selectSize","Lu","selectDropdownContainer","dropdown","optionsWrapper","optionsWrapperScrollbar","maxHeight","$u","selectFilter","inputGroup","selectFilterInput","placeholder","hE","selectSearchPlaceholder","optionsList","selectAll","selectOption","selectOptionHeight","Nu","pE","Pu","uE","dE","selectOptionGroup","selectOptionGroupLabel","Ru","mE","selectOptionIcon","src","gE","selectOptionText","formCheckInput","_E","selectOptionSecondaryText","fE","Cl","Qs","Js","vE","yE","Bu","Hu","TE","Vu","Fu","Wu","Tt","Xe","Al","tn","zu","ju","ME","Yu","wl","PE","selectAutoSelect","selectContainer","selectClearButton","selectDisplayedLabels","selectFormWhite","selectOptionsSelectedLabel","selectAllLabel","selectVisibleOptions","selectFilterDebounce","selectNoResultText","selectValidation","selectValidFeedback","selectInvalidFeedback","selectPlaceholder","RE","NE","formOutline","initialized","noResult","selectArrow","selectArrowWhite","selectArrowDefault","selectArrowLg","selectArrowSm","selectClearBtn","selectClearBtnWhite","selectClearBtnDefault","selectClearBtnLg","selectClearBtnSm","selectFakeValue","selectInput","selectInputWhite","selectInputSizeDefault","selectInputSizeLg","selectInputSizeSm","selectLabel","selectLabelWhite","selectLabelSizeDefault","selectLabelSizeLg","selectLabelSizeSm","selectValidationValid","selectValidationInvalid","BE","en","filterInput","_dropdownContainer","_filteredOptionsList","_plainOptions","_selectionModel","hasSelectAll","hasSelection","tabIndex","_addPlaceholderOption","Option","prepend","_getOptionsToRender","_createOptionObject","_getPlainOptions","_getNavigationOptions","_selectAllOption","_renderMaterialWrapper","_wrapperId","_container","_initOutlineInput","_setDefaultSelections","_updateInputValue","_appendFakeValue","_updateFakeLabelPosition","_updateLabelPosition","_updateClearButtonVisibility","_bindComponentEvents","_createSelectAllOption","_dropdownContainerId","_dropdownHeight","_optionsToRender","_customContent","_setFirstActiveOption","_listenToFocusChange","cursor","cE","_notch","_listenToComponentKeydown","_listenToWrapperClick","_listenToClearBtnClick","_listenToClearBtnKeydown","_handleOpenKeydown","_handleClosedKeydown","altKey","_handleAutoSelection","_activeOption","_setNextOptionActive","_scrollToOption","_setPreviousOptionActive","_setFirstOptionActive","_setLastOptionActive","_activeOptionIndex","_handleSelectAll","_handleSelection","_getNumberOfGroupsBeforeOption","_updateActiveOption","_handleClear","_deselectAllOptions","_updateSelectAllState","_fakeValue","_emitValueChangeEvent","_emitNativeChangeEvent","_listenToOptionsClick","teId","_selectAllOptions","_handleMultiSelection","_handleSingleSelection","_singleOptionSelect","_isSelectionValid","_isLabelEmpty","bE","_isFakeValueActive","_updateLabelPositionWhileClosing","_updateDropdownWidth","_listenToSelectSearch","_listenToDropdownKeydown","_listenToWindowResize","_setInputActiveStyles","_handleWindowResize","_debounceFilter","_debounceTimeoutId","_filterOptions","_filter","_updateOptionsListTemplate","_getNoResultTemplate","_outsideClick","_handleOutSideClick","_toggleButton","_elementToggle","_resetFilterState","_removeDropdownEvents","_addMutationObserver","_mutationObserver","MutationObserver","_updateSelections","_updateDisabledState","_observeMutationObserver","observe","childList","characterData","subtree","_disconnectMutationObserver","mutationObserver","disconnect","_selectAllId","_removeComponentEvents","_destroyMaterialSelect","_destroyMaterialTemplate","setValue","_selectByValue","_inputEl","loading","FE","tr","Ku","kl","YE","text","closeIcon","KE","path","alt","UE","chipElement","chipCloseIcon","XE","Ai","_appendCloseIcon","_handleDelete","_handleTextChip","_handleClickOnChip","appendChip","VE","insertAdjacentElement","tag","obj","sn","nn","Uu","GE","Ft","Xu","Gu","Sl","qu","Zu","Ol","QE","Dl","JE","tx","ex","ls","Il","Qu","Ju","dx","parentSelector","initialValues","editable","labelText","inputClasses","inputOptions","ux","px","inputWrapperPadding","transition","contentEditable","chipsInputWrapper","chipsInput","chipsLabel","fx","tp","activeChip","allChips","_setChipsClass","_appendInputToElement","_handleInitialValue","_handleInputText","_handleChipsOnSelect","_handleEditable","_handleChipsFocus","_handleClicksOnChips","_inputInstance","_handleDeleteEvents","_handleEvents","_handleActiveChipAfterRemove","numberClicks","_handleUpEvents","_handleRightKeyboardArrow","_handleDownEvents","_handleLeftKeyboardArrow","_keyboardEvents","ctrlKey","_handleAddActiveClass","_handleRemoveActiveClass","_handleAddActiveClassWithKebyboard","_handleTextContent","arrOfObjects","activeObj","_handleCreateChip","_handleKeysInputToElement","_handleBlurInput","HE","Ge","plugins","legend","line","borderColor","borderWidth","tension","point","responsive","tooltips","intersect","mode","datasets","scales","stacked","grid","ticks","fontColor","borderDash","drawBorder","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","bar","pie","arc","doughnut","polarArea","radar","scatter","bubble","_x","$$typeof","vx","yx","mx","for","rn","clone","isMergeableObject","cs","Tx","Ex","ep","getOwnPropertySymbols","propertyIsEnumerable","Cx","ip","wx","Ax","customMerge","xx","arrayMerge","cloneUnlessOtherwiseSpecified","Ml","sp","er","Ll","Ox","darkTicksColor","darkLabelColor","darkGridLinesColor","darkmodeOff","darkMode","darkBgColor","darkBgColorLight","Dx","np","Rg","async","Chart","ArcElement","LineElement","BarElement","PointElement","BarController","BubbleController","DoughnutController","LineController","PieController","PolarAreaController","RadarController","ScatterController","CategoryScale","LinearScale","LogarithmicScale","RadialLinearScale","TimeScale","TimeSeriesScale","Decimation","Filler","Legend","Title","Tooltip","SubTitle","G1","register","bM","_Chartjs","_getChartjs","_ChartDataLabels","_getChartDataLabels","_data","_type","_canvas","_chart","_darkOptions","_getDarkConfig","_darkModeClassContainer","_prevConfig","_observer","_chartConstructor","systemColorMode","_handleMode","_observerCallback","setTheme","backdropColor","pointLabels","_createCanvas","dataLabelsPlugin","_changeDatasetBorderColor","_waitForCharts","ge","kt","ir","op","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","qe","hs","rp","at","rtl","thumb","rail","consuming","clicking","scrolling","ap","lp","cp","isAlive","settings","scrollingThreshold","an","handlers","hp","isEmpty","unbind","unbindAll","defineProperties","ds","eventElements","sr","nr","reach","Ix","Mx","it","eventElement","once","us","isWebKit","supportsTouch","DocumentTouch","supportsIePointer","msMaxTouchPoints","isChrome","ke","containerWidth","containerHeight","contentWidth","contentHeight","scrollbarXRail","scrollbarYRail","suppressScrollX","scrollXMarginOffset","scrollbarXActive","railXWidth","railXMarginWidth","railXRatio","scrollbarXWidth","dp","scrollbarXLeft","negativeScrollAdjustment","suppressScrollY","scrollYMarginOffset","scrollbarYActive","railYHeight","railYMarginHeight","railYRatio","scrollbarYHeight","scrollbarYTop","isRtl","isScrollbarXUsingBottom","scrollbarXBottom","scrollbarXTop","isScrollbarYUsingRight","scrollbarYRight","scrollbarYOuterWidth","scrollbarYLeft","scrollbarX","railBorderXWidth","scrollbarY","railBorderYWidth","Px","minScrollbarLength","maxScrollbarLength","up","pageY","changedTouches","Wx","pageX","shadowRoot","Lx","which","metaKey","wheelPropagation","wheel","deltaX","deltaY","wheelDeltaX","wheelDeltaY","deltaMode","wheelDelta","useBothWheelAxes","wheelSpeed","onwheel","onmousewheel","MSPointerEvent","targetTouches","buttons","MSPOINTER_TYPE_MOUSE","swipeEasing","isInitialized","ln","isNegativeScroll","borderLeftWidth","borderRightWidth","$x","borderTopWidth","borderBottomWidth","lastScrollTop","lastScrollLeft","onScroll","removePsClasses","$l","or","me","be","Pl","ps","jx","positionRight","Yx","Kx","railX","railXColors","railXThumb","railXThumbColors","railY","railYColors","railYThumb","railYThumbColors","Ux","_dataAttrOptions","perfectScrollbar","removeEvent","_addPerfectScrollbarStyles","_updateScrollPosition","_initEvents","ResizeObserver","attributeFilter","_canTransform","_psClasses","teColor","tC","entries","entriesOptions","fullPagination","rowsText","allText","paginationStartIconTemplate","paginationLeftIconTemplate","paginationRightIconTemplate","paginationEndIconTemplate","ATTR_PAGINATION_NAV","selectItemsWrapper","paginationRowsText","loadingPaginationRowsText","selectWrapper","loadingPaginationSelectWrapper","ATTR_PAGINATION_RIGHT","ATTR_PAGINATION_END","paginationStartButton","paginationLeftButton","paginationRightButton","paginationEndButton","ATTR_HEADER_CHECKBOX","pp","columns","rows","noFoundMessage","edit","multi","selectable","loadingMessage","pagination","bordered","borderless","striped","hover","fixedHeader","sortIconTemplate","ATTR_BODY","checkboxRowWrapper","ATTR_HEADER","rowIndex","fixed","rowItem","tableBordered","field","row","rowAnimation","hoverRow","noFoundMessageWrapper","aC","column","checkboxHeaderWrapper","checkboxHeader","loadingColumn","rowsTemplate","generateRows","sortIconWrapper","sortIcon","sC","table","tableHeader","fixedHeaderBody","loadingItemsWrapper","loadingProgressBarWrapper","loadingProgressBar","fp","activePage","cn","Nt","hn","rr","uC","Rl","pC","fC","_C","gC","mC","bC","vC","yC","Nl","dn","Bl","TC","_p","EC","xC","yA","clickableRows","defaultValue","maxWidth","sortField","sortOrder","ofText","forceSort","TA","EA","columnIndex","xA","CA","paginationBordered","checkboxRow","paginationNav","paginationButtonsWrapper","selectableRow","loadingPaginationNav","AA","ar","_columns","_rows","searchResult","dC","_search","_searchColumn","computedRows","order","hC","_activePage","pages","ceil","navigationText","tableOptions","loaderClass","_clearClassList","_getOptions","_setup","_performSort","_selectInstance","_removeEventListeners","_perfectScrollbar","search","_toggleDisableState","_renderRows","_setActiveSortIcon","setActivePage","_changeActivePage","_emitSelectEvent","selectedRows","_selected","selectedIndexes","allSelected","_getRows","_getColumns","_getCSSValue","_setActiveRows","_setEntries","_setSelected","_renderTable","_setupPagination","_setupEditable","_setupClickableRows","_setupSelectable","_setupScroll","_setupSort","index","_updateRow","_checkboxes","_headerCheckbox","_toggleSelectAll","_toggleSelectRow","_paginationRight","_paginationLeft","_paginationStart","_paginationEnd","_setupPaginationSelect","_select","_formatCells","_sortReverse","gp","lr","fs","DA","tooltip","readonly","after","before","dynamic","IA","mp","MA","bp","vp","yp","Tp","Ep","_fn","_icons","_tooltips","_bindMouseEnter","_bindMouseLeave","_bindKeyDown","_bindKeyUp","_bindFocusLost","_saveOriginalClassList","_saveOriginalIcons","_setCustomText","_setToolTips","_index","_updateRating","_triggerEvents","_savedIndex","_clearRating","_setElementOutline","_updateAfterKeyDown","_restoreOriginalIcon","_originalClassList","_originalIcons","Hl","un","xp","LA","$A","Vl","Cp","NA","popconfirmMode","message","cancelText","okText","popconfirmIconTemplate","confirmLabel","BA","HA","btnCancel","btnConfirm","btnsContainer","fade","messageText","popover","VA","cr","_uid","popconfirmBody","_openPopover","_getPopoverTemplate","_getModalTemplate","_handleCancelButtonClick","_handleConfirmButtonClick","_listenToEscapeKey","_handlePopconfirmTransitionEnd","_handleOutsideClick","_handleEscapeKey","propertyName","_getPopconfirmTemplate","config","_translatePositionValue","_cancelButton","_confirmButton","Fl","pn","_s","Ap","FA","wp","ve","zoomLevel","prevIconTemplate","ATTR_TIMEPICKER","showFullscreenIconTemplate","hideFullscreenIconTemplate","zoomInIconTemplate","closeIconTemplate","zoomOutIconTemplate","spinnerContent","ZA","nextIconTemplate","QA","ATTR_DATEPICKER","captionWrapper","SELECTOR_TIMEPICKER_ELEMENTS","closeBtn","EVENT_OPEN","fullscreenBtn","gallery","galleryContent","galleryCounter","imgWrapper","leftTools","loader","nextBtn","nextBtnWrapper","prevBtn","prevBtnWrapper","rightTools","spinner","toolbar","vertical","zoomBtn","JA","caption","gs","activeImg","_activeImg","currentImg","_galleryContent","qA","_appendTemplate","_getImages","_setActiveImg","_sortImages","_loadImages","_resizeImages","_toggleTemplate","_addEvents","_focusFullscreenBtn","_removeEvents","_animating","_images","_beforeSlideEvents","_slideHorizontally","_slideToTarget","_afterSlideEvents","zoomIn","_zoom","_updateZoomBtn","zoomOut","_updateImgPosition","toggleFullscreen","_fullscreen","_fullscreenBtn","_gallery","requestFullscreen","exitFullscreen","_restoreDefaultFullscreen","_restoreDefaultPosition","_restoreDefaultZoom","_toolsToggleTimer","_doubleTapTimer","_id","_appendLoader","_appendToolbar","_appendContent","_appendArrows","_appendCaption","_galleryToolbar","_imgCounter","_zoomBtn","zoomInBtn","_toggleZoom","_loader","_leftArrowWrapper","_rightArrowWrapper","_rightArrow","shift","Image","_addImgStyles","onload","teImg","draggable","teCaption","_calculateImgSize","_positionX","_positionY","_onResize","_onFullscreenChange","webkitIsFullScreen","mozFullScreen","msFullscreenElement","_animationStart","_resetDoubleTap","_slideImg","_updateActiveImg","_showLoader","_updateCaption","_hideLoader","_updateCounter","_hideGallery","_enableScroll","_showGallery","_disableScroll","_setToolsToggleTimout","_onWindowTouchmove","_onWindowTouchstart","_onImgMousedown","_onMousedown","_onImgMousemove","_onMousemove","_onImgWheel","_onZoom","_onImgMouseup","_onMouseup","_onImgTouchend","_onTouchend","_onImgDoubleClick","_onDoubleClick","_onWindowResize","_onWindowFullscreenChange","_onAnyImgAction","_resetToolsToggler","_onGalleryClick","_onBackdropClick","_onKeyupEvent","_onKeyup","_onRightArrowKeydownEvent","_onRightArrowKeydown","_onFullscreenBtnKeydownEvent","_onFullscreenBtnKeydown","_originalPositionX","_originalPositionY","_mousedownPositionX","_mousedownPositionY","_mousedown","_multitouch","_touchZoomPosition","_moveImg","_checkDoubleTap","_calculateTouchZoom","hypot","screen","_focusRightArrow","_tapTime","_tapCounter","_setNewPositionOnZoomIn","_zoomTimer","_showTools","_hideTools","tw","isRequired","isEmail","isLongerThan","isShorterThan","isChecked","isPhone","isNumber","isString","isBoolean","isDate","is12hFormat","is24hFormat","ew","Wl","zl","kp","dr","ur","pr","jl","fr","Sp","sw","rw","aw","lw","cw","hw","validFeedback","invalidFeedback","disableFeedback","customRules","customErrorMessages","activeValidation","submitCallback","Op","dw","notchLeadingValid","notchMiddleValid","notchTrailingValid","notchLeadingInvalid","notchMiddleInvalid","notchTrailingInvalid","basicInputValid","basicInputInvalid","checkboxValid","checkboxInvalid","radioValid","radioInvalid","labelValid","labelInvalid","elementValidated","uw","_r","_validationObserver","_submitCallback","_removeValidationTraces","_validationResult","_submitButton","_validationElements","_shouldApplyInputEvents","_removeFeedbackWrapper","initialHTML","_getValidationElements","ruleset","_createFeedbackWrapper","_watchForValidationChanges","attributeName","_handleValidation","_applyInputEvents","_isValid","_validateSingleElement","_emitEvents","_validateByRuleset","_restyleNotches","_restyleBasicInputs","_restyleCheckboxes","_restyleLabels","_applyFeedback","result","validation","_getRuleset","callback","_errorMessages","parameter","fullName","_handleInputChange","_getRuleData","_handleSubmitButton","_handleSubmitButtonClick","_getCoordinates","_getDirection","_getOrigin","_getDistanceBetweenTwoPoints","_getMidPoint","x1","x2","y1","y2","_getVectorLength","_getRightMostTouch","MIN_VALUE","_getAngle","_getAngularDistance","_getCenterXY","_getPinchTouchOrigin","_getPosition","Yl","fw","time","pointers","_w","gw","handleTouchStart","_timer","handleTouchEnd","bw","vw","yw","_startPosition","handleTouchMove","Ze","Tw","Ew","xw","ww","kw","Sw","_startTouch","_movedTouch","ms","Ow","Dw","Iw","Mw","Lw","$w","_touch","_origin","ratio","_ratio","origin","_math","Kl","Pw","taps","Rw","Nw","_tapCount","_n","Bw","Hw","Vw","angle","Fw","Ww","currentAngle","initialAngle","change","previousAngle","distance","rotate","Ul","Xl","zw","jw","gr","_touchStartHandler","_touchMoveHandler","_touchEndHandler","swipe","press","pan","pinch","tap","_handleTouchStart","_handleTouchMove","_handleTouchEnd","Gl","gn","ql","Yw","Kw","Uw","Xw","Gw","mr","isWindow","containerToScroll","elFromHrefExist","_href","offsetFromEl","easingFunction","_motionLinear","_handleClick","cancelScroll","isCancel","_inViewport","_scrollOnClickEvent","_preventNativeScroll","_scrollOnNextTick","isInViewport","scrollTo","_preventDefault","_scrollError","_deleteScrollOnStart","_addScrollOnEnd","_addScrollOnCancel","_motionEaseInQuad","_motionEaseInCubic","_motionEaseInQuart","_motionEaseInQuint","_motionEaseInOutQuad","_motionEaseInOutCubic","_motionEaseInOutQuart","_motionEaseInOutQuint","_motionEaseOutQuad","_motionEaseOutCubic","_motionEaseOutQuart","_motionEaseOutQuint","Dp","Ip","Mp","Jw","lazySrc","lazyDelay","lazyAnimation","lazyOffset","lazyPlaceholder","lazyError","tk","mn","offsetValues","inViewport","isContainer","_animation","_childrenInstances","_setupContainer","_setupElement","errorHandler","_setPlaceholder","_scrollHandler","scrollHandler","_setSrc","_removeAttrs","_setElementError","Lp","bn","ik","clipboardTarget","sk","nk","vr","copyText","_initCopy","_createNewInput","_selectInput","setSelectionRange","execCommand","Zl","yr","ok","infiniteDirection","rk","Tr","rect","vn","Er","hk","dk","backdropID","loadingIcon","loadingText","uk","pk","loadingSpinner","spinnerColor","fk","xr","_loadingIcon","cloneNode","_loadingText","_removeElementsOnStart","_setBackdrop","_setLoadingIcon","_setLoadingText","_setScrollOption","_removeBackdrop","_backdropElement","ak","_parentElement","Tk","Cr","yn","uid","Ql","$p","Pp","Jl","Rp","Lk","toPercentage","Vk","thisArg","Fk","loopable","reverse","len","Hp","bs","defaultDate","a1","timepicker","v1","datepicker","showFormat","dateTimepickerToggleIconTemplate","datepickerToggleIconTemplate","timepickerToggleIconTemplate","zk","jk","pickerIcon","buttonsContainer","Yk","Ar","_openDatePicker","_handleInput","_removeTimePicker","_removeDatepicker","Vp","_timepicker","_datepicker","_dateValue","_timeValue","_addDatepicker","_addTimePicker","_disableInput","_setInitialDefaultInput","_applyFormatPlaceholder","_handleTimepickerDisablePast","_handleTimepickerDisableFuture","Mk","timepickerOptions","_addIconButtons","Np","_enableOrDisableToggleButton","_format","_listenToCancelClick","_cancel","yk","gk","_k","bk","mk","_openDropdownDate","Bp","_openTimePicker","_handleCancelButton","_openDropdownTime","Wk","wr","Tn","Fp","Kk","Uk","Xk","stickyAnimationSticky","stickyAnimationUnsticky","stickyBoundary","stickyDelay","stickyDirection","stickyMedia","stickyOffset","stickyPosition","stickyZIndex","Gk","qk","stickyActive","Zk","kr","_disableSticky","_hiddenElement","_elementPositionStyles","_scrollDirection","_isSticked","_elementOffsetTop","_scrollTop","_pushPoint","_manuallyDeactivated","_createHiddenElement","_enableSticky","_changeBoundaryPosition","inactive","_userActivityListener","_updateElementPosition","_updateElementOffset","_updatePushPoint","_updateScrollDirection","_clearInProgressAnimations","_updatePosition","_setStyle","_removeUnstickyAnimation","_resetStyles","_removeHiddenElement","_toggleClass","zIndex","_copyElement","tc","inits","isInited","En","alert","isToggler","carousel","chips","chip","onInit","datetimepicker","rating","scrollspy","sidenav","stepper","toast","datatable","popconfirm","smoothScroll","lazyLoad","clipboard","infiniteScroll","loadingManagement","sticky","chart","advanced","parse","collapse","EVENT_SHOW","EVENT_HIDDEN","OPEN_SELECTOR","autoInitial","offcanvas","tab","lightbox","uS","allowReinits","dS","jQueryInterface","Constructor","noConflict","Qk","fS","checkOtherImports","Wp","pS","zp","Sr","ec","vs","xn","yS","TS","ES","sidenavAccordion","sidenavBackdrop","sidenavBackdropClass","sidenavCloseOnEsc","sidenavColor","sidenavContent","sidenavExpandable","sidenavExpandOnHover","sidenavFocusTrap","sidenavHidden","sidenavMode","sidenavModeBreakpointOver","sidenavModeBreakpointSide","sidenavModeBreakpointPush","sidenavBreakpointSm","sidenavBreakpointMd","sidenavBreakpointLg","sidenavBreakpointXl","sidenavBreakpoint2xl","sidenavScrollContainer","sidenavSlim","sidenavSlimCollapsed","sidenavSlimWidth","sidenavPosition","sidenavRight","sidenavTransitionDuration","sidenavWidth","xS","wi","links","navigation","sidenavStyle","toggler","translation","_slimCollapsed","isBackdropVisible","changeMode","_setMode","escHandler","hashHandler","_update","toggleSlim","_setSlim","getBreakpoint","_transformBreakpointValuesToObject","toggleSidenav","lg","_setModeFromBreakpoints","_collapseItems","_getOffsetValue","property","_getPxValue","_initialContentStyle","_getProperty","_isActive","URL","location","_isAllToBeCollapsed","_isAllCollapsed","_updateBackdrop","_setupTouch","_setupFocusTrap","_setupCollapse","_setupSlim","_setupInitialStyling","_setupScrolling","_setupContent","_setupActiveState","_setupRippleEffect","_updateOffsets","_setTabindex","_setActiveElements","_setupCollapseList","list","menu","menuIndex","_generateCollpaseID","_ID","teSidenavStateShow","teCollapseShow","_rotateArrow","_toggleCategory","_tempSlim","_content","_setColor","_toggleSlimDisplay","_setActive","_activeNode","_setActiveCategory","_updateFocus","_setContentOffsets","_isiPhone","_updateTogglerAria","_updateDisplay","_addBackdropOnInit","Se","Animate","Alert","Button","ChipsInput","Chip","Dropdown","Carousel","Collapse","Offcanvas","Modal","Popover","ScrollSpy","Select","Tab","Toast","Ripple","Datepicker","Timepicker","Sidenav","Stepper","Input","PerfectScrollbar","Rating","Datatable","Popconfirm","SmoothScroll","Lightbox","Validation","Touch","LazyLoad","Datetimepicker","Clipboard","InfiniteScroll","LoadingManagement","Sticky","CS","H","Q","V","rt","isFinite","Wt","B","jp","endsWith","G","U","Or","datasetIndex","Dr","create","Yp","wS","ye","merger","Cn","kS","Kp","Qe","OS","SS","ic","zt","Je","Up","size","et","q","IS","Ir","POSITIVE_INFINITY","MS","nt","An","Xp","jt","log10","Te","sign","Gp","wn","pow","ys","qp","ie","sc","Zp","Qp","PS","Bt","kn","ct","Oe","oc","De","NS","Jp","tf","_chartjs","listeners","ef","sf","requestAnimationFrame","nf","rc","ft","of","_sorted","iScale","_parsed","axis","minDefined","maxDefined","getUserBounds","getPixelForValue","count","rf","xScale","yScale","_scaleRanges","xmin","xmax","ymin","ymax","Mr","af","lf","Sn","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","On","ti","Dn","ei","Ie","cf","Yt","F","ac","WS","zS","Lr","jS","KS","XS","hf","GS","qS","lc","ZS","cc","hc","df","tO","exec","QS","JS","uf","pf","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","viTet","JHt","wEte","wEtesmoke","LwgYF","$r","nO","sO","transparent","oO","dc","Ts","Pr","ff","_f","cO","rO","Rr","valid","_valid","rgb","_rgb","rgbString","hexString","hslString","iO","mix","interpolate","lO","alpha","clearer","greyscale","opaquer","negate","lighten","darken","saturate","desaturate","eO","YS","gf","mf","bf","uc","ki","pc","In","fc","describe","override","route","getDevicePixelRatio","events","font","family","lineHeight","weight","hoverBackgroundColor","hoverBorderColor","hoverColor","indexAxis","interaction","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","scale","showLine","drawActiveElementsOnTop","_scriptable","_indexable","_fallback","Nr","measureText","uO","garbageCollect","save","restore","Si","currentDevicePixelRatio","vf","getContext","resetTransform","clearRect","_c","yf","pointStyle","rotation","radius","translate","drawImage","beginPath","ellipse","closePath","moveTo","lineTo","SQRT1_2","stroke","Mn","Br","clip","Hr","pO","fO","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","Oi","strokeWidth","strokeColor","string","fillStyle","textAlign","textBaseline","_O","strokeStyle","lineWidth","strokeText","fillText","gO","strikethrough","underline","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","decorationWidth","Ln","mO","bO","vO","yO","gc","Tf","Di","ht","lt","dO","tt","cacheable","ii","mc","wf","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","xf","EO","bc","vc","OO","getOwnPropertyDescriptor","Reflect","getPrototypeOf","kf","ownKeys","_storage","Es","_proxy","_context","_subProxy","_stack","_descriptors","Ef","setContext","isScriptable","CO","AO","isIndexable","xO","allKeys","scriptable","indexable","_allKeys","Cf","wO","kO","Af","SO","DO","Sf","_parsing","IO","EPSILON","xs","skip","Of","MO","previous","PO","LO","$O","Vr","NO","spanGaps","cubicInterpolationMode","capBezierPoints","RO","Df","yc","Fr","Wr","HO","Ii","VO","Mi","canvas","boxSizing","box","FO","Tc","zO","WO","If","ctx","setTransform","jO","Mf","BO","Li","YO","KO","Lf","$n","Intl","NumberFormat","UO","XO","setWidth","xPlus","leftForLtr","GO","Cs","$f","getPropertyPriority","setProperty","prevTextDirection","Pf","Rf","between","compare","normalize","Nf","loop","Bf","qO","Hf","segments","points","Vf","Ff","_datasetIndex","p0","p1","p0DataIndex","p1DataIndex","eD","tD","borderCapStyle","borderDashOffset","borderJoinStyle","pop","_loop","ZO","stop","QO","_fullLoop"],"version":3,"file":"index.17268926.js.map"}